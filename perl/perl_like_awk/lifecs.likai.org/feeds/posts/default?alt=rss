<?xml version='1.0' encoding='UTF-8'?><rss xmlns:atom='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd='http://schemas.google.com/g/2005' xmlns:thr='http://purl.org/syndication/thread/1.0' version='2.0'><channel><atom:id>tag:blogger.com,1999:blog-4401555280825766585</atom:id><lastBuildDate>Thu, 06 Sep 2012 05:26:56 +0000</lastBuildDate><category>correctness</category><category>system</category><category>internationalization</category><category>theory</category><category>amazon</category><category>howto</category><category>abstraction</category><category>language</category><category>release</category><category>algorithm</category><category>ideas</category><category>c++</category><category>google</category><category>c</category><title>Life of a Computer Scientist</title><description>Significant research starts with a humble beginning.</description><link>http://lifecs.likai.org/</link><managingEditor>noreply@blogger.com (Likai Liu)</managingEditor><generator>Blogger</generator><openSearch:totalResults>145</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-2489649237969332324</guid><pubDate>Thu, 06 Sep 2012 04:48:00 +0000</pubDate><atom:updated>2012-09-06T00:52:45.917-04:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>howto</category><title>Apple Mac OS X keyboard viewer got stuck maximized</title><description>My mom likes pushing buttons, but today she pushed the wrong one. She often uses keyboard viewer to assist her with input methods because she couldn't remember the key mappings. Once the keyboard viewer windows is shown, you can click on the green button to maximize the keyboard viewer, and clicking on the green button again should restore its original size. However, if you drag the keyboard viewer in its maximized state just slightly off the screen, then the green button no longer restores the keyboard viewer back to its original size. The maximized keyboard viewer looks like this and occupies half of the screen.&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-Tdl8QXxXEfQ/UEgomm4anhI/AAAAAAAABWc/u54l8yi1F_M/s1600/SS.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="250" src="http://1.bp.blogspot.com/-Tdl8QXxXEfQ/UEgomm4anhI/AAAAAAAABWc/u54l8yi1F_M/s400/SS.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;This happens on Mac OS X Lion (10.7). Not sure if this happens with other versions also.&lt;br /&gt;&lt;br /&gt;The solution is to first close the keyboard viewer, then use Terminal (under Applications/Utilities) and enter the following command at the prompt: &lt;br /&gt;&lt;pre&gt;defaults delete com.apple.KeyboardViewer&lt;/pre&gt;The keyboard viewer should be restored to its original state next time you open it.&lt;br /&gt;&lt;br /&gt;Another issue my mom was having was that when she tried to enter Chinese, certain characters cause programs to crash (also known as 地雷字, di lei zi, meaning “landmine characters”). It turns out the culprit is the "Use symbol and text substitution" option. It can be turned off under Preferences, Language &amp;amp; Text, Text. Text substitution erroneously matches some input sequences prematurely from the input method and causes invalid characters to be entered into the program.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-2489649237969332324?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2012/09/apple-mac-os-x-keyboard-viewer-got.html</link><author>noreply@blogger.com (Likai Liu)</author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://1.bp.blogspot.com/-Tdl8QXxXEfQ/UEgomm4anhI/AAAAAAAABWc/u54l8yi1F_M/s72-c/SS.png' height='72' width='72'/><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-719110593994771371</guid><pubDate>Mon, 03 Sep 2012 13:40:00 +0000</pubDate><atom:updated>2012-09-06T00:53:05.689-04:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>correctness</category><category domain='http://www.blogger.com/atom/ns#'>c</category><title>Mistake in my RC4 implementation</title><description>Jim Wilcoxson approached me two days ago regarding the &lt;a href="http://lifecs.likai.org/2011/12/evaluating-rc4-as-pseudo-random-number.html"&gt;skewed distribution I observed in RC4&lt;/a&gt;. He sent me a snippet from SQLite's implementation of RC4 and showed that it did not suffer the non-uniform result I saw.&lt;br /&gt;&lt;br /&gt;After digging out my old code, I found two mistakes I made. One in the key scheduling algorithm:&lt;br /&gt;&lt;pre&gt;  void initialize(const char *begin, const char *end) throw() {&lt;br /&gt;    for (size_t i = 0; i &amp;lt; 256; ++i)&lt;br /&gt;      s_[i] = i;&lt;br /&gt;&lt;br /&gt;    const char *key = begin;&lt;br /&gt;    uint8_t j = 0;&lt;br /&gt;&lt;br /&gt;    for (size_t i = 0; i &amp;lt; 256; ++i, &lt;span style="background-color: #fff2cc;"&gt;++key&lt;/span&gt;) {&lt;br /&gt;      if (key == end) key = begin;&lt;br /&gt;      j = j + s_[i] + *key;&lt;br /&gt;      std::swap(s_[i], s_[j]);&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;&lt;/pre&gt;In the original code, I had forgotten to ++key, so the key scheduling is always done on the first byte of the key only. The addition for the fix is highlighted in yellow.&lt;br /&gt;&lt;br /&gt;Another mistake is an index out of bounds error in the generation of bytes. &lt;br /&gt;&lt;pre&gt;  uint8_t next() throw() {&lt;br /&gt;    i_ = i_ + 1;&lt;br /&gt;    j_ = j_ + s_[i_];&lt;br /&gt;    std::swap(s_[i_], s_[j_]);&lt;br /&gt;    return s_[s_[i_] + s_[j_]];&lt;br /&gt;  }&lt;br /&gt;&lt;/pre&gt;There is an array index out of bounds error in the return line.  The reason is that in C/C++ compiler, the intermediate result of an expression, if it's an int, does not inherit the int size of the sub-expressions, but instead is word sized. Since both s_[i_] and s_[j_] are (0...255), half of the times the result is in (256...511) which accesses some memory beyond s_[]. This explains why I get a skew where most byte value tallies are halved.&lt;br /&gt;&lt;br /&gt;The fix is to replace the return line as follows: &lt;br /&gt;&lt;pre&gt;    return s_[&lt;span style="background-color: #fff2cc;"&gt;(uint8_t) (&lt;/span&gt;s_[i_] + s_[j_]&lt;span style="background-color: #fff2cc;"&gt;)&lt;/span&gt;];&lt;br /&gt;&lt;/pre&gt;Where an explicit cast to uint8_t solves the index out of bounds problem.&lt;br /&gt;&lt;br /&gt;The suggestion I gave, to add ^ j, only obscures the problem.&lt;br /&gt;&lt;br /&gt;Fortunately my code has never been used in a production system. It was written quickly to give me a PRNG for a memory usage simulator I wrote last year for testing a memory allocator where the PRNG (1) must not use memory allocation itself, (2) must not use locking, (3) is reasonably fast and easy to implement. The implementation satisfied all my original requirements but was not RC4.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-719110593994771371?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2012/09/mistake-in-my-rc4-implementation.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-3521294083917071134</guid><pubDate>Sun, 05 Aug 2012 22:44:00 +0000</pubDate><atom:updated>2012-08-05T18:48:02.920-04:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>system</category><title>A critique of non-blocking deque due to Arora, Blumofe, and Plaxton</title><description>Arora, Blumofe and Plaxton presented a non-blocking implementation of work-stealing deque in the paper &lt;a href="http://dl.acm.org/citation.cfm?doid=277651.277678"&gt;Thread scheduling for multiprogram multiprocessors&lt;/a&gt;&amp;nbsp;(SPAA 1998). Before that, Blumofe worked on the &lt;a href="http://supertech.csail.mit.edu/papers/steal.pdf"&gt;randomized work stealing algorithm for Cilk&lt;/a&gt;, with Charles Leiserson.&lt;br /&gt;&lt;br /&gt;Here I wish to make a few notes on the non-blocking deque implementation in the SPAA 1998 paper. A deque is described by the following preamble. &lt;br /&gt;&lt;pre&gt;// An abstract, opaque type describing a unit of work.&lt;br /&gt;struct Thread;&lt;br /&gt;&lt;br /&gt;// A finite but arbitrary large capacity.&lt;br /&gt;#define DEQ_SIZE ...&lt;br /&gt;&lt;br /&gt;// An array for storing items in the deque.&lt;br /&gt;Thread *deq[DEQ_SIZE];&lt;br /&gt;&lt;br /&gt;// A top pointer that is time-stamped to avoid ABA problem.&lt;br /&gt;struct Age {&lt;br /&gt;  size_t top;&lt;br /&gt;  size_t tag;&lt;br /&gt;};&lt;br /&gt;&lt;br /&gt;volatile Age age;&lt;br /&gt;&lt;br /&gt;// Assume there is a compare and swap for struct Age.  Most&lt;br /&gt;// likely this is going to use a double word compare and swap.&lt;br /&gt;// If a machine does not support that, adjust the struct Age&lt;br /&gt;// above to divide a machine word into two bit fields, and use&lt;br /&gt;// single-word compare and swap.&lt;br /&gt;//&lt;br /&gt;// Modifies newAge to the value of oldAge if the operation&lt;br /&gt;// succeeds.&lt;br /&gt;void cas(volatile Age&amp;amp; mem, Age oldAge, Age&amp;amp; newAge);&lt;br /&gt;&lt;br /&gt;// Bottom pointer is manipulated solely by the worker who&lt;br /&gt;// owns the deque, never by thief.&lt;br /&gt;volatile size_t bot;&lt;br /&gt;&lt;/pre&gt;All of the code below is copied verbatim from the paper; it is missing necessary type annotation, which must be added before the code could compile, but adding type annotation is straightforward.&lt;br /&gt;&lt;br /&gt;The owner puts work into the deque using &lt;code&gt;pushBottom()&lt;/code&gt; as defined below.&lt;br /&gt;&lt;pre&gt;void pushBottom(Thread *thr)&lt;br /&gt;{&lt;br /&gt;  localBot = bot;&lt;br /&gt;  deq[localBot] = thr;&lt;br /&gt;  localBot++;&lt;br /&gt;  bot = localBot;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;Here we note that the &lt;code&gt;pushBottom()&lt;/code&gt; function doesn't actually respect the capacity of the deque. The deque might overflow without notice. Bad.&lt;br /&gt;&lt;br /&gt;A thief steals work using &lt;code&gt;popTop()&lt;/code&gt; as defined below.  The difference between "bottom" and "top" only serves to illustrate that thief is stealing from opposite end of the deque than the owner.  This allows the owner to go on its own merry ways most of the times, until contention with the thief happens when the queue is nearly empty. &lt;br /&gt;&lt;pre&gt;Thread *popTop()&lt;br /&gt;{&lt;br /&gt;  oldAge = age;&lt;br /&gt;  localBot = bot;&lt;br /&gt;  if (localBot &amp;lt;= oldAge.top)&lt;br /&gt;    return NULL;&lt;br /&gt;  thr = deq[oldAge.top];&lt;br /&gt;  newAge = oldAge;&lt;br /&gt;  newAge.top++;&lt;br /&gt;  cas(age, oldAge, newAge);&lt;br /&gt;  if (oldAge == newAge)&lt;br /&gt;    return thr;&lt;br /&gt;  return ABORT;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;The assumption is that if the thief manages to increment age, then it is assumed to claim the item at deq[oldAge.top].  If the increment fails due to contention with the owner (queue becomes empty) or with a fellow thief (queue is not empty yet), the current thief gives up.  In the latter case, an alternative implementation could decide to retry from the beginning rather than abort.  This causes a thief to potentially wait for an unbounded time, but system-wise at least one thief is making progress.  The owner removes an item from the deque using &lt;code&gt;popBottom()&lt;/code&gt; as follows. &lt;br /&gt;&lt;pre&gt;Thread *popBottom()&lt;br /&gt;{&lt;br /&gt;  localBot = bot;&lt;br /&gt;  if (localBot == 0)  // #a&lt;br /&gt;    return NULL;&lt;br /&gt;  localBot--;&lt;br /&gt;  bot = localBot;  // #c&lt;br /&gt;  thr = deq[localBot];&lt;br /&gt;  oldAge = age;&lt;br /&gt;  if (localBot &amp;gt; oldAge.top)  // #b&lt;br /&gt;    return thr;&lt;br /&gt;  bot = 0;&lt;br /&gt;  newAge.top = 0;&lt;br /&gt;  newAge.tag = oldAge.tag + 1;&lt;br /&gt;  if (localBot == oldAge.top) {&lt;br /&gt;    cas(age, oldAge, newAge);&lt;br /&gt;    if (oldAge == newAge)&lt;br /&gt;      return thr;&lt;br /&gt;  }&lt;br /&gt;  age = newAge;&lt;br /&gt;  return NULL;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;The deque is empty when either bot is 0 [#a] or if the bottom meets the top [#b]. There is a race condition between the owner and thief. Suppose at the beginning, &lt;code&gt;bot == oldAge.top + 2&lt;/code&gt;&amp;nbsp;(this is necessary for the conditon at [#b] to hold). The owner got momentarily preempted by the operating system right before [#c], and meanwhile two thieves come along and both succeed. The owner wakes up and happily returns the "thr" value that the last thief already took away. This causes a task to be scheduled twice.&lt;br /&gt;&lt;br /&gt;Another peculiar fact about the deque is that, suppose we impose an upper bound for bot so that &lt;code&gt;pushBottom()&lt;/code&gt; will not go out of bound. The deque might contain far fewer items than its capacity allows, if both bot and top are very close to the upper bound but the deque is not empty. This means that the capacity of deque is only reclaimed when the deque is completely empty. Again, not a very good design in practice.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-3521294083917071134?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2012/08/a-critique-of-non-blocking-deque-due-to.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-6595046760456618075</guid><pubDate>Thu, 19 Jul 2012 00:38:00 +0000</pubDate><atom:updated>2012-07-19T00:16:37.637-04:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>c</category><category domain='http://www.blogger.com/atom/ns#'>system</category><title>Contiki protothreads</title><description>I just want to make a note for myself about &lt;a href="http://dunkels.com/adam/pt/"&gt;Protothreads&lt;/a&gt; in &lt;a href="http://www.contiki-os.org/"&gt;Contiki operating system&lt;/a&gt;, which is an operating system for devices that are extremely memory constrained. Here are some &lt;a href="http://dunkels.com/adam/pt/examples.html"&gt;examples&lt;/a&gt; of protothreads.&lt;br /&gt;&lt;br /&gt;The protothreads implementation can be found in &lt;a href="http://contiki.git.sourceforge.net/git/gitweb.cgi?p=contiki/contiki;a=blob;f=core/sys/pt.h;hb=HEAD"&gt;core/sys/pt.h&lt;/a&gt;. A protothread is a function that returns a char indicating its state. The states are PT_WAITING, PT_YIELDED, PT_EXITED, and PT_ENDED. Each operation that causes the thread to block actually makes the function return, so the values of local variables are not preserved.&lt;br /&gt;&lt;br /&gt;The resume execution of a protothread is based on “local continuation” which has two implementations. One uses the switch statement to create a &lt;a href="http://en.wikipedia.org/wiki/Duff's_device"&gt;Duff's device&lt;/a&gt;&amp;nbsp;(see &lt;a href="http://contiki.git.sourceforge.net/git/gitweb.cgi?p=contiki/contiki;a=blob;f=core/sys/lc-switch.h;hb=HEAD"&gt;core/sys/lc-switch.h&lt;/a&gt;), and another one based on a &lt;a href="http://gcc.gnu.org/onlinedocs/gcc/Labels-as-Values.html"&gt;GCC __label__ extension&lt;/a&gt; (see &lt;a href="http://contiki.git.sourceforge.net/git/gitweb.cgi?p=contiki/contiki;a=blob;f=core/sys/lc-addrlabels.h;hb=HEAD"&gt;core/sys/lc-addrlabels.h&lt;/a&gt;).&lt;br /&gt;&lt;br /&gt;Despite the simplicity of the implementation, here are limitations of protothreads:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Local variables are in undefined state after context switching, so they must be used extremely carefully. Most examples will let the thread take an external “context” struct argument and store state there.&lt;/li&gt;&lt;li&gt;Context switching can only happen inside the main protothread routine but not in sub-function calls. This limitation is very similar to Cilk (not surprising because Cilk is a compiler that generates code very similar to that of protothread).&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;I think that &lt;a href="http://lifecs.likai.org/2010/11/continuation-passing-style-calling.html"&gt;continuation passing style&lt;/a&gt; is the answer. And it looks like &lt;a href="http://www.pps.univ-paris-diderot.fr/~kerneis/software/cpc/"&gt;someone else agrees&lt;/a&gt;.&lt;/div&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-6595046760456618075?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2012/07/contiki-protothreads.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-7521232665915983004</guid><pubDate>Sun, 01 Jul 2012 02:25:00 +0000</pubDate><atom:updated>2012-07-18T20:38:45.456-04:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>theory</category><title>Minimal unsatisfiable 3-SAT example</title><description>The 3-SAT problem defined here is a stricter version than elsewhere, in the sense that each clause must contain exactly three literals. Some versions permit 1 or 2 literals.&lt;div&gt;&lt;span style="background-color: white;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: white;"&gt;To obtain a minimal unsatisfiable 3-SAT example, we start with a two-clause contradiction representing \( u_1 \wedge \neg u_1 \) as the base case. This base case is not 3-SAT. We then grow the clause as follows: suppose \( C_{i-1} \) containing \( i-1 \) variables is unsatisfiable, then let \( C_i = \left\{ c \vee u_i, c \vee \neg u_i \mid c \in C_{i-1} \right\} \), and \( C_i \) is also unsatisfiable.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: white;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;To carry out the algorithm, we start with the base case.&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;\( u_1 \)&lt;/li&gt;&lt;li&gt;\( \neg u_1 \)&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Then we add another variable to each clause:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;For \( u_1 \):&lt;/li&gt;&lt;ul&gt;&lt;li&gt;\( u_1 \vee u_2 \)&lt;/li&gt;&lt;li&gt;\( u_1 \vee \neg u_2 \)&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;For \( \neg u_1 \):&lt;/li&gt;&lt;ul&gt;&lt;li&gt;\( \neg u_1 \vee u_2 \)&lt;/li&gt;&lt;li&gt;\( \neg u_1 \vee \neg u_2 \)&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;Then we add another variable to each clause:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;For \( u_1 \vee u_2 \)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;\( u_1 \vee u_2 \vee u_3 \)&lt;/li&gt;&lt;li&gt;\( u_1 \vee u_2 \vee \neg u_3 \)&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;For&amp;nbsp;\( u_1 \vee \neg u_2 \)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;\( u_1 \vee \neg u_2 \vee u_3 \)&lt;/li&gt;&lt;li&gt;\( u_1 \vee \neg u_2 \vee \neg u_3 \)&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;For &amp;nbsp;\(&amp;nbsp;\neg&amp;nbsp;u_1&amp;nbsp;\vee u_2 \)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;\( \neg&amp;nbsp;u_1&amp;nbsp;\vee u_2 \vee u_3 \)&lt;/li&gt;&lt;li&gt;\( \neg&amp;nbsp;u_1&amp;nbsp;\vee u_2 \vee \neg u_3 \)&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;For&amp;nbsp;\(&amp;nbsp;\neg&amp;nbsp;u_1&amp;nbsp;\vee \neg u_2 \)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;\( \neg&amp;nbsp;u_1&amp;nbsp;\vee \neg u_2 \vee u_3 \)&lt;/li&gt;&lt;li&gt;\( \neg&amp;nbsp;u_1&amp;nbsp;\vee \neg u_2 \vee \neg u_3 \)&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;And here we have an unsatisfiable 3SAT example with 3 variables and 8 clauses.&lt;/div&gt;&lt;/div&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-7521232665915983004?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2012/06/minimal-unsatisfiable-3-sat-example.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-3329942263058896782</guid><pubDate>Thu, 28 Jun 2012 05:39:00 +0000</pubDate><atom:updated>2012-07-18T20:38:51.312-04:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>ideas</category><title>Oversized tablet</title><description>Presumably, one could put together a &lt;a href="http://www.planartouch.com/products/pt3285pw/"&gt;Planar 32" multi-touch monitor&lt;/a&gt;&amp;nbsp;(&lt;a href="http://www.planar.com/products/docs/cbu/current_manual/mn-Planar-PT3285PW-020-1170-00A.pdf"&gt;manual&lt;/a&gt;, &lt;a href="http://www.planar.com/reseller/pdfR/datasheets/ds-Planar-PT3285PW-datasheet.pdf"&gt;datasheet&lt;/a&gt;) mounted on one of the &lt;a href="http://www.displays2go.com/filteredcat.aspx?ID=22259&amp;amp;VESA-Size=400x200"&gt;VESA 400x200 monitor stands&lt;/a&gt; and hook the monitor up to one of the &lt;a href="http://developer.nvidia.com/tegra-hardware-sales-inquiries"&gt;NVIDIA development boards with TEGRA processor&lt;/a&gt;, such as the &lt;a href="http://www.presswire.com/pr/toradex/toradex210212.html"&gt;Toradex Colibri T30&lt;/a&gt; (announced but not available yet), install Android, and get a giant 32 inch tablet. Such system, along with some custom software, would make it a nice interactive kiosk either at a museum or at home for about $3000 material cost.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-3329942263058896782?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2012/06/oversized-tablet.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-3825047414750439384</guid><pubDate>Sat, 16 Jun 2012 06:27:00 +0000</pubDate><atom:updated>2012-07-18T20:38:58.031-04:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>howto</category><title>Building autotools from git</title><description>For developing GNU software, it is often needed to create the autoconf, automake, and libtool toolchain at the exact version specified, but it's not too hard to build them from source. In my case, I simply did: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;git clone&amp;nbsp;git://git.sv.gnu.org/autoconf.git&lt;/li&gt;&lt;li&gt;git clone&amp;nbsp;git://git.sv.gnu.org/automake.git&lt;/li&gt;&lt;li&gt;git clone&amp;nbsp;git://git.sv.gnu.org/libtool.git&lt;/li&gt;&lt;/ul&gt;And this will let me do a git checkout vN.NN to obtain the specific version of these tools. However, building them from upstream pristine source is different than building from tarball distribution. You will already need a recent version of these autotools to bootstrap the source's build system. Run: &lt;br /&gt;&lt;pre&gt;git clean -f -X&lt;/pre&gt;will restore the working tree to the pristine condition. &lt;br /&gt;&lt;br /&gt;To build autoconf from source: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;aclocal -I m4 &amp;amp;&amp;amp; automake --add-missing &amp;amp;&amp;amp; autoconf&lt;/li&gt;&lt;li&gt;rm INSTALL&lt;/li&gt;&lt;/ul&gt;The &lt;a href="http://lists.gnu.org/archive/html/autoconf/2005-10/msg00031.html"&gt;aclocal -I m4&lt;/a&gt; addresses the following issues: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;automake complains: &lt;pre&gt;Makefile.am:40: MAKE_CASE_SENSITIVE does not appear in AM_CONDITIONAL&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;autoconf complains: &lt;pre&gt;configure.ac:116: error: possibly undefined macro: AC_PROG_GNU_M4&lt;br /&gt;      If this token and others are legitimate, please use m4_pattern_allow.&lt;br /&gt;      See the Autoconf documentation.&lt;br /&gt;configure.ac:184: error: possibly undefined macro: AC_PROG_MAKE_CASE_SENSITIVE&lt;br /&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;The rm INSTALL addresses the following issue during make, caused by build-aux/missing wanting to overwriting a symlink created by &lt;code&gt;automake --add-missing&lt;/code&gt; before, pointing to a system INSTALL file (this would be pretty nasty if you ran make as the same user that installed the automake you used for bootstrapping autoconf, since you would never notice the overwriting). &lt;br /&gt;&lt;pre&gt;Making all in .&lt;br /&gt;/bin/sh &lt;em&gt;something&lt;/em&gt;/autoconf/build-aux/missing --run makeinfo --no-headers --no-validate --no-split  --plaintext -o &lt;em&gt;something&lt;/em&gt;/autoconf/INSTALL \&lt;br /&gt;   &lt;em&gt;something&lt;/em&gt;/autoconf/doc/install.texi&lt;br /&gt;&lt;em&gt;something&lt;/em&gt;/autoconf/INSTALL: Permission denied&lt;br /&gt;&lt;/pre&gt;Here are the specific versions of these autotools I needed for binutils: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;autoconf v2.64, automake v1.11.1&lt;/li&gt;&lt;/ul&gt;In general, for the autoconf version, look for AC_PREREQ in configure.ac or configure.in; for the automake version, look for AM_AUTOMAKE_VERSION in aclocal.m4.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-3825047414750439384?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2012/06/building-autotools-from-git.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-539052717425177202</guid><pubDate>Sun, 10 Jun 2012 13:19:00 +0000</pubDate><atom:updated>2012-06-11T22:38:45.953-04:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>howto</category><title>Some notes for porting Fink packages to 10.7</title><description>For all .info file:&lt;br /&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Add 10.7 to Distribution as a comma separated list. &lt;pre&gt;Distribution: 10.4, 10.5, 10.6, 10.7&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Add x86_64 to Architecture &lt;pre&gt;Architecture: powerpc, i386, x86_64&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;If this is not done correctly, Fink would say "no package found for specification..." since the .info files are filtered by distribution and architecture. On 10.7, the Intel architecture is x86_64.&lt;br /&gt;&lt;br /&gt;Specific to gcc43:&lt;/div&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Change all gmp dependencies to gmp5 (and get rid of &amp;gt;= version constraints).&lt;/li&gt;&lt;li&gt;Change all libmpfr1 dependencies to libmpfr4 (and get rid of &amp;gt;= version constraints).&lt;/li&gt;&lt;li&gt;Change ecj-latest.jar MD5 to&amp;nbsp;d7cd6a27c8801e66cbaa964a039ecfdb&lt;/li&gt;&lt;li&gt;Remove&amp;nbsp;&lt;code&gt;ln -s ... %i/bin/$binfile-4&lt;/code&gt;&amp;nbsp;and remove Conflicts and Replaces. There is no other reason why gcc 4.x cannot coexist.&lt;/li&gt;&lt;li&gt;Replace all traces of i686 with %m. Optionally change --with-tune=generic to --with-tune=core2.&lt;/li&gt;&lt;li&gt;To workaround build&amp;nbsp;failure “error: redefinition of a 'extern inline'&amp;nbsp;function 'xxx' is not supported in C99 mode.” Per &lt;a href="http://clang.llvm.org/get_started.html#driver"&gt;clang instruction&lt;/a&gt;, set &lt;code&gt;CC='gcc -std=gnu89'&lt;/code&gt; to workaround it. Another issue surfaced in the second stage is &lt;a href="http://forward-in-code.blogspot.com/2011/09/building-gcc.html"&gt;undefined symbol for architecture x86_64 '___builtin___stpncpy_chk'&lt;/a&gt; which is resolved by adding &lt;code&gt;-D_FORTIFY_SOURCE=0&lt;/code&gt; to &lt;code&gt;CFLAGS&lt;/code&gt;. &lt;pre&gt;SetCC: gcc -std=gnu89&lt;br /&gt;SetCFLAGS: -D_FORTIFY_SOURCE=0&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;To resolve &lt;a href="https://trac.macports.org/ticket/20816"&gt;ld: duplicate symbol _init_inline_once&lt;/a&gt; issue, remove redundant &lt;code&gt;tree-inline.o&lt;/code&gt; from &lt;code&gt;CXX_C_OBJS&lt;/code&gt; in &lt;code&gt;${SRCDIR}/gcc/cp/Make-lang.in&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Add &lt;code&gt;--enable-libgcj&lt;/code&gt; to the ConfigureParams. For some reason this flag is missing, and libgcj is not, but is expected, to be built.&lt;/li&gt;&lt;li&gt;Remove Type: -64bit and redundant references of the %lib expansion, particular those in the SplitOff.&lt;/li&gt;&lt;/ul&gt;The end.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-539052717425177202?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2012/06/some-notes-for-porting-fink-packages-to.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-106996833761287855</guid><pubDate>Wed, 06 Jun 2012 03:22:00 +0000</pubDate><atom:updated>2012-06-07T20:42:19.597-04:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>theory</category><title>Better upper bound for factorial?</title><description>Tonight I was puzzled by the question, if an algorithm \( \Pi \) has running time \( O(n!) \), does \( \Pi \) belong to EXPTIME? To rehash, EXPTIME contains all algorithms that has running time \( O(2^{n^k}) \). For brevity, I use the notation \( f(x) \prec g(x) \) to denote that \( f(x) \) grows slower than \( g(x) \). We know that \( 2^n \prec n! \prec n^n \) but I don't think I can show that \( n^n \) belongs to EXPTIME. I need a tighter bound.&lt;br /&gt;&lt;br /&gt;It turns out that \( n! \prec 2^{n^2} \).&lt;br /&gt;&lt;br /&gt;Proof.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The growth of \( n! \) is \( \frac{(n+1)!}{n!} = n+1 \).&lt;/li&gt;&lt;li&gt;The growth of \( 2^{n^2} = (2^n)^n \) is \[&lt;br /&gt;\begin{eqnarray}&lt;br /&gt;\frac{(2^{n+1})^{n+1}}{(2^n)^n}&lt;br /&gt;&amp;nbsp; &amp;amp; = &amp;amp;&amp;nbsp;\frac{(2 \cdot 2^n)^{n+1}}{(2^n)^n} \\&lt;br /&gt;&amp;nbsp; &amp;amp; = &amp;amp; \frac{(2 \cdot 2^n)^n \cdot (2 \cdot 2^n)}{(2^n)^n} \\&lt;br /&gt;&amp;nbsp; &amp;amp; = &amp;amp; \frac{2^n \cdot \cancel{(2^n)^n} \cdot (2 \cdot 2^n)}{\cancel{(2^n)^n}} \\&lt;br /&gt;&amp;nbsp; &amp;amp; = &amp;amp; 2 \cdot 2^{2n} = 2^{2n+1} \\&lt;br /&gt;\end{eqnarray}&lt;br /&gt;\]&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Since \( n+1 &amp;lt; 2^{2n+1} \) for all \( n \), therefore \( n! \prec 2^{n^2} \).&lt;/div&gt;&lt;div style="text-align: right;"&gt;\( \Box \)&lt;/div&gt;&lt;div style="text-align: left;"&gt;So it turns out that an \( O(n!) \) algorithm belongs to the class \( O(2^{n^k}) \) where \( k = 2 \), so such algorithm indeed belongs to EXPTIME.&lt;br /&gt;&lt;hr /&gt;Update (June 7, 2012): it turns out that showing \( n^n \) belongs to EXPTIME isn't that hard.&lt;br /&gt;&lt;br /&gt;The growth of \( n^n \) is \[&lt;br /&gt;\begin{eqnarray}&lt;br /&gt;\frac{(n+1)^{n+1}}{n^n}&lt;br /&gt;&amp;nbsp; &amp;amp; = &amp;amp; \frac{(n+1)^n (n+1)}{n^n} \\&lt;br /&gt;&amp;nbsp; &amp;amp; = &amp;amp; \left( \frac{n+1}{n} \right)^n (n+1) \\&lt;br /&gt;&amp;nbsp; &amp;amp; = &amp;amp; \left( 1 + \frac{1}{n} \right)^n (n + 1) \\&lt;br /&gt;&amp;nbsp; &amp;amp; \approx &amp;amp; (n+1)e \\&lt;br /&gt;\end{eqnarray}&lt;br /&gt;\]&lt;br /&gt;&lt;br /&gt;And that's because \( \lim_{n \to \infty} \left( 1 + \frac{1}{n} \right)^n = e \). &amp;nbsp;So \( n^n \) even grows slower than \( 2^{n^2} \).&lt;/div&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-106996833761287855?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2012/06/better-upper-bound-for-factorial.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-4156272182187812998</guid><pubDate>Sat, 19 May 2012 19:33:00 +0000</pubDate><atom:updated>2012-06-05T23:23:14.143-04:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>system</category><title>Locality profile of a disk drive</title><description>When I was an undergraduate, I had at least one professor who told his students that we're told lies in order to be told the truth. The lies are simplification of the truth so that we could understand the point the professor wants to get across.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In the case of disk performance, I've never been told the truth, and I never knew it until I found this paper, “&lt;a href="http://www2.cs.uh.edu/~paris/7360/PAPERS03/IEEEComputer.DiskModel.pdf"&gt;An introduction to disk drive modeling&lt;/a&gt;.”&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We were taught that seek time is the&amp;nbsp;dominant&amp;nbsp;factor of access latency, and that “average seek time” is proportional to 1/3 of the number of tracks. The truth is much more complicated.&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;A seek consists of four phases, speedup (accelerating the head), coast (head travels at constant velocity), slowdown (deceleration of the head), and settle (the head aligns itself to the track). The way &lt;a href="http://www.youtube.com/watch?v=tDacjrSCeq4"&gt;shouting causes access latency to spike&lt;/a&gt; is probably due to interfering in the settling phase.&lt;/li&gt;&lt;li&gt;There is more surface area towards the outer tracks than the inner tracks, and assuming that the disk is to have constant linear density in both x-y dimensions, the angular and radius differential will be non-linear. As thus, we could have either:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Constantly spaced tracks where inner tracks have fewer sectors and outer tracks have more sectors, or&lt;/li&gt;&lt;li&gt;Tracks with constant number of sectors, where inner tracks are further apart and outer tracks are closer, or&lt;/li&gt;&lt;li&gt;A hybrid model that is somewhere in between, depending on which geometry gives the better seek time.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;Also, most disk drives nowadays expose a linear addressed sector scheme as opposed to CHS (cylinder, head, sector) which is specific to disk geometry. The linear addressing hides away the complex geometry that is disk specific, and all we care about nowadays is the seek time profile from one linear addressed sector to the other sectors.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Quite interestingly, where as in the case of random accessed memory, temporal locality prevails spatial locality, it is the other way with disk drives. For random accessed memory, spatial locality at worst will cause n times performance degradation where n is the size of the cache line divided by the word size, a lack of temporal locality can often cause a total breakdown of the memory hierarchy. For disk access, the lack of temporal locality means that a group of n read/write operations that could previously be grouped together in one single seek sweep would have to be performed as different seeks back and forth, it is the lack of spatial locality of the on-disk data arrangement that causes the seek time to soar.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;As part of a disk-based filesystem design, it should allow files accessed together to belong to a (spatial) locality group.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;There are already databases that store columns into locality groups of columns, but that sort of locality group only affects the “virtual” linear address within a file, which by virtue of the filesystem may be fragmented&amp;nbsp;throughout the disk.&lt;/div&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-4156272182187812998?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2012/05/locality-profile-of-disk-drive.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-4234597149251766687</guid><pubDate>Sat, 21 Apr 2012 18:13:00 +0000</pubDate><atom:updated>2012-04-21T14:32:21.578-04:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>ideas</category><category domain='http://www.blogger.com/atom/ns#'>algorithm</category><category domain='http://www.blogger.com/atom/ns#'>system</category><title>Zero-Latency Computer Audio Effect Notes</title><description>When it comes to audio processing, it is believed that the human ear can detect at least 13ms of delay. In a computer audio setting, a large delay can be attributed to the underlying operating system. For example, it could be that the OS or driver does not handle interrupts (making input data available) fast enough, not scheduling threads to process the data soon enough, and making too many copies of audio data which delays the input as well as output. On Windows, the latency could be as high as 100ms. On Linux with preemptible and low-latency kernel, latency lower than 1ms is achievable. (These numbers are pulled from memory, and if any reader cares to point me to some latency measurement results—more recent the better—that would be very welcome).&lt;br /&gt;&lt;br /&gt;But beyond the operating system, computer audio latency is also limited by the sampling rate as well. For example, when recording stereo audio at 44100Hz with 16-bit samples, filling a 1024 byte buffer takes 6ms. A buffer size for sub-millisecond latency would need to be 128 bytes, which is about the size of a memory cache line. This translates to about 32 samples. A very small number for audio effects processing. For example, computing Fourier Transform on a block size this small is not very interesting. This means that in order to achieve zero-latency computer audio effect, the algorithm has to be designed as a stream of samples.&lt;br /&gt;&lt;br /&gt;Here I'm just noting two algorithms that are streamable: low-pass and high-pass filters. Both algorithms have a “discrete-time realization” (taken from Wikipedia) as follows:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Low-pass filter: \[ y_i = \alpha x_i + (1 - \alpha) y_{i-1} \qquad \text{where} \qquad \alpha \triangleq \frac{\Delta_T}{RC + \Delta_T} \]&lt;/li&gt;&lt;li&gt;High-pass filter: \[ y_i = \alpha y_{i-1} + \alpha (x_{i} - x_{i-1}) \qquad \text{where} \qquad \alpha \triangleq \frac{RC}{RC + \Delta_T} \]&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;In both cases, the cutoff frequency is \( f_c = \frac{1}{2\pi RC} \), and \( \Delta_T \) is the duration of time between samples (the reciprocal of the sampling rate).&lt;/div&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-4234597149251766687?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2012/04/zero-latency-computer-audio-effect.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-1548497000187542191</guid><pubDate>Sat, 14 Apr 2012 04:27:00 +0000</pubDate><atom:updated>2012-06-01T00:33:09.063-04:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>ideas</category><category domain='http://www.blogger.com/atom/ns#'>system</category><category domain='http://www.blogger.com/atom/ns#'>language</category><category domain='http://www.blogger.com/atom/ns#'>abstraction</category><title>A proposal for remote procedure call IDL</title><description>This evening I decided to give some thought about a good RPC design, with a simple semantics and efficient wire format. There is a lot of prior art, e.g. SUN RPC, SMB, CORBA, SOAP, XMLRPC, and I don't want to go into the detail of any one of them. The XML based wire format is not efficient. The ASN.1 or XDR based wire format are fine, but JSON is simpler. It also has an efficient wire format called &lt;a href="http://msgpack.org/"&gt;MessagePack&lt;/a&gt;. However, the RPC specification that came with MessagePack isn't satisfactory. One prominent missing feature is the streaming RPC. Its IDL is also tied to the underlying data representation. What I'm looking for is a simply typed way to describe a JSON value. The overall RPC semantics should be like simply-typed JavaScript.&lt;br /&gt;&lt;br /&gt;Here is an informal proposal for the type of a simply-typed JSON value.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;key-type := &lt;b&gt;number&lt;/b&gt; | &lt;b&gt;boolean&lt;/b&gt; | &lt;b&gt;string&lt;/b&gt; | enum-type&lt;br /&gt;key := number-value | boolean-value | string-value | enum-value&lt;br /&gt;opt-key := key | &lt;b&gt;optional&lt;/b&gt; key&lt;br /&gt;&lt;br /&gt;type := key-type | &lt;b&gt;object&lt;/b&gt;&lt;br /&gt;      | &lt;b&gt;[&lt;/b&gt;type&lt;b&gt;]&lt;/b&gt;   // array&lt;br /&gt;      | &lt;b&gt;(&lt;/b&gt;type&lt;sub&gt;1&lt;/sub&gt;&lt;b&gt;,&lt;/b&gt; type&lt;sub&gt;2&lt;/sub&gt;&lt;b&gt;,&lt;/b&gt; ..., type&lt;sub&gt;n&lt;/sub&gt;&lt;b&gt;)&lt;/b&gt;   // tuple&lt;br /&gt;      |    // associative map&lt;br /&gt;        &lt;b&gt;{&lt;/b&gt;opt-key&lt;sub&gt;1&lt;/sub&gt;&lt;b&gt;:&lt;/b&gt; type&lt;sub&gt;1&lt;/sub&gt;&lt;b&gt;,&lt;/b&gt; opt-key&lt;sub&gt;2&lt;/sub&gt;&lt;b&gt;:&lt;/b&gt; type&lt;sub&gt;2&lt;/sub&gt;&lt;b&gt;,&lt;/b&gt; ..., opt-key&lt;sub&gt;n&lt;/sub&gt;&lt;b&gt;:&lt;/b&gt; type&lt;sub&gt;n&lt;/sub&gt;&lt;b&gt;}&lt;/b&gt;&lt;br /&gt;      | &lt;b&gt;nullable&lt;/b&gt; type&lt;/pre&gt;&lt;br /&gt;The type describes a JSON object. It can be:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;One of the primitive types "number," "boolean," or "string," or it could be simply "object" for any JSON object without more refined type description.&lt;/li&gt;&lt;li&gt;The array syntax is for describing an array where all items are of the same type.&lt;/li&gt;&lt;li&gt;The tuple is for describing a sequence of objects of various types, even though in JSON it would be represented as an array as well.&lt;/li&gt;&lt;li&gt;The associative map is a key-value mapping from a concrete value of the key to a type. This is the refined description of a complex JSON object. The concrete key values can be a number, a boolean, or a string. The key values can be optionally prefixed by "optional" to indicate that the key could be missing.&lt;/li&gt;&lt;li&gt;A type with the "nullable" qualifier which indicates that the value could be null.&lt;/li&gt;&lt;/ul&gt;Furthermore, for the ease of defining constants or symbolic names of associative map, we allow the user to define enums which map a symbolic name to a number. The enum type's name could be used wherever a type is expected, and the enum symbols could be used whenever a key is expected.&lt;br /&gt;&lt;br /&gt;An interface is a collection of function calls with the signature:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;type&lt;sub&gt;arg&lt;/sub&gt; &lt;b&gt;-&amp;gt;&lt;/b&gt; type&lt;sub&gt;ret&lt;/sub&gt; &lt;strike&gt;&lt;b&gt;throws&lt;/b&gt; type&lt;sub&gt;1&lt;/sub&gt;, type&lt;sub&gt;2&lt;/sub&gt;, ..., type&lt;sub&gt;n&lt;/sub&gt;&lt;/strike&gt;&lt;/pre&gt;&lt;br /&gt;where type&lt;sub&gt;arg&lt;/sub&gt;&amp;nbsp;is the type of the function argument, type&lt;sub&gt;ret&lt;/sub&gt; is the type of the return value, and the list of types after "throws" are the exception types that could be raised by the function.&lt;br /&gt;&lt;br /&gt;What is unique about this proposal is the unified treatment of bidirectional and streaming RPC. Typically, streaming RPC is a way for the server to send data in multiple responses, asynchronously back to the client. Client can always stream data to the server by making a call to server as many times as necessary. Here the streaming RPC is generalized to the concept of a co-interface. Whenever server needs to make a part of the response available, it would invoke one of the functions in the co-interface. A co-interface is supposed to be implemented by the client for receiving calls from the server, in order to connect to the server. Hence, the complete service description consists of a server-side interface and a client-side co-interface, which is how bidirectional RPC can be made.&lt;br /&gt;&lt;hr /&gt;Update: June 1, 2012. I've decided to get rid of exception (throw) and instead use cointerface for signaling alternative continuation.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-1548497000187542191?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2012/04/proposal-for-remote-procedure-call-idl.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-4675414996874963044</guid><pubDate>Mon, 19 Mar 2012 00:47:00 +0000</pubDate><atom:updated>2012-03-18T20:47:12.111-04:00</atom:updated><title>The real problem with search engine optimization... or the web?</title><description>This evening, I read a news that Google is Planning to Penalize Overly Optimized Sites, and I found it through Slashdot. What really interests me is that the way I found the news is an illustration of a search engine optimization problem itself. It turns out the real "beef" of the news behind the links is 5 degrees to the secondary source and 2 more degrees to the primary source. Each time the story is linked, another person either adds a little bit more insight or just summarizes the linked successor slightly differently without much value added.&lt;br /&gt;&lt;br /&gt;Here is the link structure of the story.&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;slashdot.org&amp;nbsp;&lt;a href="http://tech.slashdot.org/story/12/03/18/1831231/google-is-planning-to-penalize-overly-optimized-sites"&gt;Google is Planning to Penalize Overly Optimized Sites&lt;/a&gt;&amp;nbsp;by &lt;a href="http://www.tekgoblin.com/authors/"&gt;tekgoblin&lt;/a&gt; to promite their own website, which links to:&lt;/li&gt;&lt;li&gt;tekgoblin.com &lt;a href="http://www.tekgoblin.com/2012/03/18/google-is-planning-to-penalize-overly-optimized-sites/"&gt;Google is Planning to Penalize Overly Optimized Sites&lt;/a&gt;&amp;nbsp;by &lt;a href="http://www.tekgoblin.com/author/tekgoblin/"&gt;SANITY&lt;/a&gt;, which links to:&lt;/li&gt;&lt;li&gt;news.cnet.com &lt;a href="http://news.cnet.com/8301-1023_3-57399425-93/google-plans-to-penalize-overly-optimized-sites/?part=rss&amp;amp;subj=news&amp;amp;tag=title"&gt;Google plans to penalize 'overly optimized' sites&lt;/a&gt;&amp;nbsp;by &lt;a href="http://www.cnet.com/profile/edward_moyer/"&gt;Edward Moyer&lt;/a&gt;, which links to:&lt;/li&gt;&lt;li&gt;searchengineland.com &lt;a href="http://searchengineland.com/too-much-seo-google%E2%80%99s-working-on-an-%E2%80%9Cover-optimization%E2%80%9D-penalty-for-that-115627"&gt;Too Much SEO? Google's Working On An "Over-Optimization" Penalty For That&lt;/a&gt;&amp;nbsp;by &lt;a href="http://searchengineland.com/author/barry-schwartz"&gt;Berry Schwartz&lt;/a&gt;, which is a self-plagiarism that links to:&lt;/li&gt;&lt;li&gt;seroundtable.com &lt;a href="http://www.seroundtable.com/google-over-seo-update-14887.html"&gt;Cutts: Google To Target Overly SEO'ed Sites Within Weeks&lt;/a&gt;&amp;nbsp;by &lt;a href="http://www.seroundtable.com/author/barry-schwartz/2.html"&gt;Berry Schwartz&lt;/a&gt; which is a secondary source of the relevant information, citing its primary source from:&lt;/li&gt;&lt;li&gt;seroundtable.com &lt;a href="http://www.seroundtable.com/sxsw-cutts-forrester-sullivan-audio-14885.html"&gt;Audio From SXSW Google's Cutts, Bing's Forrester &amp;amp; SEL's Sullivan&lt;/a&gt;&amp;nbsp;by the same author, which cites its primary source from:&lt;/li&gt;&lt;li&gt;sxsw.com &lt;a href="http://schedule.sxsw.com/2012/events/event_IAP11742"&gt;Dear Google &amp;amp; Bing: Help Me Rank Better!&lt;/a&gt;&amp;nbsp;which contains the primary source audio clip with statement from Matt Cutts.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;The distinction between primary source and secondary source is made that secondary source creates new insight from the primary source, but the primary source is just a recording of facts without any insight. In this case, the primary source included an audio recording of a panel discussion, and the secondary source highlighted pieces of it with its own interpretation.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Note that CNET also posts the link to the primary source on sxsw.com, but without context that it is the primary source.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I think this particular example of the search engine optimization story illustrates the problem very well. In primary school, you were taught that every reference is either a primary source or a secondary source, but the reality is always more complicated. Some secondary sources are primary sources in some aspect, and&amp;nbsp;tertiary&amp;nbsp;sources can still add value (or you can argue that the third category is also a secondary source). The web makes it much more easier to link, and now people also have financial incentive---the more they get cited, the more ads they can show, and that gives them a profit. They can do that without generating any original content, or they can add a little value by adding their own interpretation. The ads revenue they generate, on the other hand, depends on how much effort they put in promoting their post, so that other people will want to link to them.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Let's put the financial motive aside and assume that people will always link without ads revenue. If a person can get away showing tons of ads but actually adds tons of value to some topic, then why penalize him?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The issue is that getting to the "beef" of the story is still a graph search problem. The search engine (e.g. Google Bot) supposedly has all the link graph information, but it does not understand the distinction between primary and secondary sources, and it's up to the reader to investigate by spending time and effort. With the amount of information exploding each day, we really need a search engine that will do better. If it's too much to ask a search engine to understand the difference between primary and secondary sources, I think it is at least plausible to have a tool to highlight the contribution of each page with regard to a particular aspect or topic---like a "diff" tool with fuzzy syntactic matching.&lt;/div&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-4675414996874963044?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2012/03/real-problem-with-search-engine.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>1</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-7548011873715159756</guid><pubDate>Sat, 10 Mar 2012 04:49:00 +0000</pubDate><atom:updated>2012-03-09T23:49:39.469-05:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>theory</category><category domain='http://www.blogger.com/atom/ns#'>algorithm</category><category domain='http://www.blogger.com/atom/ns#'>system</category><title>The Tower Hotel Problem</title><description>Dynamic storage allocation problem, both as an online problem and an offline problem, is widely studied in literature, such as this &lt;a href="http://www.springerlink.com/content/f8831143n05uv686/"&gt;article&lt;/a&gt; by Jordan Gergov. Here I present a similar problem which I call "The Tower Hotel Problem."&lt;br /&gt;&lt;br /&gt;The Tower Hotel is peculiar. It has an infinite number of floors, but each floor has the same fixed number of rooms. The proprietor wanted to keep the number of floors open to the public minimal in order to save costs on maintenance; a closed floor incurs no cost. A floor is closed if none of the rooms are occupied. But as long as there is at least one occupied room, the floor must be open to public. Once a guest arrives and settles in a room, the proprietor must not ask the guest to move to another room.&lt;br /&gt;&lt;br /&gt;In a zealous attempt to minimize cost, the proprietor requires all guests to make reservations before the year begins. The guest would indicate upon reservation the arrival and departure dates. Once the year begins, no more reservation can be made. The proprietor then optimizes the placement of guests on floors. This eccentric policy may be one reason the hotel is not very well known.&lt;br /&gt;&lt;br /&gt;A number of years passed, and the proprietor passed away. His son knows nothing about hotel management, so the son interviewed three potential managers. In order to make the hotel more popular, the son required that the managers must not assume the reservations are made in advance. In fact, he went a step further and said that a guest could arrive at any time and leave at any time.&lt;br /&gt;&lt;br /&gt;Each manager had a different strategy. The first manager would place the guest at random on any of the opened floors with vacancy (and open up a new floor if none of the existing floors are available). The second manager would place the guest on the floor with the most number of occupied rooms (but still has vacancy). The third manager would place the guest on the lowest numbered floor with vacancy. The third manager has an assistant who, due to her desire to be promoted, secretly proposes to the proprietor's son a slightly different strategy than her manager: she would locate the lowest numbered floors with vacancy, fill it entirely first, then find again the lowest numbered floors with vacancy, which may be lower than the previously chosen floor because some guests below may have checked out.&lt;br /&gt;&lt;br /&gt;How does the proprietor's son determine which manager has the most cost-effective strategy? How do these managers and the third manager's assistant compare with what the proprietor could do, when the proprietor had full knowledge of all the reservations in the whole year?&lt;br /&gt;&lt;hr /&gt;This problem describes segregate fits dynamic storage allocation with virtual memory where all objects are of the same size, and a memory page could fit a fixed number of these objects. A virtual memory page has to be backed by a physical memory page if there is at least one object in the page. Once all objects in the page are freed, the physical memory page backing can be removed. This presents a different sort of fragmentation problem where certain long-lived objects can pin a memory page even though the page is mostly unused.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-7548011873715159756?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2012/03/tower-hotel-problem.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-2312351473058742581</guid><pubDate>Sun, 04 Dec 2011 23:52:00 +0000</pubDate><atom:updated>2012-09-03T09:47:37.493-04:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>theory</category><category domain='http://www.blogger.com/atom/ns#'>algorithm</category><title>Evaluating RC4 as pseudo-random number generator</title><description>&lt;blockquote style="border: 1px solid red; padding: 1ex;"&gt;Update (September 3, 2012): I made some mistakes in my own implementation of RC4. An analysis of the mistake is documented in&amp;nbsp;&lt;a href="http://lifecs.likai.org/2012/09/mistake-in-my-rc4-implementation.html"&gt;Mistake in my RC4 implementation&lt;/a&gt;. After fixing the mistake, I do not see the skewed distribution shown here. Please be advised that none of the blog posts in this blog are peer reviewed, and mistakes happen.&lt;/blockquote&gt;On the quest to look for a pseudo-random number generator that is easy to implement, I gave up on Mersenne Twister but took Wikipedia's advice that a stream cipher can be used for generating pseudo-random sequences. But it also mentions that &lt;a href="http://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator"&gt;RC4 is not a particularly uniform stream cipher&lt;/a&gt; which makes statistical attacks possible.  Because of the simplicity of RC4, I decided to implement it and see really how bad it is. Since RC4 outputs a stream of bytes, I took the histogram of the byte value.  The initialization key is the integer value of a stack-allocated object pointer, repeated for 64 bytes, and it's run on a 64-bit machine.  I'm not sure if the fact that the key is highly regular has anything to do with the following non-uniform result that I observed.&lt;br /&gt;&lt;div style="height: 15em; overflow: scroll; width: 100%;"&gt;&lt;table border="1" cellspacing="0"&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;count&lt;/td&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;count&lt;/td&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;count&lt;/td&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;count&lt;/td&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;count&lt;/td&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;count&lt;/td&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;count&lt;/td&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;count&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #f4cccc;"&gt;5499938&lt;/span&gt;&lt;/td&gt; &lt;td&gt;32&lt;/td&gt;&lt;td&gt;50376&lt;/td&gt; &lt;td&gt;64&lt;/td&gt;&lt;td&gt;81740&lt;/td&gt; &lt;td&gt;96&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;253697&lt;/span&gt;&lt;/td&gt; &lt;td&gt;128&lt;/td&gt;&lt;td&gt;50004&lt;/td&gt; &lt;td&gt;160&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;144433&lt;/span&gt;&lt;/td&gt; &lt;td&gt;192&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;147856&lt;/span&gt;&lt;/td&gt; &lt;td&gt;224&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;147031&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;134854&lt;/span&gt;&lt;/td&gt; &lt;td&gt;33&lt;/td&gt;&lt;td&gt;50103&lt;/td&gt; &lt;td&gt;65&lt;/td&gt;&lt;td&gt;50386&lt;/td&gt; &lt;td&gt;97&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #d9ead3;"&gt;115718&lt;/span&gt;&lt;/td&gt; &lt;td&gt;129&lt;/td&gt;&lt;td&gt;50024&lt;/td&gt; &lt;td&gt;161&lt;/td&gt;&lt;td&gt;49930&lt;/td&gt; &lt;td&gt;193&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;149593&lt;/span&gt;&lt;/td&gt; &lt;td&gt;225&lt;/td&gt;&lt;td&gt;50260&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;50352&lt;/td&gt; &lt;td&gt;34&lt;/td&gt;&lt;td&gt;50179&lt;/td&gt; &lt;td&gt;66&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #f4cccc;"&gt;954060&lt;/span&gt;&lt;/td&gt; &lt;td&gt;98&lt;/td&gt;&lt;td&gt;50362&lt;/td&gt; &lt;td&gt;130&lt;/td&gt;&lt;td&gt;50185&lt;/td&gt; &lt;td&gt;162&lt;/td&gt;&lt;td&gt;50553&lt;/td&gt; &lt;td&gt;194&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;134910&lt;/span&gt;&lt;/td&gt; &lt;td&gt;226&lt;/td&gt;&lt;td&gt;78249&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #d9ead3;"&gt;115332&lt;/span&gt;&lt;/td&gt; &lt;td&gt;35&lt;/td&gt;&lt;td&gt;50006&lt;/td&gt; &lt;td&gt;67&lt;/td&gt;&lt;td&gt;50091&lt;/td&gt; &lt;td&gt;99&lt;/td&gt;&lt;td&gt;50170&lt;/td&gt; &lt;td&gt;131&lt;/td&gt;&lt;td&gt;50543&lt;/td&gt; &lt;td&gt;163&lt;/td&gt;&lt;td&gt;50289&lt;/td&gt; &lt;td&gt;195&lt;/td&gt;&lt;td&gt;50516&lt;/td&gt; &lt;td&gt;227&lt;/td&gt;&lt;td&gt;49853&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;50214&lt;/td&gt; &lt;td&gt;36&lt;/td&gt;&lt;td&gt;50065&lt;/td&gt; &lt;td&gt;68&lt;/td&gt;&lt;td&gt;50256&lt;/td&gt; &lt;td&gt;100&lt;/td&gt;&lt;td&gt;50052&lt;/td&gt; &lt;td&gt;132&lt;/td&gt;&lt;td&gt;50288&lt;/td&gt; &lt;td&gt;164&lt;/td&gt;&lt;td&gt;49950&lt;/td&gt; &lt;td&gt;196&lt;/td&gt;&lt;td&gt;50532&lt;/td&gt; &lt;td&gt;228&lt;/td&gt;&lt;td&gt;50303&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;50089&lt;/td&gt; &lt;td&gt;37&lt;/td&gt;&lt;td&gt;50589&lt;/td&gt; &lt;td&gt;69&lt;/td&gt;&lt;td&gt;50173&lt;/td&gt; &lt;td&gt;101&lt;/td&gt;&lt;td&gt;50118&lt;/td&gt; &lt;td&gt;133&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;143783&lt;/span&gt;&lt;/td&gt; &lt;td&gt;165&lt;/td&gt;&lt;td&gt;49753&lt;/td&gt; &lt;td&gt;197&lt;/td&gt;&lt;td&gt;50182&lt;/td&gt; &lt;td&gt;229&lt;/td&gt;&lt;td&gt;50135&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;207241&lt;/span&gt;&lt;/td&gt; &lt;td&gt;38&lt;/td&gt;&lt;td&gt;49946&lt;/td&gt; &lt;td&gt;70&lt;/td&gt;&lt;td&gt;50416&lt;/td&gt; &lt;td&gt;102&lt;/td&gt;&lt;td&gt;50395&lt;/td&gt; &lt;td&gt;134&lt;/td&gt;&lt;td&gt;50447&lt;/td&gt; &lt;td&gt;166&lt;/td&gt;&lt;td&gt;50270&lt;/td&gt; &lt;td&gt;198&lt;/td&gt;&lt;td&gt;50145&lt;/td&gt; &lt;td&gt;230&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;134634&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;68820&lt;/td&gt; &lt;td&gt;39&lt;/td&gt;&lt;td&gt;50147&lt;/td&gt; &lt;td&gt;71&lt;/td&gt;&lt;td&gt;49985&lt;/td&gt; &lt;td&gt;103&lt;/td&gt;&lt;td&gt;49774&lt;/td&gt; &lt;td&gt;135&lt;/td&gt;&lt;td&gt;50252&lt;/td&gt; &lt;td&gt;167&lt;/td&gt;&lt;td&gt;50502&lt;/td&gt; &lt;td&gt;199&lt;/td&gt;&lt;td&gt;49368&lt;/td&gt; &lt;td&gt;231&lt;/td&gt;&lt;td&gt;49987&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;50212&lt;/td&gt; &lt;td&gt;40&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #d9ead3;"&gt;103906&lt;/span&gt;&lt;/td&gt; &lt;td&gt;72&lt;/td&gt;&lt;td&gt;49950&lt;/td&gt; &lt;td&gt;104&lt;/td&gt;&lt;td&gt;50501&lt;/td&gt; &lt;td&gt;136&lt;/td&gt;&lt;td&gt;49803&lt;/td&gt; &lt;td&gt;168&lt;/td&gt;&lt;td&gt;50038&lt;/td&gt; &lt;td&gt;200&lt;/td&gt;&lt;td&gt;50032&lt;/td&gt; &lt;td&gt;232&lt;/td&gt;&lt;td&gt;50486&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;695154&lt;/td&gt; &lt;td&gt;41&lt;/td&gt;&lt;td&gt;49905&lt;/td&gt; &lt;td&gt;73&lt;/td&gt;&lt;td&gt;50137&lt;/td&gt; &lt;td&gt;105&lt;/td&gt;&lt;td&gt;50389&lt;/td&gt; &lt;td&gt;137&lt;/td&gt;&lt;td&gt;50085&lt;/td&gt; &lt;td&gt;169&lt;/td&gt;&lt;td&gt;50619&lt;/td&gt; &lt;td&gt;201&lt;/td&gt;&lt;td&gt;66006&lt;/td&gt; &lt;td&gt;233&lt;/td&gt;&lt;td&gt;49849&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;50439&lt;/td&gt; &lt;td&gt;42&lt;/td&gt;&lt;td&gt;49865&lt;/td&gt; &lt;td&gt;74&lt;/td&gt;&lt;td&gt;50472&lt;/td&gt; &lt;td&gt;106&lt;/td&gt;&lt;td&gt;50284&lt;/td&gt; &lt;td&gt;138&lt;/td&gt;&lt;td&gt;49508&lt;/td&gt; &lt;td&gt;170&lt;/td&gt;&lt;td&gt;50045&lt;/td&gt; &lt;td&gt;202&lt;/td&gt;&lt;td&gt;50336&lt;/td&gt; &lt;td&gt;234&lt;/td&gt;&lt;td&gt;50083&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;49682&lt;/td&gt; &lt;td&gt;43&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #f4cccc;"&gt;948555&lt;/span&gt;&lt;/td&gt; &lt;td&gt;75&lt;/td&gt;&lt;td&gt;50141&lt;/td&gt; &lt;td&gt;107&lt;/td&gt;&lt;td&gt;50230&lt;/td&gt; &lt;td&gt;139&lt;/td&gt;&lt;td&gt;50294&lt;/td&gt; &lt;td&gt;171&lt;/td&gt;&lt;td&gt;50719&lt;/td&gt; &lt;td&gt;203&lt;/td&gt;&lt;td&gt;50300&lt;/td&gt; &lt;td&gt;235&lt;/td&gt;&lt;td&gt;50267&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;50378&lt;/td&gt; &lt;td&gt;44&lt;/td&gt;&lt;td&gt;49965&lt;/td&gt; &lt;td&gt;76&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;140698&lt;/span&gt;&lt;/td&gt; &lt;td&gt;108&lt;/td&gt;&lt;td&gt;50119&lt;/td&gt; &lt;td&gt;140&lt;/td&gt;&lt;td&gt;49772&lt;/td&gt; &lt;td&gt;172&lt;/td&gt;&lt;td&gt;50399&lt;/td&gt; &lt;td&gt;204&lt;/td&gt;&lt;td&gt;49963&lt;/td&gt; &lt;td&gt;236&lt;/td&gt;&lt;td&gt;50117&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;50466&lt;/td&gt; &lt;td&gt;45&lt;/td&gt;&lt;td&gt;50171&lt;/td&gt; &lt;td&gt;77&lt;/td&gt;&lt;td&gt;49814&lt;/td&gt; &lt;td&gt;109&lt;/td&gt;&lt;td&gt;50012&lt;/td&gt; &lt;td&gt;141&lt;/td&gt;&lt;td&gt;50385&lt;/td&gt; &lt;td&gt;173&lt;/td&gt;&lt;td&gt;50031&lt;/td&gt; &lt;td&gt;205&lt;/td&gt;&lt;td&gt;50072&lt;/td&gt; &lt;td&gt;237&lt;/td&gt;&lt;td&gt;49945&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;49591&lt;/td&gt; &lt;td&gt;46&lt;/td&gt;&lt;td&gt;50290&lt;/td&gt; &lt;td&gt;78&lt;/td&gt;&lt;td&gt;50219&lt;/td&gt; &lt;td&gt;110&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #d9ead3;"&gt;90366&lt;/span&gt;&lt;/td&gt; &lt;td&gt;142&lt;/td&gt;&lt;td&gt;50177&lt;/td&gt; &lt;td&gt;174&lt;/td&gt;&lt;td&gt;50126&lt;/td&gt; &lt;td&gt;206&lt;/td&gt;&lt;td&gt;50585&lt;/td&gt; &lt;td&gt;238&lt;/td&gt;&lt;td&gt;50157&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;49776&lt;/td&gt; &lt;td&gt;47&lt;/td&gt;&lt;td&gt;50340&lt;/td&gt; &lt;td&gt;79&lt;/td&gt;&lt;td&gt;49916&lt;/td&gt; &lt;td&gt;111&lt;/td&gt;&lt;td&gt;49974&lt;/td&gt; &lt;td&gt;143&lt;/td&gt;&lt;td&gt;50224&lt;/td&gt; &lt;td&gt;175&lt;/td&gt;&lt;td&gt;50513&lt;/td&gt; &lt;td&gt;207&lt;/td&gt;&lt;td&gt;50350&lt;/td&gt; &lt;td&gt;239&lt;/td&gt;&lt;td&gt;50234&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;287052&lt;/span&gt;&lt;/td&gt; &lt;td&gt;48&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;205931&lt;/span&gt;&lt;/td&gt; &lt;td&gt;80&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;151232&lt;/span&gt;&lt;/td&gt; &lt;td&gt;112&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;131863&lt;/span&gt;&lt;/td&gt; &lt;td&gt;144&lt;/td&gt;&lt;td&gt;50079&lt;/td&gt; &lt;td&gt;176&lt;/td&gt;&lt;td&gt;50026&lt;/td&gt; &lt;td&gt;208&lt;/td&gt;&lt;td&gt;50226&lt;/td&gt; &lt;td&gt;240&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;131317&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;/td&gt;&lt;td&gt;50022&lt;/td&gt; &lt;td&gt;49&lt;/td&gt;&lt;td&gt;50076&lt;/td&gt; &lt;td&gt;81&lt;/td&gt;&lt;td&gt;50134&lt;/td&gt; &lt;td&gt;113&lt;/td&gt;&lt;td&gt;49801&lt;/td&gt; &lt;td&gt;145&lt;/td&gt;&lt;td&gt;50487&lt;/td&gt; &lt;td&gt;177&lt;/td&gt;&lt;td&gt;50688&lt;/td&gt; &lt;td&gt;209&lt;/td&gt;&lt;td&gt;81920&lt;/td&gt; &lt;td&gt;241&lt;/td&gt;&lt;td&gt;50161&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #d9ead3;"&gt;118991&lt;/span&gt;&lt;/td&gt; &lt;td&gt;50&lt;/td&gt;&lt;td&gt;50125&lt;/td&gt; &lt;td&gt;82&lt;/td&gt;&lt;td&gt;50108&lt;/td&gt; &lt;td&gt;114&lt;/td&gt;&lt;td&gt;50370&lt;/td&gt; &lt;td&gt;146&lt;/td&gt;&lt;td&gt;66545&lt;/td&gt; &lt;td&gt;178&lt;/td&gt;&lt;td&gt;78182&lt;/td&gt; &lt;td&gt;210&lt;/td&gt;&lt;td&gt;49998&lt;/td&gt; &lt;td&gt;242&lt;/td&gt;&lt;td&gt;50092&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;/td&gt;&lt;td&gt;50209&lt;/td&gt; &lt;td&gt;51&lt;/td&gt;&lt;td&gt;50706&lt;/td&gt; &lt;td&gt;83&lt;/td&gt;&lt;td&gt;50292&lt;/td&gt; &lt;td&gt;115&lt;/td&gt;&lt;td&gt;50297&lt;/td&gt; &lt;td&gt;147&lt;/td&gt;&lt;td&gt;50236&lt;/td&gt; &lt;td&gt;179&lt;/td&gt;&lt;td&gt;50411&lt;/td&gt; &lt;td&gt;211&lt;/td&gt;&lt;td&gt;50458&lt;/td&gt; &lt;td&gt;243&lt;/td&gt;&lt;td&gt;50180&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;50170&lt;/td&gt; &lt;td&gt;52&lt;/td&gt;&lt;td&gt;50025&lt;/td&gt; &lt;td&gt;84&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;221044&lt;/span&gt;&lt;/td&gt; &lt;td&gt;116&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #d9ead3;"&gt;116139&lt;/span&gt;&lt;/td&gt; &lt;td&gt;148&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;247793&lt;/span&gt;&lt;/td&gt; &lt;td&gt;180&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;215784&lt;/span&gt;&lt;/td&gt; &lt;td&gt;212&lt;/td&gt;&lt;td&gt;50185&lt;/td&gt; &lt;td&gt;244&lt;/td&gt;&lt;td&gt;50124&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;/td&gt;&lt;td&gt;50371&lt;/td&gt; &lt;td&gt;53&lt;/td&gt;&lt;td&gt;49717&lt;/td&gt; &lt;td&gt;85&lt;/td&gt;&lt;td&gt;50259&lt;/td&gt; &lt;td&gt;117&lt;/td&gt;&lt;td&gt;50274&lt;/td&gt; &lt;td&gt;149&lt;/td&gt;&lt;td&gt;50327&lt;/td&gt; &lt;td&gt;181&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #f4cccc;"&gt;758974&lt;/span&gt;&lt;/td&gt; &lt;td&gt;213&lt;/td&gt;&lt;td&gt;49808&lt;/td&gt; &lt;td&gt;245&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #d9ead3;"&gt;90855&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;50365&lt;/td&gt; &lt;td&gt;54&lt;/td&gt;&lt;td&gt;49979&lt;/td&gt; &lt;td&gt;86&lt;/td&gt;&lt;td&gt;50302&lt;/td&gt; &lt;td&gt;118&lt;/td&gt;&lt;td&gt;50523&lt;/td&gt; &lt;td&gt;150&lt;/td&gt;&lt;td&gt;50228&lt;/td&gt; &lt;td&gt;182&lt;/td&gt;&lt;td&gt;50272&lt;/td&gt; &lt;td&gt;214&lt;/td&gt;&lt;td&gt;50685&lt;/td&gt; &lt;td&gt;246&lt;/td&gt;&lt;td&gt;50228&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;50467&lt;/td&gt; &lt;td&gt;55&lt;/td&gt;&lt;td&gt;50145&lt;/td&gt; &lt;td&gt;87&lt;/td&gt;&lt;td&gt;49797&lt;/td&gt; &lt;td&gt;119&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #d9ead3;"&gt;105677&lt;/span&gt;&lt;/td&gt; &lt;td&gt;151&lt;/td&gt;&lt;td&gt;50108&lt;/td&gt; &lt;td&gt;183&lt;/td&gt;&lt;td&gt;50390&lt;/td&gt; &lt;td&gt;215&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #d9ead3;"&gt;113514&lt;/span&gt;&lt;/td&gt; &lt;td&gt;247&lt;/td&gt;&lt;td&gt;50316&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #d9ead3;"&gt;100861&lt;/span&gt;&lt;/td&gt; &lt;td&gt;56&lt;/td&gt;&lt;td&gt;78827&lt;/td&gt; &lt;td&gt;88&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #d9ead3;"&gt;113581&lt;/span&gt;&lt;/td&gt; &lt;td&gt;120&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;138358&lt;/span&gt;&lt;/td&gt; &lt;td&gt;152&lt;/td&gt;&lt;td&gt;57005&lt;/td&gt; &lt;td&gt;184&lt;/td&gt;&lt;td&gt;53395&lt;/td&gt; &lt;td&gt;216&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;147492&lt;/span&gt;&lt;/td&gt; &lt;td&gt;248&lt;/td&gt;&lt;td&gt;50546&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;/td&gt;&lt;td&gt;50158&lt;/td&gt; &lt;td&gt;57&lt;/td&gt;&lt;td&gt;49803&lt;/td&gt; &lt;td&gt;89&lt;/td&gt;&lt;td&gt;50264&lt;/td&gt; &lt;td&gt;121&lt;/td&gt;&lt;td&gt;50209&lt;/td&gt; &lt;td&gt;153&lt;/td&gt;&lt;td&gt;50095&lt;/td&gt; &lt;td&gt;185&lt;/td&gt;&lt;td&gt;50334&lt;/td&gt; &lt;td&gt;217&lt;/td&gt;&lt;td&gt;50396&lt;/td&gt; &lt;td&gt;249&lt;/td&gt;&lt;td&gt;50078&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;/td&gt;&lt;td&gt;50483&lt;/td&gt; &lt;td&gt;58&lt;/td&gt;&lt;td&gt;50279&lt;/td&gt; &lt;td&gt;90&lt;/td&gt;&lt;td&gt;50176&lt;/td&gt; &lt;td&gt;122&lt;/td&gt;&lt;td&gt;49674&lt;/td&gt; &lt;td&gt;154&lt;/td&gt;&lt;td&gt;50292&lt;/td&gt; &lt;td&gt;186&lt;/td&gt;&lt;td&gt;50529&lt;/td&gt; &lt;td&gt;218&lt;/td&gt;&lt;td&gt;49915&lt;/td&gt; &lt;td&gt;250&lt;/td&gt;&lt;td&gt;50111&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;/td&gt;&lt;td&gt;50211&lt;/td&gt; &lt;td&gt;59&lt;/td&gt;&lt;td&gt;49997&lt;/td&gt; &lt;td&gt;91&lt;/td&gt;&lt;td&gt;50337&lt;/td&gt; &lt;td&gt;123&lt;/td&gt;&lt;td&gt;50396&lt;/td&gt; &lt;td&gt;155&lt;/td&gt;&lt;td&gt;50453&lt;/td&gt; &lt;td&gt;187&lt;/td&gt;&lt;td&gt;49836&lt;/td&gt; &lt;td&gt;219&lt;/td&gt;&lt;td&gt;50170&lt;/td&gt; &lt;td&gt;251&lt;/td&gt;&lt;td&gt;50524&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;/td&gt;&lt;td&gt;49859&lt;/td&gt; &lt;td&gt;60&lt;/td&gt;&lt;td&gt;50507&lt;/td&gt; &lt;td&gt;92&lt;/td&gt;&lt;td&gt;50313&lt;/td&gt; &lt;td&gt;124&lt;/td&gt;&lt;td&gt;50280&lt;/td&gt; &lt;td&gt;156&lt;/td&gt;&lt;td&gt;50059&lt;/td&gt; &lt;td&gt;188&lt;/td&gt;&lt;td&gt;50229&lt;/td&gt; &lt;td&gt;220&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;248053&lt;/span&gt;&lt;/td&gt; &lt;td&gt;252&lt;/td&gt;&lt;td&gt;49981&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;29&lt;/td&gt;&lt;td&gt;50580&lt;/td&gt; &lt;td&gt;61&lt;/td&gt;&lt;td&gt;50869&lt;/td&gt; &lt;td&gt;93&lt;/td&gt;&lt;td&gt;50417&lt;/td&gt; &lt;td&gt;125&lt;/td&gt;&lt;td&gt;49877&lt;/td&gt; &lt;td&gt;157&lt;/td&gt;&lt;td&gt;50355&lt;/td&gt; &lt;td&gt;189&lt;/td&gt;&lt;td&gt;50313&lt;/td&gt; &lt;td&gt;221&lt;/td&gt;&lt;td&gt;49937&lt;/td&gt; &lt;td&gt;253&lt;/td&gt;&lt;td&gt;50533&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;30&lt;/td&gt;&lt;td&gt;50142&lt;/td&gt; &lt;td&gt;62&lt;/td&gt;&lt;td&gt;50358&lt;/td&gt; &lt;td&gt;94&lt;/td&gt;&lt;td&gt;50292&lt;/td&gt; &lt;td&gt;126&lt;/td&gt;&lt;td&gt;50240&lt;/td&gt; &lt;td&gt;158&lt;/td&gt;&lt;td&gt;49821&lt;/td&gt; &lt;td&gt;190&lt;/td&gt;&lt;td&gt;50204&lt;/td&gt; &lt;td&gt;222&lt;/td&gt;&lt;td&gt;50139&lt;/td&gt; &lt;td&gt;254&lt;/td&gt;&lt;td&gt;49975&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;31&lt;/td&gt;&lt;td&gt;50265&lt;/td&gt; &lt;td&gt;63&lt;/td&gt;&lt;td&gt;50165&lt;/td&gt; &lt;td&gt;95&lt;/td&gt;&lt;td&gt;50352&lt;/td&gt; &lt;td&gt;127&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;244313&lt;/span&gt;&lt;/td&gt; &lt;td&gt;159&lt;/td&gt;&lt;td&gt;50410&lt;/td&gt; &lt;td&gt;191&lt;/td&gt;&lt;td&gt;50529&lt;/td&gt; &lt;td&gt;223&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;202938&lt;/span&gt;&lt;/td&gt; &lt;td&gt;255&lt;/td&gt;&lt;td&gt;&lt;span class="Apple-style-span" style="background-color: #fff2cc;"&gt;246009&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;The result is pretty staggering non-uniform and heavily biased to 0. I quickly eyeballed the figures and labeled the counter with colors. Red means a strong bias. Yellow is a slight bias. Green is the ballpark figure for unbiased result, but they are still above a typical count in this table. The coloring is quite subjective, but I'm only using it to highlight the non-uniform bias.&lt;br /&gt;&lt;br /&gt;Now, this observation also indicates that RC4 is a very poor stream cipher. The way stream cipher works is essentially that a stream of pseudo-random bytes are generated and XOR-ed byte-wise with the plaintext in order to obtain ciphertext. The prevalence of 0 values means that most of the plaintext will be identical to the ciphertext because 0 is an XOR identity. The fact that this bad encryption is possible with some key choices should worry a lot of people who are still using RC4.&lt;br /&gt;&lt;br /&gt;By a stroke of luck, I tried a slightly modified RC4 that actually gives me a pretty uniform distribution. The difference (from the pseudo-code listing of the &lt;a href="http://en.wikipedia.org/wiki/RC4"&gt;RC4&lt;/a&gt; wikipedia article) is highlighted in grey below. &lt;br /&gt;&lt;pre&gt;i := 0&lt;br /&gt;j := 0&lt;br /&gt;while GeneratingOutput:&lt;br /&gt;    i := (i + 1) mod 256&lt;br /&gt;    j := (j + S[i]) mod 256&lt;br /&gt;    swap values of S[i] and S[j]&lt;br /&gt;    K := S[(S[i] + S[j]) mod 256]&lt;br /&gt;    output K &lt;span style="background-color: lightgrey;"&gt;^ j&lt;/span&gt;  // was just K before&lt;br /&gt;endwhile&lt;br /&gt;&lt;/pre&gt;This modification gives me the following histogram. &lt;br /&gt;&lt;div style="height: 15em; overflow: scroll; width: 100%;"&gt;&lt;table border="1" cellspacing="0"&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;count&lt;/td&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;count&lt;/td&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;count&lt;/td&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;count&lt;/td&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;count&lt;/td&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;count&lt;/td&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;count&lt;/td&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;count&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;99723&lt;/td&gt; &lt;td&gt;32&lt;/td&gt;&lt;td&gt;100388&lt;/td&gt; &lt;td&gt;64&lt;/td&gt;&lt;td&gt;99739&lt;/td&gt; &lt;td&gt;96&lt;/td&gt;&lt;td&gt;99866&lt;/td&gt; &lt;td&gt;128&lt;/td&gt;&lt;td&gt;100026&lt;/td&gt; &lt;td&gt;160&lt;/td&gt;&lt;td&gt;100026&lt;/td&gt; &lt;td&gt;192&lt;/td&gt;&lt;td&gt;99831&lt;/td&gt; &lt;td&gt;224&lt;/td&gt;&lt;td&gt;99581&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;99941&lt;/td&gt; &lt;td&gt;33&lt;/td&gt;&lt;td&gt;99908&lt;/td&gt; &lt;td&gt;65&lt;/td&gt;&lt;td&gt;100363&lt;/td&gt; &lt;td&gt;97&lt;/td&gt;&lt;td&gt;100328&lt;/td&gt; &lt;td&gt;129&lt;/td&gt;&lt;td&gt;99741&lt;/td&gt; &lt;td&gt;161&lt;/td&gt;&lt;td&gt;100338&lt;/td&gt; &lt;td&gt;193&lt;/td&gt;&lt;td&gt;99792&lt;/td&gt; &lt;td&gt;225&lt;/td&gt;&lt;td&gt;99776&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;99968&lt;/td&gt; &lt;td&gt;34&lt;/td&gt;&lt;td&gt;100010&lt;/td&gt; &lt;td&gt;66&lt;/td&gt;&lt;td&gt;99589&lt;/td&gt; &lt;td&gt;98&lt;/td&gt;&lt;td&gt;100231&lt;/td&gt; &lt;td&gt;130&lt;/td&gt;&lt;td&gt;100649&lt;/td&gt; &lt;td&gt;162&lt;/td&gt;&lt;td&gt;100084&lt;/td&gt; &lt;td&gt;194&lt;/td&gt;&lt;td&gt;100218&lt;/td&gt; &lt;td&gt;226&lt;/td&gt;&lt;td&gt;99839&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;99896&lt;/td&gt; &lt;td&gt;35&lt;/td&gt;&lt;td&gt;99924&lt;/td&gt; &lt;td&gt;67&lt;/td&gt;&lt;td&gt;100465&lt;/td&gt; &lt;td&gt;99&lt;/td&gt;&lt;td&gt;100002&lt;/td&gt; &lt;td&gt;131&lt;/td&gt;&lt;td&gt;100093&lt;/td&gt; &lt;td&gt;163&lt;/td&gt;&lt;td&gt;99815&lt;/td&gt; &lt;td&gt;195&lt;/td&gt;&lt;td&gt;100478&lt;/td&gt; &lt;td&gt;227&lt;/td&gt;&lt;td&gt;100137&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;100439&lt;/td&gt; &lt;td&gt;36&lt;/td&gt;&lt;td&gt;99677&lt;/td&gt; &lt;td&gt;68&lt;/td&gt;&lt;td&gt;100004&lt;/td&gt; &lt;td&gt;100&lt;/td&gt;&lt;td&gt;99960&lt;/td&gt; &lt;td&gt;132&lt;/td&gt;&lt;td&gt;100165&lt;/td&gt; &lt;td&gt;164&lt;/td&gt;&lt;td&gt;99756&lt;/td&gt; &lt;td&gt;196&lt;/td&gt;&lt;td&gt;100064&lt;/td&gt; &lt;td&gt;228&lt;/td&gt;&lt;td&gt;100114&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;100081&lt;/td&gt; &lt;td&gt;37&lt;/td&gt;&lt;td&gt;99362&lt;/td&gt; &lt;td&gt;69&lt;/td&gt;&lt;td&gt;99664&lt;/td&gt; &lt;td&gt;101&lt;/td&gt;&lt;td&gt;99872&lt;/td&gt; &lt;td&gt;133&lt;/td&gt;&lt;td&gt;99887&lt;/td&gt; &lt;td&gt;165&lt;/td&gt;&lt;td&gt;100059&lt;/td&gt; &lt;td&gt;197&lt;/td&gt;&lt;td&gt;99523&lt;/td&gt; &lt;td&gt;229&lt;/td&gt;&lt;td&gt;100590&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;100570&lt;/td&gt; &lt;td&gt;38&lt;/td&gt;&lt;td&gt;99924&lt;/td&gt; &lt;td&gt;70&lt;/td&gt;&lt;td&gt;99648&lt;/td&gt; &lt;td&gt;102&lt;/td&gt;&lt;td&gt;99945&lt;/td&gt; &lt;td&gt;134&lt;/td&gt;&lt;td&gt;99459&lt;/td&gt; &lt;td&gt;166&lt;/td&gt;&lt;td&gt;99854&lt;/td&gt; &lt;td&gt;198&lt;/td&gt;&lt;td&gt;100170&lt;/td&gt; &lt;td&gt;230&lt;/td&gt;&lt;td&gt;100069&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;99812&lt;/td&gt; &lt;td&gt;39&lt;/td&gt;&lt;td&gt;99706&lt;/td&gt; &lt;td&gt;71&lt;/td&gt;&lt;td&gt;100066&lt;/td&gt; &lt;td&gt;103&lt;/td&gt;&lt;td&gt;99598&lt;/td&gt; &lt;td&gt;135&lt;/td&gt;&lt;td&gt;99532&lt;/td&gt; &lt;td&gt;167&lt;/td&gt;&lt;td&gt;99499&lt;/td&gt; &lt;td&gt;199&lt;/td&gt;&lt;td&gt;99956&lt;/td&gt; &lt;td&gt;231&lt;/td&gt;&lt;td&gt;99892&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;99969&lt;/td&gt; &lt;td&gt;40&lt;/td&gt;&lt;td&gt;100484&lt;/td&gt; &lt;td&gt;72&lt;/td&gt;&lt;td&gt;100074&lt;/td&gt; &lt;td&gt;104&lt;/td&gt;&lt;td&gt;99506&lt;/td&gt; &lt;td&gt;136&lt;/td&gt;&lt;td&gt;99831&lt;/td&gt; &lt;td&gt;168&lt;/td&gt;&lt;td&gt;100291&lt;/td&gt; &lt;td&gt;200&lt;/td&gt;&lt;td&gt;100164&lt;/td&gt; &lt;td&gt;232&lt;/td&gt;&lt;td&gt;99562&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;99840&lt;/td&gt; &lt;td&gt;41&lt;/td&gt;&lt;td&gt;99756&lt;/td&gt; &lt;td&gt;73&lt;/td&gt;&lt;td&gt;99128&lt;/td&gt; &lt;td&gt;105&lt;/td&gt;&lt;td&gt;100178&lt;/td&gt; &lt;td&gt;137&lt;/td&gt;&lt;td&gt;99646&lt;/td&gt; &lt;td&gt;169&lt;/td&gt;&lt;td&gt;100348&lt;/td&gt; &lt;td&gt;201&lt;/td&gt;&lt;td&gt;100121&lt;/td&gt; &lt;td&gt;233&lt;/td&gt;&lt;td&gt;99412&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;99793&lt;/td&gt; &lt;td&gt;42&lt;/td&gt;&lt;td&gt;100133&lt;/td&gt; &lt;td&gt;74&lt;/td&gt;&lt;td&gt;100019&lt;/td&gt; &lt;td&gt;106&lt;/td&gt;&lt;td&gt;100488&lt;/td&gt; &lt;td&gt;138&lt;/td&gt;&lt;td&gt;99882&lt;/td&gt; &lt;td&gt;170&lt;/td&gt;&lt;td&gt;99661&lt;/td&gt; &lt;td&gt;202&lt;/td&gt;&lt;td&gt;99864&lt;/td&gt; &lt;td&gt;234&lt;/td&gt;&lt;td&gt;99878&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;100208&lt;/td&gt; &lt;td&gt;43&lt;/td&gt;&lt;td&gt;100059&lt;/td&gt; &lt;td&gt;75&lt;/td&gt;&lt;td&gt;99717&lt;/td&gt; &lt;td&gt;107&lt;/td&gt;&lt;td&gt;100141&lt;/td&gt; &lt;td&gt;139&lt;/td&gt;&lt;td&gt;100374&lt;/td&gt; &lt;td&gt;171&lt;/td&gt;&lt;td&gt;100116&lt;/td&gt; &lt;td&gt;203&lt;/td&gt;&lt;td&gt;99643&lt;/td&gt; &lt;td&gt;235&lt;/td&gt;&lt;td&gt;100394&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;100157&lt;/td&gt; &lt;td&gt;44&lt;/td&gt;&lt;td&gt;99772&lt;/td&gt; &lt;td&gt;76&lt;/td&gt;&lt;td&gt;99846&lt;/td&gt; &lt;td&gt;108&lt;/td&gt;&lt;td&gt;100085&lt;/td&gt; &lt;td&gt;140&lt;/td&gt;&lt;td&gt;100180&lt;/td&gt; &lt;td&gt;172&lt;/td&gt;&lt;td&gt;99632&lt;/td&gt; &lt;td&gt;204&lt;/td&gt;&lt;td&gt;99928&lt;/td&gt; &lt;td&gt;236&lt;/td&gt;&lt;td&gt;100123&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;100098&lt;/td&gt; &lt;td&gt;45&lt;/td&gt;&lt;td&gt;100232&lt;/td&gt; &lt;td&gt;77&lt;/td&gt;&lt;td&gt;100017&lt;/td&gt; &lt;td&gt;109&lt;/td&gt;&lt;td&gt;100654&lt;/td&gt; &lt;td&gt;141&lt;/td&gt;&lt;td&gt;99955&lt;/td&gt; &lt;td&gt;173&lt;/td&gt;&lt;td&gt;99993&lt;/td&gt; &lt;td&gt;205&lt;/td&gt;&lt;td&gt;99858&lt;/td&gt; &lt;td&gt;237&lt;/td&gt;&lt;td&gt;100188&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;100017&lt;/td&gt; &lt;td&gt;46&lt;/td&gt;&lt;td&gt;100135&lt;/td&gt; &lt;td&gt;78&lt;/td&gt;&lt;td&gt;99566&lt;/td&gt; &lt;td&gt;110&lt;/td&gt;&lt;td&gt;99104&lt;/td&gt; &lt;td&gt;142&lt;/td&gt;&lt;td&gt;99640&lt;/td&gt; &lt;td&gt;174&lt;/td&gt;&lt;td&gt;99256&lt;/td&gt; &lt;td&gt;206&lt;/td&gt;&lt;td&gt;100243&lt;/td&gt; &lt;td&gt;238&lt;/td&gt;&lt;td&gt;99918&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;100259&lt;/td&gt; &lt;td&gt;47&lt;/td&gt;&lt;td&gt;100403&lt;/td&gt; &lt;td&gt;79&lt;/td&gt;&lt;td&gt;99459&lt;/td&gt; &lt;td&gt;111&lt;/td&gt;&lt;td&gt;99887&lt;/td&gt; &lt;td&gt;143&lt;/td&gt;&lt;td&gt;100255&lt;/td&gt; &lt;td&gt;175&lt;/td&gt;&lt;td&gt;99818&lt;/td&gt; &lt;td&gt;207&lt;/td&gt;&lt;td&gt;99612&lt;/td&gt; &lt;td&gt;239&lt;/td&gt;&lt;td&gt;99840&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;100139&lt;/td&gt; &lt;td&gt;48&lt;/td&gt;&lt;td&gt;99888&lt;/td&gt; &lt;td&gt;80&lt;/td&gt;&lt;td&gt;100828&lt;/td&gt; &lt;td&gt;112&lt;/td&gt;&lt;td&gt;99999&lt;/td&gt; &lt;td&gt;144&lt;/td&gt;&lt;td&gt;99820&lt;/td&gt; &lt;td&gt;176&lt;/td&gt;&lt;td&gt;100378&lt;/td&gt; &lt;td&gt;208&lt;/td&gt;&lt;td&gt;99663&lt;/td&gt; &lt;td&gt;240&lt;/td&gt;&lt;td&gt;99622&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;/td&gt;&lt;td&gt;100093&lt;/td&gt; &lt;td&gt;49&lt;/td&gt;&lt;td&gt;100173&lt;/td&gt; &lt;td&gt;81&lt;/td&gt;&lt;td&gt;99633&lt;/td&gt; &lt;td&gt;113&lt;/td&gt;&lt;td&gt;100480&lt;/td&gt; &lt;td&gt;145&lt;/td&gt;&lt;td&gt;99804&lt;/td&gt; &lt;td&gt;177&lt;/td&gt;&lt;td&gt;99826&lt;/td&gt; &lt;td&gt;209&lt;/td&gt;&lt;td&gt;100564&lt;/td&gt; &lt;td&gt;241&lt;/td&gt;&lt;td&gt;99916&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;/td&gt;&lt;td&gt;100257&lt;/td&gt; &lt;td&gt;50&lt;/td&gt;&lt;td&gt;99987&lt;/td&gt; &lt;td&gt;82&lt;/td&gt;&lt;td&gt;100502&lt;/td&gt; &lt;td&gt;114&lt;/td&gt;&lt;td&gt;100253&lt;/td&gt; &lt;td&gt;146&lt;/td&gt;&lt;td&gt;100554&lt;/td&gt; &lt;td&gt;178&lt;/td&gt;&lt;td&gt;99998&lt;/td&gt; &lt;td&gt;210&lt;/td&gt;&lt;td&gt;100183&lt;/td&gt; &lt;td&gt;242&lt;/td&gt;&lt;td&gt;100319&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;/td&gt;&lt;td&gt;99835&lt;/td&gt; &lt;td&gt;51&lt;/td&gt;&lt;td&gt;100206&lt;/td&gt; &lt;td&gt;83&lt;/td&gt;&lt;td&gt;99776&lt;/td&gt; &lt;td&gt;115&lt;/td&gt;&lt;td&gt;99674&lt;/td&gt; &lt;td&gt;147&lt;/td&gt;&lt;td&gt;100726&lt;/td&gt; &lt;td&gt;179&lt;/td&gt;&lt;td&gt;99909&lt;/td&gt; &lt;td&gt;211&lt;/td&gt;&lt;td&gt;100548&lt;/td&gt; &lt;td&gt;243&lt;/td&gt;&lt;td&gt;99803&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;100010&lt;/td&gt; &lt;td&gt;52&lt;/td&gt;&lt;td&gt;99879&lt;/td&gt; &lt;td&gt;84&lt;/td&gt;&lt;td&gt;100188&lt;/td&gt; &lt;td&gt;116&lt;/td&gt;&lt;td&gt;99657&lt;/td&gt; &lt;td&gt;148&lt;/td&gt;&lt;td&gt;100255&lt;/td&gt; &lt;td&gt;180&lt;/td&gt;&lt;td&gt;99687&lt;/td&gt; &lt;td&gt;212&lt;/td&gt;&lt;td&gt;99937&lt;/td&gt; &lt;td&gt;244&lt;/td&gt;&lt;td&gt;100122&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;/td&gt;&lt;td&gt;100424&lt;/td&gt; &lt;td&gt;53&lt;/td&gt;&lt;td&gt;100257&lt;/td&gt; &lt;td&gt;85&lt;/td&gt;&lt;td&gt;100197&lt;/td&gt; &lt;td&gt;117&lt;/td&gt;&lt;td&gt;100375&lt;/td&gt; &lt;td&gt;149&lt;/td&gt;&lt;td&gt;99866&lt;/td&gt; &lt;td&gt;181&lt;/td&gt;&lt;td&gt;99741&lt;/td&gt; &lt;td&gt;213&lt;/td&gt;&lt;td&gt;100669&lt;/td&gt; &lt;td&gt;245&lt;/td&gt;&lt;td&gt;99972&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;100062&lt;/td&gt; &lt;td&gt;54&lt;/td&gt;&lt;td&gt;99376&lt;/td&gt; &lt;td&gt;86&lt;/td&gt;&lt;td&gt;100123&lt;/td&gt; &lt;td&gt;118&lt;/td&gt;&lt;td&gt;100396&lt;/td&gt; &lt;td&gt;150&lt;/td&gt;&lt;td&gt;99623&lt;/td&gt; &lt;td&gt;182&lt;/td&gt;&lt;td&gt;100523&lt;/td&gt; &lt;td&gt;214&lt;/td&gt;&lt;td&gt;100195&lt;/td&gt; &lt;td&gt;246&lt;/td&gt;&lt;td&gt;100034&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;99729&lt;/td&gt; &lt;td&gt;55&lt;/td&gt;&lt;td&gt;100404&lt;/td&gt; &lt;td&gt;87&lt;/td&gt;&lt;td&gt;100620&lt;/td&gt; &lt;td&gt;119&lt;/td&gt;&lt;td&gt;100275&lt;/td&gt; &lt;td&gt;151&lt;/td&gt;&lt;td&gt;99594&lt;/td&gt; &lt;td&gt;183&lt;/td&gt;&lt;td&gt;99879&lt;/td&gt; &lt;td&gt;215&lt;/td&gt;&lt;td&gt;99921&lt;/td&gt; &lt;td&gt;247&lt;/td&gt;&lt;td&gt;100092&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;100076&lt;/td&gt; &lt;td&gt;56&lt;/td&gt;&lt;td&gt;99792&lt;/td&gt; &lt;td&gt;88&lt;/td&gt;&lt;td&gt;100383&lt;/td&gt; &lt;td&gt;120&lt;/td&gt;&lt;td&gt;99712&lt;/td&gt; &lt;td&gt;152&lt;/td&gt;&lt;td&gt;100641&lt;/td&gt; &lt;td&gt;184&lt;/td&gt;&lt;td&gt;99514&lt;/td&gt; &lt;td&gt;216&lt;/td&gt;&lt;td&gt;100226&lt;/td&gt; &lt;td&gt;248&lt;/td&gt;&lt;td&gt;100600&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;/td&gt;&lt;td&gt;100107&lt;/td&gt; &lt;td&gt;57&lt;/td&gt;&lt;td&gt;100214&lt;/td&gt; &lt;td&gt;89&lt;/td&gt;&lt;td&gt;100079&lt;/td&gt; &lt;td&gt;121&lt;/td&gt;&lt;td&gt;99682&lt;/td&gt; &lt;td&gt;153&lt;/td&gt;&lt;td&gt;99723&lt;/td&gt; &lt;td&gt;185&lt;/td&gt;&lt;td&gt;99764&lt;/td&gt; &lt;td&gt;217&lt;/td&gt;&lt;td&gt;100120&lt;/td&gt; &lt;td&gt;249&lt;/td&gt;&lt;td&gt;99574&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;/td&gt;&lt;td&gt;99785&lt;/td&gt; &lt;td&gt;58&lt;/td&gt;&lt;td&gt;100284&lt;/td&gt; &lt;td&gt;90&lt;/td&gt;&lt;td&gt;99835&lt;/td&gt; &lt;td&gt;122&lt;/td&gt;&lt;td&gt;100090&lt;/td&gt; &lt;td&gt;154&lt;/td&gt;&lt;td&gt;99805&lt;/td&gt; &lt;td&gt;186&lt;/td&gt;&lt;td&gt;99752&lt;/td&gt; &lt;td&gt;218&lt;/td&gt;&lt;td&gt;99850&lt;/td&gt; &lt;td&gt;250&lt;/td&gt;&lt;td&gt;100211&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;/td&gt;&lt;td&gt;99839&lt;/td&gt; &lt;td&gt;59&lt;/td&gt;&lt;td&gt;99459&lt;/td&gt; &lt;td&gt;91&lt;/td&gt;&lt;td&gt;100332&lt;/td&gt; &lt;td&gt;123&lt;/td&gt;&lt;td&gt;100185&lt;/td&gt; &lt;td&gt;155&lt;/td&gt;&lt;td&gt;99557&lt;/td&gt; &lt;td&gt;187&lt;/td&gt;&lt;td&gt;100176&lt;/td&gt; &lt;td&gt;219&lt;/td&gt;&lt;td&gt;100167&lt;/td&gt; &lt;td&gt;251&lt;/td&gt;&lt;td&gt;100213&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;/td&gt;&lt;td&gt;99700&lt;/td&gt; &lt;td&gt;60&lt;/td&gt;&lt;td&gt;99795&lt;/td&gt; &lt;td&gt;92&lt;/td&gt;&lt;td&gt;99966&lt;/td&gt; &lt;td&gt;124&lt;/td&gt;&lt;td&gt;100599&lt;/td&gt; &lt;td&gt;156&lt;/td&gt;&lt;td&gt;99709&lt;/td&gt; &lt;td&gt;188&lt;/td&gt;&lt;td&gt;100422&lt;/td&gt; &lt;td&gt;220&lt;/td&gt;&lt;td&gt;100028&lt;/td&gt; &lt;td&gt;252&lt;/td&gt;&lt;td&gt;100368&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;29&lt;/td&gt;&lt;td&gt;99776&lt;/td&gt; &lt;td&gt;61&lt;/td&gt;&lt;td&gt;99663&lt;/td&gt; &lt;td&gt;93&lt;/td&gt;&lt;td&gt;99596&lt;/td&gt; &lt;td&gt;125&lt;/td&gt;&lt;td&gt;99479&lt;/td&gt; &lt;td&gt;157&lt;/td&gt;&lt;td&gt;100266&lt;/td&gt; &lt;td&gt;189&lt;/td&gt;&lt;td&gt;100427&lt;/td&gt; &lt;td&gt;221&lt;/td&gt;&lt;td&gt;100172&lt;/td&gt; &lt;td&gt;253&lt;/td&gt;&lt;td&gt;99842&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;30&lt;/td&gt;&lt;td&gt;100319&lt;/td&gt; &lt;td&gt;62&lt;/td&gt;&lt;td&gt;99734&lt;/td&gt; &lt;td&gt;94&lt;/td&gt;&lt;td&gt;99962&lt;/td&gt; &lt;td&gt;126&lt;/td&gt;&lt;td&gt;99874&lt;/td&gt; &lt;td&gt;158&lt;/td&gt;&lt;td&gt;100068&lt;/td&gt; &lt;td&gt;190&lt;/td&gt;&lt;td&gt;100238&lt;/td&gt; &lt;td&gt;222&lt;/td&gt;&lt;td&gt;100058&lt;/td&gt; &lt;td&gt;254&lt;/td&gt;&lt;td&gt;99921&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;31&lt;/td&gt;&lt;td&gt;99537&lt;/td&gt; &lt;td&gt;63&lt;/td&gt;&lt;td&gt;100025&lt;/td&gt; &lt;td&gt;95&lt;/td&gt;&lt;td&gt;100043&lt;/td&gt; &lt;td&gt;127&lt;/td&gt;&lt;td&gt;100382&lt;/td&gt; &lt;td&gt;159&lt;/td&gt;&lt;td&gt;99910&lt;/td&gt; &lt;td&gt;191&lt;/td&gt;&lt;td&gt;99824&lt;/td&gt; &lt;td&gt;223&lt;/td&gt;&lt;td&gt;100697&lt;/td&gt; &lt;td&gt;255&lt;/td&gt;&lt;td&gt;99923&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;This is quite amazingly uniform, at least appears good enough for my purpose. It remains to be seen whether two or more consecutive bytes of output will still retain the same uniformity.&lt;br /&gt;&lt;br /&gt;I think it is quite possible that this slight modification could be immune to the existing statistical attacks on RC4.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-2312351473058742581?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2011/12/evaluating-rc4-as-pseudo-random-number.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-9211415276552842659</guid><pubDate>Fri, 02 Dec 2011 19:39:00 +0000</pubDate><atom:updated>2011-12-02T16:01:56.946-05:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>c++</category><category domain='http://www.blogger.com/atom/ns#'>theory</category><category domain='http://www.blogger.com/atom/ns#'>correctness</category><title>Interface checking</title><description>One of my regrets for C++ is that it doesn't have &lt;a href="http://en.wikipedia.org/wiki/Interface_(Java)"&gt;interface checking&lt;/a&gt; when you instantiate templates. Coupled with the delayed instantiation (the code of a method is not fully type checked until you use it), static type checking of template code has been a hit or miss. Also, when you do get a type error, it is incomprehensible, riddled with the instantiation details that shouldn't be there in the first place. Interface checking means that the compiler can do better type checking before template instantiation. Interface checking has been in development for some time (e.g. &lt;a href="http://www.boost.org/doc/libs/1_48_0/libs/concept_check/concept_check.htm"&gt;Boost Concept Check&lt;/a&gt;, &lt;a href="http://www.generic-programming.org/languages/conceptcpp/"&gt;ConceptCpp&lt;/a&gt;, &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2773.pdf"&gt;N2773&lt;/a&gt;), but it &lt;a href="http://www.informit.com/guides/content.aspx?g=cplusplus&amp;amp;seqNum=441"&gt;didn't make into&lt;/a&gt; the C++11 standard.&lt;br /&gt;&lt;br /&gt;Interface checking in most programming languages follow a fulfillment model where an interface specifies a collection of function method signatures, and if a class implements all the functions (fulfills all signatures), then it is said to implement the interface. This is the case for &lt;a href="http://java.sun.com/docs/books/jls/third_edition/html/interfaces.html"&gt;Java&lt;/a&gt; and &lt;a href="http://golang.org/doc/go_spec.html#Interface_types"&gt;Go language&lt;/a&gt; as well as C++ concept checking in development so far.&lt;br /&gt;&lt;br /&gt;However, if I were to develop interface for a new language, I would choose a declarative model where a class has to explicitly declare the interface it intends to implement. The interface is uniquely identifiable in the program's namespace. The motivation is to prevent a class from unintentionally implementing an interface by coincidence.&lt;br /&gt;&lt;br /&gt;This is especially important for C++ since many operators are overloaded. For example, a &lt;a href="http://www.cplusplus.com/reference/std/iterator/RandomAccessIterator/"&gt;random access iterator&lt;/a&gt; looks a lot like an integral type at the interface level (in fact it is a super concept because you can dereference an iterator), but manipulating the iterator like an integral without observing begin() and end() will cause the iterator to go out of bounds.&lt;br /&gt;&lt;br /&gt;This semantic gap can be bridged by a more precise type specification using &lt;a href="http://en.wikipedia.org/wiki/Dependent_type"&gt;dependent type&lt;/a&gt; (not to be confused with C++ dependent type, a class that is complete if and only if a template argument refers to a complete type; complete type here simply means the compiler knows its memory layout so you can do a sizeof(type), for example, to get its size), but we don't yet have an object oriented dependent type system with interface checking. Even if we can bridge the semantic gap, I argue that a declarative interface checking is not less powerful than fulfillment interface checking.&lt;br /&gt;&lt;br /&gt;Suppose you have a class Foo that implements all the methods required for interface Xyzzy, but Foo doesn't declare it so. In the fulfillment model, Foo can be used to instantiate any template (generic) that requires interface Xyzzy, but not in the declarative model, which requires Foo to explicitly state that it implements interface Xyzzy. Even if you cannot modify the definition of Foo, all you need to do is to subclass Foo and declare that it implements Xyzzy, and pass it to the template.&lt;br /&gt;&lt;br /&gt;Another idea I have (in the context of C++ concept checking at least) is to get rid of the distinction between a class and an interface. Any class can be used as an interface. That's because C++ allows declaration and implementation to be separate. Furthermore, when a class is said to implement another class, it does not mean the class is a subclass of the other class. The compiler will only check that the method signatures are congruent.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-9211415276552842659?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2011/12/interface-checking.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-2619850333995679614</guid><pubDate>Fri, 25 Nov 2011 17:17:00 +0000</pubDate><atom:updated>2011-11-25T12:45:51.961-05:00</atom:updated><title>Non-stop high speed rail</title><description>The basic premise is to find out how to let passenger board and unboard a moving train, without the train stopping. Here I'm tracking the ideas.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;2007/4/18, &lt;a href="http://v.youku.com/v_show/id_ca00XMjgyOTM5MDg=.html"&gt;top boarding&lt;/a&gt;&amp;nbsp;design by 陳建軍, titled "不停站可上下乘客的火車."&lt;/li&gt;&lt;li&gt;2011/6/21, &lt;a href="http://vimeo.com/25403519"&gt;side boarding&lt;/a&gt; design by Paul Priestman, titled "Moving Platform."&lt;/li&gt;&lt;li&gt;2011/11/24, &lt;a href="http://tech.slashdot.org/comments.pl?sid=2544362&amp;amp;cid=38166502"&gt;cloverleaf&lt;/a&gt;&amp;nbsp;(rear detach, front attach) design by a Slashdot commentator.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;All of the above designs suffer poor aerodynamics.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Inspired by a Mythbuster study that a vehicle &lt;a href="http://www.green.autoblog.com/2007/10/28/mythbusters-drafting-10-feet-behind-a-big-rig-will-improve-mile/"&gt;drafting behind a "big rig" improves mileage&lt;/a&gt;, I would suggest a rear boarding design where a passenger car will approach the speed of a moving high speed rail train from behind, dock for a few minutes while boarding and unboarding passengers, and detach from the train again from the rear.&lt;br /&gt;&lt;br /&gt;I believe this docking mechanism will be safer and also energy efficient.&lt;/div&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-2619850333995679614?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2011/11/non-stop-high-speed-rail.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-2486900833756193372</guid><pubDate>Fri, 28 Oct 2011 03:21:00 +0000</pubDate><atom:updated>2011-10-29T16:33:06.030-04:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>c++</category><category domain='http://www.blogger.com/atom/ns#'>system</category><title>Debugging static object destruction order</title><description>If you like to avoid the “&lt;a href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.14"&gt;static initialization order fiasco&lt;/a&gt;” by using construct on first use idiom but with a static object instead of a static object pointer, you might also run into &lt;a href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.16"&gt;static destruction order fiasco&lt;/a&gt;. One solution is to reorder the static constructors so that the destructors are called in the right order, by forcing the static object to be referenced before its first use.&lt;br /&gt;&lt;br /&gt;In order to do decide how to reorder the destruction sequence, we need to tell how it will be carried out. The static destructors are called in reverse order the static constructors are called. Leveraging the fact that destructors are registered using &lt;a href="http://webcache.googleusercontent.com/search?q=cache:0d1YkMmPIx4J:refspecs.freestandards.org/LSB_4.0.0/LSB-Core-generic/LSB-Core-generic/baselib---cxa-atexit.html+&amp;amp;cd=6&amp;amp;hl=en&amp;amp;ct=clnk&amp;amp;gl=us"&gt;__cxa_atexit&lt;/a&gt; (this is part of Itanium C++ ABI, which is adopted by &lt;a href="http://www.ludism.org/~rwhe/LSB/pdf/LSB-Core-generic-try01.pdf"&gt;Linux Standard Base&lt;/a&gt; and implemented in GCC) as soon as the constructor finishes, we can set breakpoint for __cxa_atexit to see the constructor order, which in turn means the destructors will be called in reverse.&lt;br /&gt;&lt;br /&gt;The gdb recipe here will print the name of the function that contains the static object whenever the static object is constructed, but will continue execution.&lt;br /&gt;&lt;pre&gt;(gdb) &lt;b&gt;b __cxa_atexit&lt;/b&gt;  # assume this is breakpoint &lt;em&gt;n&lt;/em&gt;&lt;br /&gt;# set commands to automatically execute for breakpoint &lt;em&gt;n&lt;/em&gt;&lt;br /&gt;(gdb) &lt;b&gt;commands &lt;em&gt;n&lt;/em&gt;&lt;/b&gt;&lt;br /&gt;&amp;gt;&lt;b&gt;where 2&lt;/b&gt;&lt;br /&gt;&amp;gt;&lt;b&gt;continue&lt;/b&gt;&lt;br /&gt;&amp;gt;&lt;b&gt;end&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;(gdb) &lt;b&gt;b __cxa_finalize&lt;/b&gt;&lt;/pre&gt;This allows you to generate a log of construction order without breaking and analyze it offline.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-2486900833756193372?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2011/10/debugging-static-object-destruction.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-3850404960522898312</guid><pubDate>Fri, 07 Oct 2011 05:06:00 +0000</pubDate><atom:updated>2011-10-07T01:06:15.055-04:00</atom:updated><title>Xcode 4.1 for Lion and Apple App Store archive format</title><description>Today I had the (dis)pleasure of downloading Xcode 4.1 for Lion, which turns out to be packaged for App Store. I only have Leopard, so this is how I extracted the file content.&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;First I opened up&amp;nbsp;xcode_4.1_for_lion.dmg, which is a regular hard disk image file.&lt;/li&gt;&lt;li&gt;After mounting, there is a&amp;nbsp;InstallXcodeLion.pkg which turns out to be an &lt;a href="http://en.wikipedia.org/wiki/Xar_(archiver)"&gt;xar&lt;/a&gt; file. To extract, run xar -x -f&amp;nbsp;/Volumes/Install Xcode/InstallXcodeLion.pkg in an empty directory. I think this is the file that you would have downloaded over App Store.&lt;/li&gt;&lt;li&gt;After extraction, there are a few more files.&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Distribution - an XML manifest for the App Store. Contains some JavaScript code that is used for the installer. Who'd have thought that Mac OS X installers use JavaScript for scripting?&lt;/li&gt;&lt;li&gt;InstallXcodeLion.pkg - contains yet another package for installation.&lt;/li&gt;&lt;li&gt;Resources - the license file and localization.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Inside InstallXcodeLion.pkg, there is a file Payload which is a &lt;a href="http://en.wikipedia.org/wiki/Cpio"&gt;cpio&lt;/a&gt; file. To extract, run cpio -i -F /path/to/InstallXcodeLion.pkg/Payload in another empty directory.&lt;/li&gt;&lt;li&gt;After extraction, you get an Applications folder with Install Xcode.app. This is supposedly what App Store saves to the Applications folder.&lt;/li&gt;&lt;li&gt;Attempting to run the mach-O binary in the command line results in:&amp;nbsp;dyld: unknown required load command 0x80000022. It is &lt;a href="http://networkpx.blogspot.com/2009/09/about-lcdyldinfoonly-command.html"&gt;LC_DYLD_INFO_ONLY&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;All the sub-packages can be found in the Contents/Resources/Packages. They are xar packages, but with Bom, PackageInfo, Payload, and Scripts immediately inside. These .pkg files can actually be installed with the Installer that comes with Leopard. However, it is not clear if the binaries installed by these packages will suffer the LC_DYLD_INFO_ONLY issue.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;This shows that with some script kiddie magic, you can install Xcode 4.1 on Leopard. Whether it will actually run or not is another thing.&lt;/div&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-3850404960522898312?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2011/10/xcode-41-for-lion-and-apple-app-store.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-8078275827334046191</guid><pubDate>Sun, 14 Aug 2011 02:51:00 +0000</pubDate><atom:updated>2011-08-13T22:53:32.381-04:00</atom:updated><title>Remote Admin of Server in Closet</title><description>Suppose you have a server tucked away in a closet (or away in a data center). A common issue is, the server is wedged, and you need to power off and/or configure BIOS settings remotely, without being physically present at the server rack.&lt;br /&gt;&lt;br /&gt;One sanctioned commercial solution is the&amp;nbsp;&lt;a href="http://www.avocent.com/Products/Category/Serial_Appliances/ACS_v6000_Virtual_Advanced_Console_Server.aspx"&gt;Cyclades ACS serial console servers&lt;/a&gt;&amp;nbsp;(8-port ~$2,000 and 32-port ~$3,000) with separate power strip relay like &lt;a href="http://www.startech.com/Server-Management/Racks/8-Outlet-Remote-Power-Switch-RS232-Interface~PCM815SHNA"&gt;Startech rackmount server switch&lt;/a&gt; (8 outlet ~$440). What if you're just a hobbyist wanting to put some servers away in the closet or basement, but don't want to have to physically be present by the server when there is a problem?&lt;br /&gt;&lt;br /&gt;Here is my proposed solution.&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;A power over ethernet switch, like &lt;a href="http://www.google.com/products/catalog?hl=en&amp;amp;q=GS108Tv2&amp;amp;gs_upl=1370l1370l0l1787l1l1l0l0l0l0l304l304l3-1l1l0&amp;amp;bav=on.2,or.r_gc.r_pw.&amp;amp;biw=1115&amp;amp;bih=806&amp;amp;um=1&amp;amp;ie=UTF-8&amp;amp;tbm=shop&amp;amp;cid=605804189651642395&amp;amp;sa=X&amp;amp;ei=0CFHTqixNsbe0QHGienpBw&amp;amp;ved=0CE8Q8wIwAA"&gt;Netgear ProSafe GS108T&lt;/a&gt;&amp;nbsp;(~$100). The main reason to have power over ethernet is for interfacing with the serial-to-ethernet adapters.&lt;/li&gt; &lt;li&gt;A Netburner &lt;a href="http://www.netburner.com/products/serial_to_ethernet/sbl2e.html"&gt;serial-to-ethernet adapter&lt;/a&gt;&amp;nbsp;(~$30) with a &lt;a href="http://www.netburner.com/power_over_ethernet.html"&gt;power over ethernet&lt;/a&gt; module (~$8). The adapter has additional analog or digital ports that can be used to drive a relay.&lt;/li&gt; &lt;li&gt;A pair of solid state relay rated for 120VAC at least 10A input such as &lt;a href="http://www.opto22.com/site/pr_details.aspx?cid=3&amp;amp;item=120D10"&gt;Opto 22 120D10&lt;/a&gt; (~$22). This is a SPST (single pole single throw) relay, and will need a pair of them to control one NEMA 5 outlet which has two contacts. Also need to connect these contacts to NEMA 5 plugs (could use a &lt;a href="http://www.google.com/products/catalog?hl=en&amp;amp;q=nema-5+plug&amp;amp;gs_upl=18536l18638l2l18748l2l2l0l0l0l1l130l130l0.1l1l0&amp;amp;bav=on.2,or.r_gc.r_pw.&amp;amp;biw=1115&amp;amp;bih=806&amp;amp;um=1&amp;amp;ie=UTF-8&amp;amp;tbm=shop&amp;amp;cid=14570275366851263210&amp;amp;sa=X&amp;amp;ei=LzRHTqq-Oqu80AGW7ZTqBw&amp;amp;ved=0CIEBEPMCMAA"&gt;cable like this one&lt;/a&gt;, ~$5). Consider using a &lt;a href="http://en.wikipedia.org/wiki/Electrical_connector"&gt;blade crimp connector&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;div&gt;If you have 8 servers or more, you might as well go for the Startech rackmount server switch.&lt;/div&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-8078275827334046191?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2011/08/remote-admin-of-server-in-closet.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>1</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-248265441703274705</guid><pubDate>Sat, 30 Jul 2011 23:06:00 +0000</pubDate><atom:updated>2011-07-30T19:11:54.693-04:00</atom:updated><title>KISSmetrics and life of an ETag</title><description>When I read &lt;a href="http://www.wired.com/epicenter/2011/07/undeletable-cookie/"&gt;Researchers Expose Cunning Online Tracking Service That Can’t Be Dodged&lt;/a&gt; on Slashdot, many commentators there thought disabling JavaScript could prevent tracking because the disclosure on &lt;a href="http://www.kissmetrics.com/how-it-works"&gt;how KISSmetrics works&lt;/a&gt; mentions serving two pieces of JavaScript file. However, JavaScript here is the red herring. The magic happens with &lt;a href="http://en.wikipedia.org/wiki/HTTP_ETag"&gt;ETag&lt;/a&gt;, a cache validation aspect of the web whose intended use is to speed up the loading of websites that you have already visited by downloading only content that has been updated since your last visit.&lt;br /&gt;&lt;br /&gt;When a web browser first visits a site requesting an URL, the server responds with an entity tag (ETag) for that URL that can be used to uniquely identify the version of the URL served. Whenever the resource at a URL is modified, it is guaranteed that its ETag will change. Subsequent browser requests would include a conditional query, essentially telling the server "if this URL has not changed (same ETag) then don't bother sending me the resource." A web browser cache would remember the ETag for as long as the resource is in the cache.&lt;br /&gt;&lt;br /&gt;NoScript will not block ETag. In fact, an ETag can be attached to any resource, an HTML file, an image, etc. The browser's incognito mode may not be sufficient if it shares the same browser cache with non-incognito mode content (as it will send the same ETag). The only way to disable ETag tracking is to disable/clear browser cache, but this too may not be sufficient (more about this later).&lt;br /&gt;&lt;br /&gt;KISSmetrics uses a combination of techniques. To find out how, I hand-crafted an HTTP request as follows, and saved it in a text file in DOS line ending ("\n\r").  Notice the file needs to have a trailing blank line, which marks the end of the HTTP request header.&lt;br /&gt;&lt;pre&gt;$ &lt;kbd&gt;cat i.txt&lt;/kbd&gt;&lt;br /&gt;GET /i.js HTTP/1.1&lt;br /&gt;Host: i.kissmetrics.com&lt;br /&gt;&lt;br /&gt;$ &lt;kbd&gt;hexdump -C i.txt&lt;kbd&gt;&lt;br /&gt;00000000  47 45 54 20 2f 69 2e 6a  73 20 48 54 54 50 2f 31  |GET /i.js HTTP/1|&lt;br /&gt;00000010  2e 31 0d 0a 48 6f 73 74  3a 20 69 2e 6b 69 73 73  |.1..Host: i.kiss|&lt;br /&gt;00000020  6d 65 74 72 69 63 73 2e  63 6f 6d 0d 0a 0d 0a     |metrics.com....|&lt;br /&gt;0000002f&lt;br /&gt;&lt;/pre&gt;Now make a request to be tracked.&lt;br /&gt;&lt;pre&gt;$ &lt;kbd&gt;cat i.txt | nc i.kissmetrics.com 80&lt;/kbd&gt;&lt;br /&gt;HTTP/1.1 200 OK&lt;br /&gt;Cache-Control: max-age=864000000, public&lt;br /&gt;Date: Sat, 30 Jul 2011 19:49:32 GMT&lt;br /&gt;ETag: "&lt;b&gt;xy5cdaPdlMSI4u2xv8rndfudaAE&lt;/b&gt;"&lt;br /&gt;Expires: Wed, 15 Dec 2038 19:49:32 GMT&lt;br /&gt;Last-Modified: Sat, 30 Jul 2011 18:49:32 GMT&lt;br /&gt;P3P: CP="NOI CURa ADMa DEVa TAIa OUR IND UNI INT"&lt;br /&gt;Server: nginx&lt;br /&gt;Set-Cookie: _km_cid=&lt;b&gt;xy5cdaPdlMSI4u2xv8rndfudaAE&lt;/b&gt;;expires=Wed, 15 Dec 2038 19:49:32 GMT;path=/;&lt;br /&gt;Content-Type: application/x-javascript&lt;br /&gt;Content-Length: 79&lt;br /&gt;&lt;br /&gt;var KMCID='&lt;b&gt;xy5cdaPdlMSI4u2xv8rndfudaAE&lt;/b&gt;';if(typeof(_kmil) == 'function')_kmil();&lt;br /&gt;&lt;/pre&gt;Notice that the same identity is presented as ETag, a cookie, as well as a variable in the JavaScript. To my surprise, if I run the same command again, I get the same ETag.&lt;br /&gt;&lt;pre&gt;$ &lt;kdb&gt;cat i.txt| nc i.kissmetrics.com 80&lt;br /&gt;HTTP/1.1 200 OK&lt;br /&gt;Cache-Control: max-age=864000000, public&lt;br /&gt;Date: Sat, 30 Jul 2011 19:49:32 GMT&lt;br /&gt;ETag: "xy5cdaPdlMSI4u2xv8rndfudaAE"&lt;br /&gt;Expires: Wed, 15 Dec 2038 19:49:32 GMT&lt;br /&gt;Last-Modified: Sat, 30 Jul 2011 18:49:32 GMT&lt;br /&gt;P3P: CP="NOI CURa ADMa DEVa TAIa OUR IND UNI INT"&lt;br /&gt;Server: nginx&lt;br /&gt;&lt;b&gt;Age: 298&lt;/b&gt;&lt;br /&gt;Content-Type: application/x-javascript&lt;br /&gt;Content-Length: 79&lt;br /&gt;&lt;br /&gt;var KMCID='xy5cdaPdlMSI4u2xv8rndfudaAE';if(typeof(_kmil) == 'function')_kmil();&lt;br /&gt;&lt;/kdb&gt;&lt;/pre&gt;This time, notice that it no longer tries to set a cookie, but it somehow remembers my ETag and sets an age. Running the same command again, I get:&lt;br /&gt;&lt;pre&gt;$ &lt;kbd&gt;cat i.txt| nc i.kissmetrics.com 80&lt;/kbd&gt;&lt;br /&gt;HTTP/1.1 200 OK&lt;br /&gt;Cache-Control: max-age=864000000, public&lt;br /&gt;Date: Sat, 30 Jul 2011 19:49:32 GMT&lt;br /&gt;ETag: "xy5cdaPdlMSI4u2xv8rndfudaAE"&lt;br /&gt;Expires: Wed, 15 Dec 2038 19:49:32 GMT&lt;br /&gt;Last-Modified: Sat, 30 Jul 2011 18:49:32 GMT&lt;br /&gt;P3P: CP="NOI CURa ADMa DEVa TAIa OUR IND UNI INT"&lt;br /&gt;Server: nginx&lt;br /&gt;&lt;b&gt;Age: 542&lt;/b&gt;&lt;br /&gt;Content-Type: application/x-javascript&lt;br /&gt;Content-Length: 79&lt;br /&gt;&lt;br /&gt;var KMCID='xy5cdaPdlMSI4u2xv8rndfudaAE';if(typeof(_kmil) == 'function')_kmil();&lt;br /&gt;&lt;/pre&gt;Notice the longer age now.&lt;br /&gt;&lt;br /&gt;Now, why does this result surprise me? If I hand-craft an HTTP request, the request should be perfectly stateless. I am expecting to get a different ETag every time I try the same command. But I am getting the same one every time, as if I'm still being tracked.&lt;br /&gt;&lt;br /&gt;It turns out there is a co-conspirator. I'm using a mobile wireless connection right now, and there is a transparent proxy between my computer and KISSmetrics. The transparent proxy is part of the network infrastructure to lessen the load of my provider's connection to another network, by sharing a cache among my provider's users. An evidence of the existence of this transparent proxy is the difference in server behavior. If I switch to a network without the transparent proxy, I get this:&lt;br /&gt;&lt;pre&gt;$ &lt;kbd&gt;cat i.txt | nc i.kissmetrics.com 80&lt;/kbd&gt;&lt;br /&gt;HTTP/1.1 503 Service Unavailable.&lt;br /&gt;Content-length:0&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;The web server, nginx, wants the connection to remain open until at least it starts sending the response, but the transparent proxy before did not require this.  This is probably a side-effect of nginx &lt;a href="http://en.wikipedia.org/wiki/HTTP_pipelining"&gt;HTTP pipelining&lt;/a&gt; support.  It's not too difficult to workaround this problem, by slightly modifying the command.&lt;br /&gt;&lt;pre&gt;$ &lt;kbd&gt;cat i.txt /dev/tty | nc i.kissmetrics.com 80&lt;/kbd&gt;&lt;br /&gt;HTTP/1.1 200 OK&lt;br /&gt;Cache-Control: max-age=864000000, public&lt;br /&gt;Content-Type: application/x-javascript&lt;br /&gt;Date: Sat, 30 Jul 2011 21:55:58 GMT&lt;br /&gt;ETag: "ysdfEF8mCndrvOxrcnzF4tysDss"&lt;br /&gt;Expires: Wed, 15 Dec 2038 21:55:58 GMT&lt;br /&gt;Last-Modified: Sat, 30 Jul 2011 20:55:58 GMT&lt;br /&gt;P3P: CP="NOI CURa ADMa DEVa TAIa OUR IND UNI INT"&lt;br /&gt;Server: nginx&lt;br /&gt;Set-Cookie: _km_cid=ysdfEF8mCndrvOxrcnzF4tysDss;expires=Wed, 15 Dec 2038 21:55:58 GMT;path=/;&lt;br /&gt;Content-Length: 79&lt;br /&gt;Connection: keep-alive&lt;br /&gt;&lt;br /&gt;var KMCID='ysdfEF8mCndrvOxrcnzF4tysDss';if(typeof(_kmil) == 'function')_kmil();&lt;br /&gt;&lt;/pre&gt;After the server responds, I hit Ctrl-D to end the connection.  I now get a fresh tag (as well as a cookie) every time.&lt;br /&gt;&lt;pre&gt;$ &lt;kbd&gt;cat i.txt /dev/tty | nc i.kissmetrics.com 80&lt;/kbd&gt;&lt;br /&gt;HTTP/1.1 200 OK&lt;br /&gt;...&lt;br /&gt;ETag: "ikLBYzrQaWhFzc5lsacDhni3ftI"&lt;br /&gt;...&lt;br /&gt;Set-Cookie: _km_cid=ikLBYzrQaWhFzc5lsacDhni3ftI;expires=Wed, 15 Dec 2038 22:03:26 GMT;path=/;&lt;br /&gt;Content-Length: 79&lt;br /&gt;Connection: keep-alive&lt;br /&gt;&lt;br /&gt;var KMCID='ikLBYzrQaWhFzc5lsacDhni3ftI';if(typeof(_kmil) == 'function')_kmil();&lt;br /&gt;$ &lt;kbd&gt;cat i.txt /dev/tty | nc i.kissmetrics.com 80&lt;/kbd&gt;&lt;br /&gt;HTTP/1.1 200 OK&lt;br /&gt;...&lt;br /&gt;ETag: "fsxiUZH0lIdITI0YA4-uxXslRMQ"&lt;br /&gt;...&lt;br /&gt;Set-Cookie: _km_cid=fsxiUZH0lIdITI0YA4-uxXslRMQ;expires=Wed, 15 Dec 2038 22:03:33 GMT;path=/;&lt;br /&gt;Content-Length: 79&lt;br /&gt;Connection: keep-alive&lt;br /&gt;&lt;br /&gt;var KMCID='fsxiUZH0lIdITI0YA4-uxXslRMQ';if(typeof(_kmil) == 'function')_kmil();&lt;br /&gt;&lt;/pre&gt;I abbreviated the irrelevant headers.&lt;br /&gt;&lt;br /&gt;Further, by modifying the HTTP request, I could get KISSmetrics to replay the ETag.  A cookie is added to the HTTP request:&lt;br /&gt;&lt;pre&gt;$ &lt;kbd&gt;cat j.txt&lt;/kbd&gt;&lt;br /&gt;GET /i.js HTTP/1.1&lt;br /&gt;Host: i.kissmetrics.com&lt;br /&gt;Cookie: _km_cid=fsxiUZH0lIdITI0YA4-uxXslRMQ&lt;br /&gt;&lt;br /&gt;$ &lt;kbd&gt;cat j.txt /dev/tty | nc i.kissmetrics.com 80&lt;/kbd&gt;&lt;br /&gt;HTTP/1.1 200 OK&lt;br /&gt;Cache-Control: max-age=864000000, public&lt;br /&gt;Content-Type: application/x-javascript&lt;br /&gt;Date: Sat, 30 Jul 2011 22:08:35 GMT&lt;br /&gt;ETag: "fsxiUZH0lIdITI0YA4-uxXslRMQ"&lt;br /&gt;Expires: Wed, 15 Dec 2038 22:08:35 GMT&lt;br /&gt;Last-Modified: Sat, 30 Jul 2011 21:08:35 GMT&lt;br /&gt;P3P: CP="NOI CURa ADMa DEVa TAIa OUR IND UNI INT"&lt;br /&gt;Server: nginx&lt;br /&gt;Set-Cookie: _km_cid=fsxiUZH0lIdITI0YA4-uxXslRMQ;expires=Wed, 15 Dec 2038 22:08:35 GMT;path=/;&lt;br /&gt;Content-Length: 79&lt;br /&gt;Connection: keep-alive&lt;br /&gt;&lt;br /&gt;var KMCID='fsxiUZH0lIdITI0YA4-uxXslRMQ';if(typeof(_kmil) == 'function')_kmil();&lt;br /&gt;&lt;/pre&gt;What is interesting is that if I perform the If-None-Match query, KISSmetrics doesn't try to set the cookie back.  I thought it should.&lt;br /&gt;&lt;pre&gt;$ &lt;kbd&gt;cat k.txt&lt;/kbd&gt;&lt;br /&gt;GET /i.js HTTP/1.1&lt;br /&gt;Host: i.kissmetrics.com&lt;br /&gt;If-None-Match: "fsxiUZH0lIdITI0YA4-uxXslRMQ"&lt;br /&gt;&lt;br /&gt;$ &lt;kbd&gt;cat k.txt /dev/tty | nc i.kissmetrics.com 80&lt;/kbd&gt;&lt;br /&gt;HTTP/1.1 304 Not Modified&lt;br /&gt;Date: Sat, 30 Jul 2011 22:11:20 GMT&lt;br /&gt;Server: nginx&lt;br /&gt;Connection: keep-alive&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;This exercise reveals why ETag is such a clever technique to track visitors. By leveraging the transparent proxy cache, the end user has no option opting out of tracking. In fact, the web browser cache is simply a leaf node of a greater Internet content distribution cache framework.  By using ETag, your internet service provider will do the dirty work for KISSmetrics.  You can still be tracked through no fault of your web browser.  As to who is responsibility for tracking you, the distinction is blurred.&lt;br /&gt;&lt;br /&gt;To illustrate how the transparent proxy aids tracking, if I connect back to the network with the transparent proxy using cookie replay, the transparent proxy now starts tracking the replayed identity.&lt;br /&gt;&lt;pre&gt;$ &lt;kbd&gt;cat j.txt | nc i.kissmetrics.com 80&lt;/kbd&gt;  # Cookie-replayed request.&lt;br /&gt;HTTP/1.1 200 OK&lt;br /&gt;...&lt;br /&gt;ETag: "fsxiUZH0lIdITI0YA4-uxXslRMQ"&lt;br /&gt;...&lt;br /&gt;$ &lt;kbd&gt;cat i.txt | nc i.kissmetrics.com 80&lt;/kbd&gt;  # Untracked request.&lt;br /&gt;HTTP/1.1 200 OK&lt;br /&gt;...&lt;br /&gt;ETag: "fsxiUZH0lIdITI0YA4-uxXslRMQ"&lt;br /&gt;...&lt;br /&gt;&lt;/pre&gt;I disconnect and reconnect again.  Now I issue the untracked request first, followed by a cookie replay, and by an ETag replay.  Notice how the replay is now ignored because the new untracked request is now cached by the transparent proxy.&lt;br /&gt;&lt;pre&gt;$ &lt;kbd&gt;cat i.txt | nc i.kissmetrics.com 80&lt;/kbd&gt;  # Untracked request.&lt;br /&gt;HTTP/1.1 200 OK&lt;br /&gt;...&lt;br /&gt;ETag: "Chw55f8kmJAUzkH15o0uP8Qz6i0"&lt;br /&gt;...&lt;br /&gt;$ &lt;kbd&gt;cat j.txt | nc i.kissmetrics.com 80&lt;/kbd&gt;  # Cookie-replayed request.&lt;br /&gt;HTTP/1.1 200 OK&lt;br /&gt;...&lt;br /&gt;ETag: "Chw55f8kmJAUzkH15o0uP8Qz6i0"&lt;br /&gt;...&lt;br /&gt;$ &lt;kbd&gt;cat k.txt | nc i.kissmetrics.com 80&lt;/kbd&gt;  # ETag-replayed request.&lt;br /&gt;HTTP/1.1 200 OK&lt;br /&gt;...&lt;br /&gt;ETag: "Chw55f8kmJAUzkH15o0uP8Qz6i0"&lt;br /&gt;...&lt;br /&gt;&lt;/pre&gt;If you want to surf the web without being tracked, you (1) disconnect from the network, (2) reconnect, and (3) prime the transparent proxy's cache with a new identity request; then without clearing browser cache or cookies, you will be issued a new identity.  However, it is possible that when the browser presents an old identity alongside the new identity, KISSmetrics can correlate and merge the two identities.  It is probably safer to clear the browser cache and cookies just to be sure.&lt;br /&gt;&lt;br /&gt;I think this at least marks the beginning of a happy story.  Even though the transparent proxy cache built into the network infrastructure by the internet provider facilitates tracking, it is still possible for an end-user to evade the tracking by manipulating the proxy in a certain way.&lt;br /&gt;&lt;br /&gt;Finally, the identity here is not really personally identifiable information per-se.  To KISSmetrics, it is just a random string that tells them the random string has been seen visiting websites X, Y and Z.  Unless you provide personally identifiable information to websites X, Y, or Z, all they know is that the same person has used different internet providers to visit certain websites.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-248265441703274705?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2011/07/kissmetrics-and-life-of-etag.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>1</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-1629624924106134583</guid><pubDate>Tue, 05 Jul 2011 17:17:00 +0000</pubDate><atom:updated>2011-07-05T14:49:41.962-04:00</atom:updated><title>ISMM 2011 selected paper notes</title><description>&lt;ul&gt;&lt;li&gt;&lt;a href="http://portal.acm.org/citation.cfm?doid=1993478.1993486"&gt;Cache Index-Aware Memory Allocation&lt;/a&gt;. Allocator of fixed-size headerless objects with sizes that are multiples of cache line size (e.g. object size 128 on cache lines of 64 bytes) may cause certain cache indices to be evicted often when objects uniformly map to the same cache line. Adding spacers (punctuated array) to these objects could break the affinity. NOTE(liulk):&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Cache index conflict should generally happen only at block level if the allocator uses superblocks to manage arenas.&lt;/li&gt;&lt;li&gt;Knuth boundary tags are natural spacers used for variable sized object allocation, and would not suffer this problem.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;a href="http://portal.acm.org/citation.cfm?doid=1993478.1993496"&gt;Compartmental Memory Management in a Modern Web Browser&lt;/a&gt;. Memory resources allocated for each origin (as in "same origin policy") is stored together in the same heap, and a web browser will have separate heaps for each origin. Although Chrome spawns a process for each tag, but this may not be practical for mobile devices where hardware address space isolation could be expensive. This also shortens garbage collection time because same-origin private heaps do not have reference to objects belonging to another origin.&lt;/li&gt;&lt;li&gt;&lt;a href="http://portal.acm.org/citation.cfm?doid=1993478.1993482"&gt;Multicore Garbage Collection with Local Heaps&lt;/a&gt;. Illustrates how mutation handling makes it hard to separate local and global heaps, and how despite the complicated mechanism, achieves little gain in scalability.&lt;/li&gt;&lt;li&gt;&lt;a href="http://portal.acm.org/citation.cfm?doid=1993478.1993480"&gt;Iterative Data-parallel Mark&amp;amp;Sweep on a GPU&lt;/a&gt;. Highlights challenges specific to GPU, namely the lack of deep recursion due to the relatively small size of video memory (~128MB) with no virtual memory and the large number of threads (1000+).&lt;/li&gt;&lt;/ul&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-1629624924106134583?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2011/07/ismm-2011-selected-paper-notes.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-8293319509059286923</guid><pubDate>Sun, 03 Apr 2011 03:22:00 +0000</pubDate><atom:updated>2011-04-04T22:51:06.497-04:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>c++</category><category domain='http://www.blogger.com/atom/ns#'>correctness</category><category domain='http://www.blogger.com/atom/ns#'>abstraction</category><title>Factories and rvalue reference</title><description>One of the benefits of &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1690.html"&gt;rvalue references&lt;/a&gt; is that it provides perfect forwarding for libraries. One example is the factory. A factory here is taken in a loose sense to mean any function (as well as a constructor) that has to construct another object using a non-default constructor, taking the initializer from the function's argument. An example factory is shown below.&lt;br /&gt;&lt;pre&gt;template&amp;lt;class T&amp;gt;&lt;br /&gt;T *factory(const T&amp;amp; x = T()) {&lt;br /&gt;  return new T(x);&lt;br /&gt;}&lt;/pre&gt;Also, the constructor of &lt;a href="http://www.sgi.com/tech/stl/pair.html"&gt;std::pair&lt;/a&gt; is a factory.&lt;br /&gt;&lt;br /&gt;A typical use of the factory is to pass in temporary object as the initializer. For example,&lt;br /&gt;&lt;pre&gt;std::complex *p = factory(std::complex(1.0, -1.0));&lt;/pre&gt;One issue that factories face when the initializer retains resource is what to do with the resource. The resource could be a memory location, a file in the filesystem, or anything whose explicit ownership needs to be established or resource sharing and leak would be an unwanted consequence.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Sharing the resource is out of the question, since this would violate ownership invariant.&lt;/li&gt;&lt;li&gt;Stealing the resource may be desirable but not possible, since x is of type const T&amp;amp; which means you cannot modify x.&lt;/li&gt;&lt;li&gt;Copying the resource could be expensive, for example if x contains a string or a vector with a lot of data.&lt;/li&gt;&lt;/ul&gt;Part of this issue could be mitigated by the copy constructor of T itself. It could be the case that T only wants to copy some defining characteristics from the initializer and not the data. For example, if T represents a file, then only the file permissions are copied but not file content; or if T is a string buffer,&amp;nbsp;then only the open mode is copied but not the content of the buffer.&lt;br /&gt;&lt;br /&gt;Note that &lt;a href="http://www.cplusplus.com/reference/iostream/stringstream/stringstream/"&gt;std::stringstream&lt;/a&gt; does not have a copy constructor, so we're only talking about a hypothetical class. In the case of std::stringstream, most STL implementation probably did not prohibit copy constructor, so the compiler automatically generates one that could end up performing shallow copy of the underlying buffer. This happens to work for temporary initializer like this:&lt;br /&gt;&lt;pre&gt;std::stringstream *p = factory(std::stringstream(...));&lt;/pre&gt;But if the initializer is an lvalue, then sharing of the underlying buffer would be undesirable.&lt;br /&gt;&lt;pre&gt;std::stringstream ss(...);&lt;br /&gt;std::stringstream *p = factory(ss);&lt;br /&gt;&lt;/pre&gt;Depending on what stringstream's copy constructor does, *p and ss might end up sharing the same buffer, and mutating ss or *p would make the internal states of the other object inconsistent.&lt;br /&gt;&lt;br /&gt;With the introduction of rvalue references, we can now give a strong hint to the factory that the internal resources should be transferred.&lt;br /&gt;&lt;pre&gt;template&amp;lt;class T&amp;gt;  // factory using copy semantics&lt;br /&gt;T *factory(const T&amp;amp; x) {&lt;br /&gt;  return new T(x);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;template&amp;lt;class T&amp;gt;  // factory using move semantics&lt;br /&gt;T *factory(T&amp;amp;&amp;amp; x) {&lt;br /&gt;  return new T(std::forward&amp;lt;t&amp;gt;(x));&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;Note that without the std::forward&amp;lt;T&amp;gt;, a named rvalue reference is treated as an lvalue reference when used [&lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1377.htm#More on A&amp;amp;&amp;amp;"&gt;N1377&lt;/a&gt;], and we would end up calling the non-const lvalue reference constructor (i.e. T(T&amp;amp; x)) or fall back to copy constructor (i.e. the const lvalue reference constructor).&lt;br /&gt;&lt;br /&gt;Revisiting the factory using scenario above,&lt;br /&gt;&lt;pre&gt;std::stringstream *p = factory(std::stringstream(...));&lt;/pre&gt;would use the move semantics rvalue reference factory, and&lt;br /&gt;&lt;pre&gt;std::stringstream ss(...);&lt;br /&gt;std::stringstream *p = factory(ss);&lt;br /&gt;&lt;/pre&gt;would use the copy semantics const T&amp;amp; factory.&lt;br /&gt;&lt;br /&gt;This is consistent with N1377 move proposal which says that the most common anticipated overload to be,&lt;br /&gt;&lt;pre&gt;void foo(const A&amp;amp; t);  // #1&lt;br /&gt;void foo(A&amp;amp;&amp;amp; t);       // #2&lt;br /&gt;&lt;/pre&gt;Note that the factory examples in rvalue reference proposal [&lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1690.html"&gt;N1690&lt;/a&gt;] do not have a const T&amp;amp; overload. This means that the factory will only steal resources because of the move semantics. And that&amp;nbsp;&lt;code&gt;factory(ss)&lt;/code&gt; above will steal the underlying buffer of ss and render it unusable.&lt;br /&gt;&lt;br /&gt;The conclusion is that factory must overload both const T&amp;amp; and T&amp;amp;&amp;amp;.&lt;br /&gt;&lt;br /&gt;This actually works nicely with existing libraries. In pre-C++0x code, the factory will always copy. A preprocessor macro would detect the availability of C++0x features and add the rvalue reference version to support move semantics in factory.&lt;br /&gt;&lt;br /&gt;One last word about regular functions with rvalue reference arguments. In N1377, regarding &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1377.htm#Binding temporaries to references"&gt;binding temporaries to references&lt;/a&gt;, it is mentioned that a value could be implicitly converted to a temporary, and this is why passing a temporary of T to T&amp;amp; is disallowed.&lt;br /&gt;&lt;pre&gt;void incr(int&amp;amp; rr) {rr++;}&lt;br /&gt; &lt;br /&gt;void g()&lt;br /&gt;{&lt;br /&gt;    double ss = 1;&lt;br /&gt;    incr(ss);&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;Here, incr(ss) implicitly converts ss to an int, and increment is done on the temporary int value instead. This is properly disallowed in C++. However, in the case of rvalue reference, it is a good idea to make the constructor explicit to disallow implicit conversion.&lt;br /&gt;&lt;pre&gt;class Foo {&lt;br /&gt; public:&lt;br /&gt;  explicit Foo(Bar b);  // regular constructor&lt;br /&gt;};&lt;/pre&gt;Otherwise, a function expecting Foo&amp;amp;&amp;amp; for argument but given a Bar object would implicitly convert Bar to Foo and operate on the temporary Foo. Furthermore, if Foo also has a rvalue reference constructor taking Bar&amp;amp;&amp;amp;, then the temporary Foo would steal all internal resources of Bar, get passed to the function, and self-destruct. In other words, implicit conversion from Bar to Foo would destroy Bar.&lt;br /&gt;&lt;br /&gt;This is likely going to be a very common mistake when more people misuse rvalue reference.&amp;nbsp;On the other hand, it would be wise to limit the use of rvalue reference and never use it like lvalue reference even if you declare the constructors to be explicit. In particular, rvalue reference may or may not modify the argument, so it should not be used as an "out" argument.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-8293319509059286923?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2011/04/factories-and-rvalue-reference.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-1795906654230059996</guid><pubDate>Sat, 19 Mar 2011 16:22:00 +0000</pubDate><atom:updated>2011-03-19T12:22:48.618-04:00</atom:updated><title>Wikileaks? Openleaks? Try Patriotleaks!</title><description>(This is a fictional article, but I welcome those who turn this fiction into reality.)&lt;br /&gt;&lt;br /&gt;Imagine on patriotleaks.us website, it features a blatant American flag in the background, an eagle seal, and a heading that reads, "Patriot Leaks, dedicated to protect United States national interest by revealing dirty leaks about foreign government and institutions." This site will probably not be endorsed by the US government, but it will operate under the legal confines of US law.&lt;br /&gt;&lt;br /&gt;Then imagine on aiguoleaks.cn website, it features a red and yellow Chinese flag in the background, the communist seal of hammer and sickle, and a heading that reads, "用爱国主义来揭发外国政府和外国组织丑恶的罪行来捍卫祖国。" (Translation: using patriotism to reveal dirty crimes of foreign governments and foreign organizations in order to protect motherland.)&lt;br /&gt;&lt;br /&gt;Then imagine there is the Arabic counterpart, the Russian counterpart, the European counterpart, the British commonwealth counterpart. All of these leaks sites all operate under the legal confines of their own legal system, and would never leak things about their own authority in power.&lt;br /&gt;&lt;br /&gt;But they all leak documents about each other like Wikileaks does. Furthermore, they will all mirror each other's leaks except the ones about their respective hosting country. This way, we have redundantly distributed partial mirror of all leaks in the world, but all of them legal in their own jurisdiction.&lt;br /&gt;&lt;br /&gt;You can imagine Wikileaks in a way has become the Nordic node of the Patriotleaks network. They have support from Sweden, Belgium, and Iceland. They would not leak documents that hurt the national interest of these countries (and they have not done so as far as I can tell).&lt;br /&gt;&lt;br /&gt;This type of leaks network will be difficult to suppress by one government alone.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-1795906654230059996?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2011/03/wikileaks-openleaks-try-patriotleaks.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>1</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-4401555280825766585.post-7780841614781355085</guid><pubDate>Sat, 26 Feb 2011 23:18:00 +0000</pubDate><atom:updated>2011-02-26T18:18:45.162-05:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>theory</category><category domain='http://www.blogger.com/atom/ns#'>ideas</category><title>Redundancy of audio packets over lossy network</title><description>I wanted to know what people currently do to stream audio packets over a network with packet loss. There are several options for streaming audio, and they vary in their effectiveness against packet loss.&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://git.zx2c4.com/Airtunes2/about/"&gt;AirTunes&lt;/a&gt; (aka. &lt;a href="http://xmms2.org/wiki/Technical_note_to_describe_the_Remote_Audio_Access_Protocol_(RAOP)_as_used_in_Apple_iTunes_to_stream_music_to_the_Airport_Express_(ApEx)."&gt;RAOP&lt;/a&gt;) is the protocol used between iTunes and Airport Express, based on RTSP (for establishing session) and RTP (for transmitting data). My impression is that you could stream MPEG4 AAC and Apple Lossless Audio Codec to Airport Express, though it may be possible to stream uncompressed audio too. Note that audio codec itself introduces algorithmetic delay, since compression is performed by grouping audio data over a time window. It is not clear how the protocol deals with packet loss, since RTP does not define how to deal with it.&lt;/li&gt;&lt;li&gt;&lt;a href="http://netjack.sourceforge.net/"&gt;Netjack&lt;/a&gt; connects a jack server to a slave. It can stream CELT or raw audio over UDP. &lt;a href="http://www.celt-codec.org/"&gt;CELT&lt;/a&gt; is a low-delay audio codec with packet loss concealment. However, a tradeoff of the low-delay is that it could not resolve low-frequency pitch (~100Hz fundamental), and has to rely on a long term predictor. I'm not sure how this affects audio quality in practice. The &lt;a href="http://trac.jackaudio.org/browser/trunk/jack/drivers/netjack/netjack_packet.c"&gt;packet transport&lt;/a&gt; does not seem to attempt recovering from packet loss, but instead &lt;a href="http://lac.linuxaudio.org/2009/cdm/Saturday/22_Hohn/22.pdf"&gt;relies on CELT codec&lt;/a&gt; for packet loss concealment. The slaves audio time clock is synchronized to the jack server.&lt;/li&gt;&lt;li&gt;&lt;a href="http://trac.jackaudio.org/wiki/WalkThrough/User/NetJack2"&gt;Netjack2&lt;/a&gt; is really a distributed version of jack, using remote computing nodes to apply computationally intensive audio filtering, instead of playing back sound. They implemented a discovery protocol based on multicast, and audio is transmitted over UDP, with no packet loss handling. When using an audio adapter for streaming audio to a slave sound card device, audio resampling is applied to compensate for clock drift.&lt;/li&gt;&lt;li&gt;&lt;a href="https://ccrma.stanford.edu/groups/soundwire/software/jacktrip/"&gt;Jacktrip&lt;/a&gt;, developed at Stanford CCRMA, connects two jack servers over a network. There doesn't seem to be any time synchronization. Data is transmitted over UDP, and it is possible to &lt;a href="http://code.google.com/p/jacktrip/source/browse/trunk/jacktrip/src/UdpDataProtocol.cpp"&gt;transmit redundant data in a rolling window&lt;/a&gt;&amp;nbsp;in order to recover from data loss.&lt;/li&gt;&lt;li&gt;There is a &lt;a href="http://improving%20communication%20quality%20with%20reed%20solomon%20code%20in%20internet%20.../"&gt;proposal&lt;/a&gt;&amp;nbsp;(&lt;a href="http://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;cd=1&amp;amp;ved=0CBkQxQEwAA&amp;amp;url=http%3A%2F%2Fdocs.google.com%2Fviewer%3Fa%3Dv%26q%3Dcache%3ARSsR3el_McoJ%3Awww.qgpop.net%2F2003fukuoka%2Fpresentations%2FB3-3.ppt%2Breed%2Bsolomon%2Budp%26hl%3Den%26gl%3Dus%26pid%3Dbl%26srcid%3DADGEESiC2YKzdvQV0R-F5JXpsW3n_B2crO2aovZp3jjL0DoCc0iVA1EB0hZCgGCf1V9U7rESsiSiqfXsSMZ8RR6AL57OE_heoTlZ3mC1RxdosLlawimA7JQhiroQ1-R8JQx5D4gDGTe6%26sig%3DAHIEtbQ3xk0zbJwQNTpxt2zV4zpwebYacg&amp;amp;ei=NXVpTbXrK4K78gaqzZSYCw&amp;amp;usg=AFQjCNGybPcMpHxaqDRFuIwTluVfxuKCew"&gt;quick view&lt;/a&gt;) in using &lt;a href="http://media.wiley.com/product_data/excerpt/19/07803539/0780353919-2.pdf"&gt;Reed-Solomon code&lt;/a&gt; to transmit data over UDP at Kyushu University.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;I'm particularly interested in technique that could deal with wireless network packet loss, which has the following characteristics:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Wireless packet radio implements low-level retransmission of lost or corrupt packets. On the higher level, this is perceived as high packet delay.&lt;/li&gt;&lt;li&gt;When packet loss on the higher level does occur, it usually happens in bursts of packets. I estimate that up to 3ms radio gap is possible in normal condition.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Regarding these characteristics, the rolling window redundancy used by Jacktrip would not be effective, since a whole streak of packet loss would not be recoverable under this scheme.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;When using Reed-Solomon, if we use byte-sized symbols, then a code block can only be 255 bytes (including parity). If we naively transmit the 255 bytes over UDP as a single packet, it is possible that the whole block would be dropped altogether. But we could transpose the block so that, when transmitting n blocks over m UDP packets, each UDP packet would contain 1/m slice of n blocks. This seems to be the approach taken by the Kyushu University proposal. This scheme, known as &lt;a href="http://en.wikipedia.org/wiki/Cross-interleaved_Reed-Solomon_coding"&gt;Cross-Interleaved Reed-Solomon&lt;/a&gt;, is also used on audio CD.&lt;/div&gt;&lt;/div&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/4401555280825766585-7780841614781355085?l=lifecs.likai.org' alt='' /&gt;&lt;/div&gt;</description><link>http://lifecs.likai.org/2011/02/redundancy-of-audio-packets-over-lossy.html</link><author>noreply@blogger.com (Likai Liu)</author><thr:total>1</thr:total></item></channel></rss>