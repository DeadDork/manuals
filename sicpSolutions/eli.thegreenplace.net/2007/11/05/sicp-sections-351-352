<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP sections 3.5.1 - 3.5.2 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-sections-351-352"
                       rel="bookmark"
                       title="Permalink to SICP sections 3.5.1 - 3.5.2">
                        SICP sections 3.5.1 - 3.5.2
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> November 05, 2007 at 20:29</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <p>I&#8217;m going to use Common Lisp for this section, since I much prefer CL&#8217;s macros to Scheme&#8217;s and macro usage is required to implement the <code>delay</code> and <code>cons-stream</code> functions.</p>


	<p>Why are macros required here ? In the book, the authors, after defining some stream primitives vaguely note that how <code>cons-stream</code> works, without showing its actual implementation:</p>


<pre>
(cons-stream &lt;a&gt; &lt;b&gt;)
</pre>

	<p>Is equivalent to:</p>


<pre>
(cons &lt;a&gt; (delay &lt;b&gt;))
</pre>

	<p>But this can be misleading. What we really want here is <em>normal order evaluation</em>, where the arguments to a function aren&#8217;t evaluated prior to calling it. We <strong>don&#8217;t</strong> want the second argument of <code>cons-stream</code> to be evaluated, because it is <em>delayed</em>. If we translate the <code>show</code> function<sup><a href="sicp-sections-351-352#fn1">1</a></sup> to CL:</p>


<pre>
(defun show (x)
  (format t "~a~%" x)
  x)
</pre>

	<p>We can understand how the call to <code>cons-stream</code> works. First, let&#8217;s define <code>cons-stream</code> naively as:</p>


<pre>
(defun cons-stream (a b)
  (cons a (delay b)))
</pre>

	<p>Now consider<sup><a href="sicp-sections-351-352#fn2">2</a></sup>:</p>


<pre>
(deflex ss (cons-stream 1 (show (+ 2 1))))
=&gt; 3
(stream-cdr ss)
</pre>

	<p>What printed 3 is the call to <code>cons-stream</code>, because the evaluation rules of Lisp are <em>applicative order</em>. What we really want is for the call to <code>cons-stream</code> to print nothing, and then the call to <code>stream-cdr</code> to print the value:</p>


<pre>
(deflex ss (cons-stream 1 (show (+ 2 1))))
(stream-cdr ss)
=&gt; 3
</pre>

	<p>How can delayed order be implemented in Common Lisp ? Using <em>macros</em> ! When a macro is called, the Lisp evaluator doesn&#8217;t evaluate any of its arguments automatically, it leaves the choice of which arguments to evaluate to the macro itself<sup><a href="sicp-sections-351-352#fn3">3</a></sup>. Here&#8217;s the correct <code>cons-stream</code>:</p>

<div class="highlight" style="background: #ffffff"><pre style="line-height: 125%">
(defmacro cons-stream (a b)
  &#x60;(cons ,a (delay ,b)))

</pre></div>

<p><code>delay</code> must be implemented as a macro as well, for the same reason:</p>


<pre>
(defmacro delay (expr)`(memo-proc (lambda () ,expr)))
</pre>

	<p><code>memo-proc</code> was defined by the authors. Here&#8217;s its translation to CL:</p>


<pre>
(defun memo-proc (proc)
  (let ((already-run? nil) (result nil))
    (lambda ()
      (if (not already-run?)
        (progn
          (setf result (funcall proc))
          (setf already-run? t)
          result)
        result))))
</pre>

	<p>And here are the rest of the primitives:</p>


<pre>
(defvar the-empty-stream '())
(defun stream-null? (s)
  (null s))

(defun force (delayed-object)
  (funcall delayed-object))

(defun stream-car (s)
  (car s))

(defun stream-cdr (s)
  (force (cdr s))) 
</pre>

	<p>Using these primitives we can implement some of the basic stream operations:</p>


<pre>
(defun stream-ref (s n)
  (if (= n 0)
    (stream-car s)
    (stream-ref (stream-cdr s) (- n 1))))

(defun stream-enumerate-interval (low high)
  (if (&gt; low high)
    the-empty-stream
    (cons-stream
      low
      (stream-enumerate-interval (+ low 1) high))))

(defun stream-filter (pred s)
  (cond ((stream-null? s) the-empty-stream)
        ((funcall pred (stream-car s))
          (cons-stream 
            (stream-car s)
            (stream-filter pred (stream-cdr s))))
        (t (stream-filter pred (stream-cdr s)))))
</pre>

	<p>And use them:</p>


<pre>
(deflex ss 
  (stream-filter 
    #'prime? 
    (stream-enumerate-interval 10 100)))

(stream-car ss)
=&gt; 11
(stream-car (stream-cdr ss))
=&gt; 13
(stream-car (stream-cdr (stream-cdr ss)))
=&gt; 17
</pre>

	<h4>Exercise 3.50</h4>


<pre>
(defun stream-map (proc &#38;rest argstreams)
  (if (stream-null? (car argstreams))
    the-empty-stream
    (cons-stream
      (apply proc (mapcar #'stream-car argstreams))
      (apply #'stream-map 
        (cons proc (mapcar #'stream-cdr argstreams))))))
</pre>

	<p>Usage:</p>


<pre>
(deflex s1 (stream-enumerate-interval 10 100))
(deflex s2 (stream-enumerate-interval 20 200))
(deflex s3 (stream-enumerate-interval 30 300))

(deflex ss (stream-map #'+ s1 s2 s3))

(stream-ref ss 0)
=&gt; 60
(stream-ref ss 1)
=&gt; 63
(stream-ref ss 2)
=&gt; 66
</pre>

	<h4>Exercise 3.51</h4>


<pre>
(deflex x (stream-map #'show (stream-enumerate-interval 0 10))))
=&gt; 0
(stream-ref x 5)
=&gt;
1
2
3
4
5
(stream-ref x 7)
=&gt;
6
7
</pre>

	<p>Note that the second <code>stream-ref</code> prints only two numbers because of <code>memo-proc</code> and the previous call to <code>stream-ref</code>.</p>


	<h4>Exercise 3.52</h4>


<pre>
(deflex sum 0)
(defun accum (x)
  (setf sum (+ x sum))
  sum)
=&gt; sum is 0

(deflex seq (stream-map #'accum (stream-enumerate-interval 1 20)))
=&gt; sum is 1

(deflex y (stream-filter #'evenp seq))
=&gt; sum is 6

(deflex z (stream-filter (lambda (x) (= (rem x 5) 0)) seq))
=&gt; sum is 10

(stream-ref y 7) 
=&gt; 136
=&gt; sum is 136

(display-stream z)
=&gt;
10
15
45
55
105
120
190
210
</pre>

	<h4>Exercise 3.53</h4>


<pre>
(deflex s (cons-stream 1 (add-streams s s)))
=&gt; 1, 2, 4, 8, 16 ...
</pre>

	<p>What is <code>s</code> ? A stream beginning with 1 and the next element being the promise to compute the sum of <code>s</code> with itself. So, when asked for the second element, <code>s</code> returns the first element of the sum, which is double the first element of <code>s</code> itself. When asked for the third element, <code>s</code> returns the second element of the sum, which is the double of the second element, and so on.</p>


	<h4>Exercise 3.54</h4>


<pre>
(defun mul-streams (s1 s2)
  (stream-map #'* s1 s2))

(deflex factorials
  (cons-stream 1 (mul-streams 
                    factorials 
                    (integers-starting-from 2))))
</pre>

	<h4>Exercise 3.55</h4>


	<p>The first element of this stream should be the first element of the original stream. The next element is a promise to compute the sum of partial sums itself (recursively), and the rest of the original stream:</p>


<pre>
(defun partial-sums (s)
  (cons-stream
    (stream-car s)
    (add-streams 
      (stream-cdr s) 
      (partial-sums s))))
</pre>

	<h4>Exercise 3.56</h4>


<pre>
(defun merge (s1 s2)
  (cond ((stream-null? s1) s2)
        ((stream-null? s2) s1)
        (t
          (let ((s1car (stream-car s1))
                (s2car (stream-car s2)))
            (cond ((&lt; s1car s2car)
                    (cons-stream s1car (merge (stream-cdr s1) s2)))
                  ((&gt; s1car s2car)
                    (cons-stream s2car (merge s1 (stream-cdr s2))))
                  (t
                    (cons-stream 
                      s1car
                      (merge (stream-cdr s1) (stream-cdr s2)))))))))


(deflex s 
  (cons-stream 
    1 
    (merge 
      (scale-stream S 2)
      (merge 
        (scale-stream S 3)
        (scale-stream S 5)))))
</pre>

	<h4>Exercise 3.57</h4>


	<p>With memoization, <code>n-1</code> additions are performed for computing the <code>n@th fibonacci number, since each call of @force</code> on the stream returned by <code>add-streams</code> recomputes the <code>fibs</code> stream only once.</p>


	<p>Without memoization, the growth is exponential because in the call to <code>add-streams</code>, <code>(stream-cdr fibs)</code> will do all the work <code>fibs</code> does, but that is repeated.</p>


	<h4>Exercise 3.58</h4>


	<p>This stream performs long division of <code>num</code> by <code>den</code> in base <code>radix</code>, returning subsequent numbers after the floating point with each call.</p>


<pre>
(expand 1 7 10)
=&gt; 1 4 2 8 5 7 1 4 2 8

(expand 3 8 10)
=&gt; 3 7 5 0 0 0 0 0 0 0 
</pre>

	<h4>Exercise 3.59</h4>


<strong>a.</strong> 
<pre>
(defun integrate-series (s)
  (labels (
      (integrate-aux (s n)
        (cons-stream 
          (/ (stream-car s) n)
          (integrate-aux 
            (stream-cdr s) 
            (+ n 1)))))
    (integrate-aux s 1)))
</pre>

<strong>b.</strong>
<pre>
(deflex sine-series
  (cons-stream 0 (integrate-series cosine-series)))

(deflex cosine-series
  (cons-stream 1 
    (scale-stream 
      (integrate-series sine-series)
      -1)))
</pre>

	<h4>Exercise 3.60</h4>


	<p>We can reach the solution if we think recursively. The first element of the multiplication of two power series is the product of the series&#8217; first elements. So far simple. Now, the rest of it can be computed by taking the first element of <code>s1</code>, multiplying it by all the elements of <code>s2</code> and then adding the multiplication of the rest of the elements of <code>s1</code> by <code>s2</code>.</p>


<pre>
(defun mul-series (s1 s2)
  (cons-stream 
    (* (stream-car s1) (stream-car s2))
    (add-streams 
      (scale-stream (stream-cdr s2) (stream-car s1))
      (mul-series (stream-cdr s1) s2))))
</pre>

	<p>And the proposed test:</p>


<pre>
(deflex la 
  (add-streams  
    (mul-series sine-series sine-series) 
    (mul-series cosine-series cosine-series)))
=&gt; 1 0 0 0 ...
</pre>

	<h4>Exercise 3.61</h4>


<pre>
(defun invert-unit-series (sr)
  (cons-stream
    1
    (scale-stream 
      (mul-series 
        (invert-unit-series sr) 
        (stream-cdr sr))
      -1)))
</pre>

	<h4>Exercise 3.62</h4>


<pre>
(defun div-series (num denom)
  (let ((denom-const (stream-car denom)))
    (if (zerop denom-const)
      (error "denom constant term is zero")
      (mul-series
        (invert-unit-series 
          (scale-stream denom denom-const))
        num))))
</pre>

	<p>And the tangent is:</p>


<pre>
(deflex tangent-series 
  (div-series sine-series cosine-series))
</pre>

<img class="align-center" src="../../../images/hline.jpg" style="width: 320px; height: 5px;" />

	<p id="fn1"><sup>1</sup> Defined by the authors in exercise 3.51</p>


	<p id="fn2"><sup>2</sup> <code>deflex</code> is explained <a href="http://eli.thegreenplace.net/2007/10/18/sicp-section-335/">here</a></p>


	<p id="fn3"><sup>3</sup> This is a simplified view of a complex reality. However, I don&#8217;t intend to teach macros here &#8211; there are enough Lisp resources online for that. Macros are a tricky business &#8211; I must confess I don&#8217;t fully master their use myself yet.</p>

    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-sections-351-352';
            var disqus_url = 'http://eli.thegreenplace.net/2007/11/05/sicp-sections-351-352';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-sections-351-352#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>