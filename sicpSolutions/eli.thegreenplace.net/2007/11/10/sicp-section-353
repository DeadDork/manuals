<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP section 3.5.3 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-section-353"
                       rel="bookmark"
                       title="Permalink to SICP section 3.5.3">
                        SICP section 3.5.3
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> November 10, 2007 at 08:41</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <p>The code for this section is in Common Lisp.</p>


	<h4>Exercise 3.63</h4>


	<p>It is less efficient because it involves a recursive function call, which isn&#8217;t optimized by <code>memo-proc</code>. This call recurses back on <code>sqrt-stream</code> for each new element forced.</p>


	<h4>Exercise 3.64</h4>


	<p>I&#8217;ll define a helper procedure first. It should be familiar from conventional list processing:</p>


<pre>
(defun stream-cadr (s)
  (stream-car (stream-cdr s)))
</pre>

	<p>Now:</p>


<pre>
(defun stream-limit (s tolerance)
  (if (&lt; 
        (abs (- (stream-car s) (stream-cadr s)))
        tolerance)
    (stream-cadr s)
    (stream-limit (stream-cdr s) tolerance)))
</pre>

	<h4>Exercise 3.65</h4>


	<p>First, the approxumation function:</p>


<pre>
(defun ln2-summands (n)
  (cons-stream 
    (/ 1.0 n)
    (stream-map #'- (ln2-summands (1+ n)))))

(deflex ln2-stream
  (partial-sums (ln2-summands 1)))
</pre>

	<p>This converges slowly:</p>


<pre>
(display-n-stream-elements ln2-stream 10)
=&gt;
1.0 
0.5 
0.8333334 
0.5833334 
0.78333336 
0.6166667 
0.7595238 
0.6345238 
0.7456349 
0.6456349
</pre>

	<p>Now, with Euler&#8217;s acceleration:</p>


<pre>
(display-n-stream-elements 
  (euler-transform ln2-stream) 
  10)
=&gt;
0.70000005 
0.69047624 
0.6944445 
0.6924243 
0.69358975 
0.69285715 
0.69334733 
0.6930033 
0.69325393 
0.69306576 
</pre>

	<p>Indeed, much quicker (the real value of <code>ln2</code> is 0.693147181056). When accelerated using the tableau method, however, the values become accurate very rapidly:</p>


<pre>
(display-n-stream-elements 
  (accelerated-sequence 
    #'euler-transform ln2-stream) 7)
=&gt;
1.0 
0.70000005 
0.69327736 
0.6931489 
0.6931472 
0.6931472 
0.6931471 
</pre>

	<h4>Exercise 3.66</h4>


	<p><code>pairs</code> gives the first pair, and then interleaves the elements of the second stream with the head of the first, with a recursive call on itself with the tails of both streams. So, in examining the sequence we can &#8220;peel off&#8221; sub-sequences. Here are the first 10 pairs:</p>


<pre>
(1 1) 
(1 2) 
(2 2) 
(1 3) 
(2 3) 
(1 4) 
(3 3) 
(1 5) 
(2 4) 
(1 6)
</pre>

	<p>Notice that after the initial <code>(1 1)</code>, <code>(1 n)</code> appears every second element. This is because the nature of the <code>interleave</code> function. So we can already say that <code>(1 100)</code> will take 198 elements to show up, because <code>(1 n)</code> appears on position <code>2n-2</code>. The next task is more tricky. It will help to look at the stream with all the <code>(1 n)</code> pairs peeled off:</p>


<pre>
(2 2) 
(2 3) 
(3 3) 
(2 4) 
(3 4) 
(2 5) 
(4 4) 
(2 6) 
(3 5) 
(2 7) 
</pre>

	<p>Looks familiar, doesn&#8217;t it ? Again, <code>(2 n)</code> now appears every second element. But recall that we took <code>(1 n)</code> away, and two of these squeeze between each pair of <code>(2 n)</code>. Therefore, <code>(2 n)</code> come in steps of 4 in the <code>pairs</code> stream. Similarly, <code>(3 n)</code> come in steps of 8. Overall, <code>(m n)</code> is the n-th element of <code>2^m</code> apart, or approximately <code>n*2^m</code>.</p>


	<h4>Exercise 3.67</h4>


<pre>
(defun all-pairs (s1 s2)
  (cons-stream
    (list (stream-car s1) (stream-car s2))
    (interleave
      (stream-map 
        (lambda (x) (list (stream-car s1) x))
        (stream-cdr s2))
      (interleave
        (stream-map
          (lambda (x) (list x (stream-car s2)))
          (stream-cdr s1))
        (all-pairs (stream-cdr s1) (stream-cdr s2))))))
</pre>

	<h4>Exercise 3.68</h4>


	<p>Calling Louis&#8217;s <code>pairs</code> will cause an infinite loop, because there&#8217;s no delayed definition like we&#8217;re used to have with streams. <code>interleave</code> evaluates its second argument, which is a recursive call to <code>pairs</code>, which in turn calls itself again and again. In the original version, <code>interleave</code> is called through <code>cons-stream</code> that doesn&#8217;t actually evaluate it until asked for the next element.</p>


	<h4>Exercise 3.69</h4>


	<p>Conceptually, we can think of triplets recursively in terms of pairs. If we take the first element of the first stream, and enumerate all the pairs taken from the other two streams with this element prepended, and repeat this procedure for every element in the first stream, we will eventually enumerate all triplets. Perhaps the code will be clearer than the explanation :-)</p>


<pre>
(defun triplets (s1 s2 s3)
  (cons-stream 
    (list
      (stream-car s1)
      (stream-car s2)
      (stream-car s3))
    (interleave
      (stream-map
        (lambda (x) (append (list (stream-car s1)) x))
        (stream-cdr (pairs s2 s3)))
      (triplets 
        (stream-cdr s1)
        (stream-cdr s2)
        (stream-cdr s3)))))
</pre>

	<p>Note that I&#8217;m taking the <code>stream-cdr</code> or <code>pairs</code>, to skip the first pair which is already present in the first element given to <code>cons-stream</code>.</p>


	<p>To generate the Pythagorean triplets:</p>


<pre>
(deflex ppp (triplets integers integers integers))

(deflex pythagorean
  (stream-filter 
    (lambda (triplet)
      (= 
        (square (caddr triplet))
        (+  (square (car triplet))
            (square (cadr triplet)))))
    ppp))

(display-n-stream-elements pythagorean 20)
=&gt;
(3 4 5) 
(6 8 10) 
...
</pre>

	<h4>Exercise 3.70</h4>


<pre>
(defun merge-weighted (weight s1 s2)
  (cond
    ((stream-null? s1) s2)
    ((stream-null? s2) s1)
    (t
      (let* ( (s1car (stream-car s1))
              (s1w (funcall weight s1car))
              (s2car (stream-car s2))
              (s2w (funcall weight s2car)))
        (cond ((&lt;= s1w s2w)
                (cons-stream s1car (merge-weighted weight (stream-cdr s1) s2)))
              (t
                (cons-stream s2car (merge-weighted weight s1 (stream-cdr s2)))))))))

(defun weighted-pairs (weight s1 s2)
  (cons-stream
    (list (stream-car s1) (stream-car s2))
    (merge-weighted
      weight
      (stream-map 
        (lambda (x) (list (stream-car s1) x))
        (stream-cdr s2))
      (weighted-pairs weight (stream-cdr s1) (stream-cdr s2)))))
</pre>

	<p>Note that <code>merge-weighted</code> is a bit different from the original <code>merge</code>. The original <code>merge</code> is supposed to merge elements which may be equal. In such case, it will leave only one of those elements in the result stream (removing duplications). On the other hand, we are merging according to weight, and we can&#8217;t allow one of the pairs <code>(2 3)</code> and <code>(1 4)</code> to disappear just because they have the same weight, so we must merge in both.</p>


	<p><strong>a.</strong></p>


<pre>
(deflex sump 
  (weighted-pairs 
    (lambda (pair) (apply #'+ pair))
    integers 
    integers))

(display-n-stream-elements sump 10)
=&gt;
(1 1) 
(1 2) 
(1 3) 
(2 2) 
(1 4) 
(2 3) 
(1 5) 
(3 3) 
(2 4) 
(1 6) 
</pre>

	<p><strong>b.</strong></p>


<pre>
(deflex no-235-factors
  (stream-filter 
    (lambda (n)
      (not (or  (divides? 2 n)
                (divides? 3 n)
                (divides? 5 n))))
    integers))

(deflex s235
  (weighted-pairs
    (lambda (pair) 
      (let ((i (car pair)) (j (cadr pair)))
        (+ (* 2 i) (* 3 j) (* 5 i j))))
    no-235-factors
    no-235-factors))

(display-n-stream-elements s235 20)
=&gt;
(1 1) 
(1 7) 
(1 11) 
(1 13) 
(1 17) 
(1 19) 
(1 23) 
(1 29) 
(1 31) 
(7 7) 
(1 37) 
(1 41) 
(1 43) 
(1 47) 
(1 49) 
(1 53) 
(7 11) 
(1 59) 
(1 61) 
(1 67) 
</pre>

	<h4>Exercise 3.71</h4>


<pre>
(defun ij-cube (pair)
  (+ (cube (car pair)) (cube (cadr pair))))

(deflex cubew
  (weighted-pairs
    #'ij-cube
    integers
    integers))

(defun ramanujan (stream max-count)
  (do* ((s stream (stream-cdr s))
        (count 1))
      (nil)
    (if (= (ij-cube (stream-car s)) (ij-cube (stream-cadr s)))
      (if (&gt; count max-count)
        (return)
        (progn
          (incf count)
          (format t "~a~%" 
            (list (ij-cube (stream-car s)) 
                  (stream-car s) 
                  (stream-cadr s))))))))

(ramanujan cubew 6)
=&gt;
(1729 (1 12) (9 10))
(4104 (2 16) (9 15))
(13832 (2 24) (18 20))
(20683 (10 27) (19 24))
(32832 (4 32) (18 30))
(39312 (2 34) (15 33))
</pre>

	<h4>Exercise 3.72</h4>


	<p>This is very similar to the previous exercise:</p>


<pre>
(defun ij-square (pair)
  (+ (square (car pair)) (square (cadr pair))))

(deflex squarew
  (weighted-pairs
    #'ij-square
    integers
    integers))

(defun squares-3ways (stream max-count)
  (do* ((s stream (stream-cdr s))
        (count 1))
      (nil)
    (let ((a (stream-car s))
          (b (stream-cadr s))
          (c (stream-cadr (stream-cdr s))))
      (if (= (ij-square a) (ij-square b) (ij-square c))
        (if (&gt; count max-count)
          (return)
          (progn
            (incf count)
            (format t "~a~%" 
              (list (ij-square a) a b c))))))))

(squares-3ways squarew 6)
=&gt;
(325 (1 18) (6 17) (10 15))
(425 (5 20) (8 19) (13 16))
(650 (5 25) (11 23) (17 19))
(725 (7 26) (10 25) (14 23))
(845 (2 29) (13 26) (19 22))
(850 (3 29) (11 27) (15 25))
</pre>

	<p>I suppose this could be generalized in some way: &#8220;find all numbers that can be written as a <em>f(i,j)</em> of <code>i</code> and <code>j</code> in <code>n</code> different ways&#8221;. This will be left as an exercise to the diligent readers :-)</p>


	<h4>Exercise 3.73</h4>


	<p>First of all, I want to show how <code>integral</code> is implemented in Common Lisp. It is done a bit differently from Scheme, because it touches one of the points of difference between these two languages. In Scheme, variables and functions reside in the same namespace, while Common Lisp has separate namespaces for them<sup><a href="sicp-section-353#fn4">4</a></sup>.</p>


	<p>Therefore, Common Lisp can&#8217;t treat variables the same way it treats functions, while Scheme can. Particularly, recursive definitions of variables are not as universal in Common Lisp. Scheme can use <code>define</code> to define recursive variables, and it can use <code>letrec</code> to do it locally. Common Lisp can&#8217;t<sup><a href="sicp-section-353#fn5">5</a></sup>. What Common Lisp can do, however, is look at such variables explicitly as functions:</p>


<pre>
(defun integral (integrand initial-value dt)
  (labels (
      (int ()
        (cons-stream 
          initial-value
          (add-streams (scale-stream integrand dt) (int)))))
    (int)))
</pre>

	<p>This works just fine because, if you come to think of it, there isn&#8217;t much of a difference between evaluating a variable for its value and calling a parameter-less function for its return value.</p>


	<p>Now, to the <code>RC</code> circuit:</p>


<pre>
(defun RC (R C dt)
  (labels (
      (rc-model (v0 i-stream)
        (add-streams
          (scale-stream i-stream R)
          (integral
            (scale-stream i-stream (/ 1 C))
            v0
            dt))))
    #'rc-model))
</pre>

	<h4>Exercise 3.74</h4>


	<p>I&#8217;m pretty sure that what is expected as an answer here is:</p>


<pre>
(deflex zero-crossings
  (stream-map 
    #'sign-change-detector 
    sense-data 
    (stream-cdr sense-data)))
</pre>

	<p>However, there is a problem with this function. It is <em>non-causal</em> &#8211; a term in the study of signals and systems which describes functions that foresee future values. For instance, for the stream: <code>(1 2 -5 -6)</code> it produces <code>(0 -1 0 1)</code>. Note the -1 in the result, it comes at an earlier point of time than -5 in the input. This isn&#8217;t a physical system! It would probably be more correct to implement it as:</p>


<pre>
(deflex zero-crossings
  (stream-map 
    #'sign-change-detector 
    (cons-stream 0 sense-data)
    sense-data))
</pre>

	<h4>Exercise 3.75</h4>


	<p>The fallacy in Louis&#8217;s code is using the output values for the averaging. To make it right, the averaging must take only elements of input into account.</p>


<pre>
(defun make-zero-crossings-smoothing (input-stream last-value last-avpt)
  (let ((avpt (/ (+ (stream-car input-stream) last-value) 2)))
    (cons-stream 
      (sign-change-detector avpt last-avpt)
      (make-zero-crossings-smoothing  
        (stream-cdr input-stream)
        (stream-car input-stream)
        avpt))))
</pre>

	<p>Note the clear separation of inputs and outputs here. <code>last-value</code> is only for the inputs, and it is used in the computation of the next <code>avpt</code>. <code>last-avpt</code> keeps track of the outputs for sign change detection.</p>


	<h4>Exercise 3.76</h4>


	<p>Here&#8217;s the smoothing function:</p>


<pre>
(defun smooth (s)
  (stream-map 
    (lambda (x1 x2) (/ (+ x1 x2) 2))
    (cons-stream 0 s)
    s))
</pre>

	<p>It would be most modular to plug it in as follows:</p>


<pre>
(defun make-zero-crossings (in transform)
  (let ((smoothed-in (funcall transform in)))
    (stream-map
      #'sign-change-detector
      (cons-stream 0 smoothed-in)
      smoothed-in)))

(deflex sm-zero-crossings 
  (make-zero-crossings sense-data #'smooth))
</pre>

<img class="align-center" src="../../../images/hline.jpg" style="width: 320px; height: 5px;" />

	<p id="fn1"><sup>1</sup> Defined by the authors in exercise 3.51</p>


	<p id="fn2"><sup>2</sup> <code>deflex</code> is explained <a href="http://eli.thegreenplace.net/2007/10/18/sicp-section-335/">here</a></p>


	<p id="fn3"><sup>3</sup> This is a simplified view of a complex reality. However, I don&#8217;t intend to teach macros here &#8211; there are enough Lisp resources online for that. Macros are a tricky business &#8211; I must confess I don&#8217;t fully master their use myself yet.</p>


	<p id="fn4"><sup>4</sup> This is, of course, the reason for the need to use <code>funcall</code> and <code>#'</code> in Common Lisp, which don&#8217;t exist in Scheme.</p>


	<p id="fn5"><sup>5</sup> Well, not exactly. It works for some extent with <code>defvar</code>, but <code>defvar</code> is actually a macro which bends some of the rules, and works only for &#8220;toplevel&#8221; variables.</p>

    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-section-353';
            var disqus_url = 'http://eli.thegreenplace.net/2007/11/10/sicp-section-353';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-section-353#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>