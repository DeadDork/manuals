<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP section 1.1 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-section-11"
                       rel="bookmark"
                       title="Permalink to SICP section 1.1">
                        SICP section 1.1
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> June 21, 2007 at 05:50</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        This is the first real post in the "SICP reading" series. It refers to section 1.1 of the book, discussing interesting points and solving selected exercises (I'm trying to fully solve all the non-trivial ones).

<h3>Sections 1.1.1 &#8211; 1.1.6</h3>


	<p>This section presents the very basics of Lisp (the Scheme dialect, to be exact). I think that the choice of Lisp for a teaching language can be clearly justified by seeing how short and simple the section is. The basic rules and forms presented here are enough to write very complex Lisp programs.</p>


	<h4>Substitution model for procedure application</h4>


	<p>In order to understand what&#8217;s going under the hood when a Lisp procedure is called, the authors present a simplified model:</p>


	<blockquote>
		<p>To apply a compound procedure to arguments, evaluate the body of the procedure with each formal parameter replaced by the corresponding argument.</p>
	</blockquote>


	<p>This model will work for the first few chapters of the book but later will break done when closures and environments are presented. For now, however, it is a useful tool for mechanical understanding of how Lisp evaluates expressions.</p>


	<h4>Exercise 1.4</h4>


	<p>This is an interesting example of how Common Lisp is different from Scheme. I want to dwell on it here for a moment. The function presented is (Scheme)</p>


<pre>
  (define (a-plus-abs-b a b)
    ((if (&gt; b 0) + -) a b))
</pre>

	<p>The <code>if</code> returns a function, either + or -, according to its argument. The function is then applied to <code>a</code> and <code>b</code>.</p>


	<p>To rewrite it in Common Lisp, we must remember that unlike Scheme, Common Lisp has a separate namespace for functions. Therefore the <code>if</code> must return something CL will recognize as a function, and which will then be <em>explicitly</em> applied to the arguments</p>


<pre>
  (defun a-plus-abs-b (a b)
    (funcall (if (&gt; b 0) #'+ #'-) a b))
</pre>

	<p>The different name and syntax of <code>defun</code> as opposed to <code>define</code> aside, see the usage of <code> #' </code> as function specifiers (meaning &#8220;the following symbol is a function&#8221;) and <code>funcall</code> as an explicit application of the functions.</p>


	<p>By the way, <code> #' </code> is a shorthand for the <code>function</code> special form, so the above can be rewritten in CL as</p>


<pre>
  (defun a-plus-abs-b (a b)
    (funcall (if (&gt; b 0) (function +) (function -)) a b))
</pre>

	<h4>Exercise 1.5</h4>


	<p>The authors presented normal-order evaluation vs. applicative-order evaluation in section 1.1.5. Applicative-order is what Scheme / CL actually use, while normal-order evaluation is a useful tool which is sometimes coded explicitly (and the authors promise to show how in chapters 3 and 4).</p>


	<p>Anyway, the code presented for this exercise is (Scheme):</p>


<pre>
  (define (p) (p))

  (define (test x y)
    (if (= x 0)
        0
        y))

  (test 0 (p))
</pre>

	<p>Obviously, the definition of <code>p</code> is invalid &#8211; calling it calls <code>p</code> again, and so on recursively ad infinitum (a good interpreter will probably catch it as a stack overflow, or infinite recursion).</p>


	<p>So, when the call to <code>test</code> is evaluated in applicative order, its arguments are evaluated first. Hence, <code> (p) </code> is evaluated, and the program fails with an error. However, with normal order evaluation, <code> (p) </code> is not evaluated until it&#8217;s actually needed, which never happens, because the comparison of x with 0 suceeds and the call just
returns 0.</p>


	<h3>Section 1.1.7</h3>


	<p>A very nice quote about the difference between mathematical functions and programming procedures:</p>


	<blockquote>
		<p>The contrast between function and procedure is a reflection of the general distinction between describing properties of things and describing how to do things, or, as it is sometimes referred to, the distinction between declarative knowledge and imperative knowledge. In mathematics we are usually concerned with declarative 
(what is) descriptions, whereas in computer science we are usually concerned with imperative (how to) descriptions.</p>
	</blockquote>


	<h4>Exercise 1.6</h4>


	<p>The normal <code>if</code> form is special &#8211; it evaluates its <code>then-clause</code> part only if the predicate is true, and its <code>else-clause</code> part only if the predicate is false. The <code>new-if</code> function proposed here evaluates both parts, always (applicative-order, remember?). This is easily demonstrated:</p>


<pre>
  (defun new-if (predicate then-clause else-clause)
    (cond (predicate then-clause)
          (t else-clause)))

  (print "new-if:")
  (new-if (= 2 3) (print "yes") (print "no"))

  (print "if:")
  (if (= 2 3) (print "yes") (print "no"))
</pre>

	<p>So when used in <code>sqrt-iter</code>, <code>new-if</code> will cause an infinite loop by repeatedly calling itself, even when the guess is good enough.</p>


	<h4>Exercise 1.7</h4>


	<p>There indeed is a problem with very large and very small numbers in the current implementation. For example, <code> (mysqrt 92400000000000000) </code> fails with a &#8220;program stack overflow&#8221; message, while <code> (mysqrt 0.0005) </code> gives a bad result &#8211; 0.036, instead of the expected 0.022 (Note that I changed the function name to <code>mysqrt</code> in order to avoid a clash with the <code>sqrt</code> built into CL.</p>


	<p>The problem with very small numbers is easy to understand. Since we have an explicit epsilon value in <code>guess</code> &#8211; 0.001, the function will give incorrect results for inputs that approach the epsilon. Consider the 0.005 I used in my example &#8211; the square of 0.022 is 0.00484, which is within 0.001 of 0.005, while 0.022 is 50% smaller than the correct answer 0.036;</p>


	<p>The problem with large numbers is a little more tricky. The square root computations must be performed in floating point arithmetic, which has limited precision in CL systems (on the other hand, integer arithmetic is arbitrarily large). Floating point numbers are usually represented with an exponent and a mantissa, and when the exponent
grows large, the &#8220;quantas&#8221; the number can advance in become large. In our example, after a few iterations the number <code> 3.039737E8 </code> was reached and from there the process entered infinite recursion because <code> (improve 3.039737E8) </code> returns <code> 3.039737E8 </code> itself.</p>


	<p>To solve the problem, we&#8217;ll do as suggested by the authors, and implement <code> good-enough? </code> as a test of how <code>guess</code> changes from one iteration to the next and stop when the change is a very small fraction of the guess. Here is the improved code:</p>


<pre>
  (defun  sqrt-iter (guess x)
    (let ((improved-guess (improve guess x)))
      (if (close-enough? guess improved-guess)
        improved-guess
        (sqrt-iter improved-guess x))))

  (defun improve (guess x)
    (average guess (/ x guess)))

  (defun average (x y)
    (/ (+ x y) 2))

  (defun close-enough? (a b)
    (let ((ratio (/ a b)))
      (and (&lt; ratio 1.001) (&gt; ratio 0.999))))

  (defun square (x)
    (* x x))

  (defun mysqrt (x)
    (sqrt-iter 1.0 x))
</pre>

	<p>Note: I implemented <code>square</code> explicitly because it&#8217;s not built into CL. Also, I&#8217;ve used the <code>let</code> form in this code although it wasn&#8217;t taught in the book yet.</p>


	<p>The <code> good-enough? </code> function was replaced by <code> close-enough? </code> that is used to judge whether two consecutive guesses are close enough to each other. The real improvement here is that this judgement does not rely on some fixed number like 0.001 but rather on a quantity relative to the guess itself. As expected, this new method provides good results for the whole range of numbers, including very small and very large.</p>


	<h4>Exercise 1.8</h4>


	<p>Naturally, the code is similar to exercise 1.7, except for the <code>improve</code> function which follows the formula given in the book:</p>


<pre>
  (defun improve (guess x)
    (/ (+ (/ x (square guess))
          (* 2 guess))
        3)))
</pre>

    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-section-11';
            var disqus_url = 'http://eli.thegreenplace.net/2007/06/21/sicp-section-11';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-section-11#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>