<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP section 2.2.3 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-sections-223"
                       rel="bookmark"
                       title="Permalink to SICP section 2.2.3">
                        SICP section 2.2.3
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> August 22, 2007 at 05:45</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <p>First I&#8217;m going to implement the <code>filter</code> and <code>accumulate</code> functions in CL (although <code>filter</code> is just another name for the CL library function <code>remove-if-not</code> and <code>accumulate</code> can be trivially modeled with <code>reduce</code>):</p>


<pre>
(defun filter (predicate sequence)
  (cond ((null sequence) nil)
        ((funcall predicate (car sequence))
          (cons (car sequence)
                (filter predicate (cdr sequence))))
        (t (filter predicate (cdr sequence)))))

(defun accumulate (op initial sequence)
  (if (null sequence)
    initial
    (funcall op 
      (car sequence)
      (accumulate op initial (cdr sequence)))))
</pre>

	<h4>Exercise 2.33</h4>


<pre>
(defun my-map (p sequence)
  (accumulate 
    (lambda (x y) (cons (funcall p x) y)) 
    nil sequence))

(defun my-append (seq1 seq2)
  (accumulate #'cons seq2 seq1))

(defun my-length (sequence)
  (accumulate (lambda (x y) (1+ y)) 0 sequence))
</pre>

	<h4>Exercise 2.34</h4>


	<p>We can think of this computation as the accumulation of the current coefficient and <code>x</code> multiplied by <em>next</em>, where <em>next</em> is the same operation for a higher coefficient, until the end is reached (read the Horner formula shown in the book from right to left). This easily translates into the code:</p>


<pre>
(defun horner-eval (x coeffs)
  (accumulate
    (lambda (this-coeff higher-terms)
      (+ (* x higher-terms) this-coeff))
    0
    coeffs))
</pre>

	<h4>Exercise 2.35</h4>


	<p>This exercise is an interesting brain-stretcher. The authors show in their template that the last argument to <code>accumulate</code> is a call to <code>map</code>. My solution is different. First of all, it is important to understand that we&#8217;ll need a recursive call to <code>count-leaves</code>. This is always the case for tree recursion &#8211; <code>accumulate</code> itself only goes over a linear sequence, and we need to delve recursively into the tree. This is a good tip that should get us started.</p>


	<p>Now, consider how <code>accumulate</code> works. The <code>lambda</code> it accepts as <code>op</code> has the result of sub-sequence accumulation as its second argument. The first argument is the interesting one, because this is where the real work is done. If <code>x</code> is a leaf (<code>consp</code> returns false), we add 1. If it&#8217;s a node with children, we delve recursively (think of the original implementation of <code>count-leaves</code>).</p>


<pre>
(defun count-leaves (tree)
  (accumulate 
    (lambda (x y)
      (+  y
          (if (consp x)
            (count-leaves x)
            1)))
    0
    tree))
</pre>

	<h4>Exercise 2.36</h4>


<pre>
(defun accumulate-n (op init seqs)
  (if (null (car seqs))
    nil
    (cons (accumulate op init (mapcar #'car seqs))
          (accumulate-n op init (mapcar #'cdr seqs)))))
</pre>

	<h4>Exercise 2.37</h4>


<pre>
(defun dot-product (v w)
  (accumulate #'+ 0 (mapcar #'* v w)))

(defun matrix-*-vector (m v)
  (mapcar 
    (lambda (row)
      (dot-product row v))
    m))

(defun transpose (m)
  (accumulate-n #'cons nil m))

(defun matrix-*-matrix (m n)
  (let ((n-t (transpose n)))
    (mapcar (lambda (row) (matrix-*-vector n-t row)) m)))
</pre>

	<h4>Exercise 2.38</h4>


	<p>First let&#8217;s rewrite <code>accumulate</code> as <code>fold-right</code> and add the definition of <code>fold-left</code>:</p>


<pre>
(defun fold-right (op init seq)
  (if (null seq)
    init
    (funcall op 
      (car seq)
      (fold-right op init (cdr seq)))))

(defun fold-left (op init seq)
  (labels (
    (iter (result rest)
      (if (null rest)
        result
        (iter (funcall op result (car rest))
              (cdr rest)))))
    (iter init seq)))
</pre>

	<p>Note that for simple operations like addition, the two produce equivalent results:</p>


<pre>
(fold-right #'* 1 '(1 2 3 4 5))
=&gt; 120
(fold-left #'* 1 '(1 2 3 4 5))
=&gt; 120
</pre>

	<p>But for the examples asked about in the exercise:</p>


<pre>
(fold-right #'/ 1 '(1 2 3))
=&gt; 3/2
(fold-left #'/ 1 '(1 2 3))
=&gt; 1/6

(fold-right #'list nil '(1 2 3))
=&gt; (1 (2 (3 NIL))) 
(fold-left #'list nil '(1 2 3))
=&gt; (((NIL 1) 2) 3)
</pre>

	<p><code>fold-right</code> and <code>fold-left</code> will produce the same results if <code>op</code> is an <a href="http://en.wikipedia.org/wiki/Associativity">associative operation</a>.</p>


	<h4>Exercise 2.39</h4>


<pre>
(defun reverse-r (seq)
  (fold-right (lambda (x y) (append y (list x))) nil seq))

(defun reverse-l (seq)
  (fold-left (lambda (x y) (cons y x)) nil seq))
</pre>

	<h4>Exercise 2.40</h4>


	<p>Here is the scaffolding for this and the following exercises:</p>


<pre>
(defun enumerate-interval (low high)
  (if (&gt; low high)
    nil
    (cons low (enumerate-interval (1+ low) high))))

(defun flatmap (proc seq)
  (accumulate #'append nil (mapcar proc seq)))

(defun sum (lst)
  (accumulate #'+ 0 lst))

(defun prime-sum? (pair)
  (prime? (sum pair)))

(defun make-pair-sum (pair)
  (list (car pair) (cadr pair) (sum pair)))
</pre>

	<p>The solution for the exercise is:</p>


<pre>
(defun unique-pairs (n)
  (flatmap 
    (lambda (i)
      (mapcar (lambda (j) (list i j))
              (enumerate-interval 1 (1- i))))
    (enumerate-interval 1 n)))

(defun prime-sum-pairs (n)
  (mapcar 
    #'make-pair-sum
    (filter #'prime-sum? (unique-pairs n))))
</pre>

	<h4>Exercise 2.41</h4>


<pre>
(defun unique-triples (n)
  "Unique triples of numbers &lt;= n" 
  (flatmap 
    (lambda (i)
      (flatmap
        (lambda (j)
          (mapcar 
            (lambda (k) (list i j k))
            (enumerate-interval 1 (1- j))))
        (enumerate-interval 1 (1- i))))
    (enumerate-interval 1 n)))

(defun triples-sum-s (s n)
  "Triples of numbers &lt;= n summing to s" 
  (filter 
    (lambda (triple) 
      (= (sum triple) s))
    (unique-triples n)))
</pre>

	<h4>Exercise 2.42</h4>


	<p>A single position is defined by a row and a column:</p>


<pre>
(defun make-position (row col)
  (cons row col))

(defun position-row (pos)
  (car pos))

(defun position-col (pos)
  (cdr pos))

(defun positions-equal (a b)
  (equal a b))
</pre>

	<p>A set of positions is just a list of position objects:</p>


<pre>
(defvar empty-board '())

(defun adjoin-position (row col positions)
  (append positions (list (make-position row col))))
</pre>

	<p>Note how <code>adjoin-position</code> is implemented: in order to append the new position to the list&#8217;s end, I use <code>append</code>. But <code>append</code> expects lists as its argument, so the new position is wrapped in a call to <code>list</code>. There must be a more elegant way to do this :-)</p>


	<p>And this is the implementation of <code>safe?</code> and its helper function <code>attacks?</code>:</p>


<pre>
(defun attacks? (a b)
  "Both a and b are positions. This function
  checks if a queen in position a attacks the
  queen in position b." 
  (let ((a-row (position-row a))
        (a-col (position-col a))
        (b-row (position-row b))
        (b-col (position-col b)))
    (cond
      ((= a-row b-row) t) ; row attack
      ((= a-col b-col) t) ; column attack
      ((= (abs (- a-col b-col)) ; diagonal attack
          (abs (- a-row b-row))) t)
      (t nil))))

(defun safe? (k positions)
  "Is the queen in the kth column safe with
  respect to the queens in columns 1..k-1?" 
  (let ((kth-pos (nth (1- k) positions)))
    (if (null (find-if 
                (lambda (pos)
                  (and  (not (positions-equal kth-pos pos))
                        (attacks? kth-pos pos)))
                positions)) 
        t
        nil)))
</pre>

	<p>To complete the picture, this is <code>queens</code> translated to CL:</p>


<pre>
(defun queens (board-size)  
    (queen-cols board-size board-size))

(defun queen-cols (k board-size)
  (if (= k 0)
    (list empty-board)
    (filter
      (lambda (positions) (safe? k positions))
      (flatmap 
        (lambda (rest-of-queens)
          (mapcar 
            (lambda (new-row)
              (adjoin-position new-row k rest-of-queens))
            (enumerate-interval 1 board-size)))
        (queen-cols (1- k) board-size)))))
</pre>

	<p>I tested this implementation and it works correctly for boards with size &lt; 8. However, for board size 8 and higher, <span class="caps">CLISP</span> reports a stack overflow. When I traced <code>queen-cols</code> to see what the problem is, it appeared that the lists returned by <code>queen-cols</code> are very large. Since they are probably returned by value on the stack, this is what causes the overflow. I tried to increase <span class="caps">CLISP</span>&#8217;s memory consumption parameter, but it doesn&#8217;t help. It is apparently possible to do some more serious tweaking with <span class="caps">CLISP</span>&#8217;s stack size allocation, but it&#8217;s far from trivial. Seems like an annoying limitation in <span class="caps">CLISP</span> (imagine that this code ran without problems in the environment the authors used 25 years ago!).</p>


	<p>When I tried it on <span class="caps">SBCL</span> running on Linux (Ubuntu 7), it worked without problems and generated correct solutions for board size 8.</p>


	<h4>Exercise 2.43</h4>


	<p>Here is Louis Reasoner&#8217;s version of <code>queens</code>:</p>


<pre>
(defun louis-queens (board-size)
  (louis-queen-cols board-size board-size))

(defun louis-queen-cols (k board-size)
  (if (= k 0)
    (list empty-board)
    (filter
      (lambda (positions) (safe? k positions))
      (flatmap 
        (lambda (new-row)
          (mapcar 
            (lambda (rest-of-queens)
              (adjoin-position new-row k rest-of-queens))
            (louis-queen-cols (1- k) board-size)))
        (enumerate-interval 1 board-size)))))
</pre>

	<p>Since the recursive call to <code>queen-cols</code> is a costly operation in terms of time, Louis&#8217;s implementation looks suspicious just for the fact that it places it inside another loop<sup><a href="sicp-sections-223#fn1">1</a></sup>. Let&#8217;s analyze it a little further:</p>


	<p>The &#8220;normal&#8221; implementation takes the result of <code>queen-cols</code> for one column less, and for each position in the list attaches all the possible placements of the new queen. These new sets of positions are then filtered by <code>safe?</code>.</p>


	<p>Louis&#8217;s implementation, on the other hand, does it in a different order, which is crucial. For each new possible position, it re-generates the result of <code>queen-cols</code> for one column less, and attaches the new position to it. Note that the call to <code>louis-queen-cols</code> doesn&#8217;t need the &#8220;loop variable&#8221; <code>new-row</code>, and hence it&#8217;s quite clear that placing it in the inner loop is needless<sup><a href="sicp-sections-223#fn2">2</a></sup>.</p>


	<p>Runtime analysis: <code>queen-cols</code> calls itself only once per execution. Therefore, for some board size <code>N</code>, <code>queen-cols</code> is called <code>N+1</code> times (the call with <code>N=0</code> returns immediately, though).</p>


	<p><code>louis-queen-cols</code>, however, calls itself <code>board-size</code> times per execution. But this continues recursively, because each <code>louis-queen-cols</code> called calls itself <code>board-size</code> times too. So the call tree is N-nary, each node has N children. The tree is N levels deep, so the total amount of nodes (calls) in it is <code>O(N^N)</code>. To find the ratio between it and the original <code>queen-cols</code>, we divide: <code>O(N^N) / N+1 = O(N^N)</code>. Therefore, asymptotically <code>louis-queen-cols</code> is <code>O(N^N)</code> times slower.</p>

	<p id="fn1"><sup>1</sup> Think of <code>filter</code>, <code>flatmap</code> and <code>mapcar</code> as loops, since they are sequence functions.</p>


	<p id="fn2"><sup>2</sup> To be completely fair, neither does the call to <code>enumerate-interval</code> in the inner loop of <code>queen-cols</code> use the loop variable. We can actually precompute the list returned by <code>(enumerate-interval 1 board-size)</code> and use it in each iteration. However, since <code>enumerate-interval</code> is very fast, the speed gain won&#8217;t be too significant.</p>

    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-sections-223';
            var disqus_url = 'http://eli.thegreenplace.net/2007/08/22/sicp-sections-223';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-sections-223#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>