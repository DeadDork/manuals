<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP section 2.2.2 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-section-222"
                       rel="bookmark"
                       title="Permalink to SICP section 2.2.2">
                        SICP section 2.2.2
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> August 10, 2007 at 08:34</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <p>Tree-recursion, yay !</p>


	<h4>Exercise 2.24</h4>


	<p>The interpretation is <code>(1 (2 (3 4)))</code>. I&#8217;ll skip the drawings because they&#8217;re too time consuming for such a simple exercise.</p>


	<h4>Exercise 2.25</h4>


<pre>
[22]&gt; (setf lst '(1 3 (5 7) 9))
(1 3 (5 7) 9)
[23]&gt; (car (cdr (car (cdr (cdr lst)))))
7

[24]&gt; (setf lst '((7)))
((7))
[25]&gt; (car (car lst))
7

[37]&gt; (setf lst '(1 (2 (3 (4 (5 (6 7)))))))
(1 (2 (3 (4 (5 (6 7))))))
[38]&gt; (cadr (cadr (cadr (cadr (cadr (cadr lst))))))
7
</pre>

	<p>The last one is tricky, because <code>cdr</code> returns a list, so I use <code>cadr</code> (<code>car</code> of <code>cdr</code>) instead to get inside the lists.</p>


	<h4>Exercise 2.26</h4>


<pre>
[39]&gt; (setf x '(1 2 3))
(1 2 3)
[40]&gt; (setf y '(4 5 6))
(4 5 6)
[41]&gt; (append x y)
(1 2 3 4 5 6)
[42]&gt; (cons x y)
((1 2 3) 4 5 6)
[43]&gt; (list x y)
((1 2 3) (4 5 6))
</pre>

	<h4>Exercise 2.27</h4>


	<p>Similarly to <code>count-leaves</code>, we must differentiate between three cases:</p>


	<p>1. nil
2. pair
3. not pair (atom)</p>


	<p>The CL function for checking if something is a pair is <code>consp</code>[1]:</p>


<pre>
(defun deep-reverse (lst)
  (cond ((null lst) nil)
        ((consp (car lst))
          (append
            (deep-reverse (cdr lst))
            (list (deep-reverse (car lst))))) ; [A]
        (t 
          (append 
            (deep-reverse (cdr lst))
            (list (car lst))))))
</pre>

	<p>Take a look at the line marked with [A]. The call to <code>list</code> is very important here, because otherwise <code>append</code> just stitches the contents of the list <code>deep-reverse</code> returns. <code>list</code> makes it append them as a single list, which is what we need.</p>


	<h4>Exercise 2.28</h4>


<pre>
(defun fringe (lst)
  (cond ((null lst) nil)
        ((not (consp lst)) (list lst))
        (t
          (append 
            (fringe (car lst))
            (fringe (cdr lst))))))
</pre>

	<h4>Exercise 2.29</h4>


	<p><strong>a.</strong></p>


<pre>
(defun make-mobile (left right)
  (list left right))

(defun left-branch (mobile)
  (first mobile))

(defun right-branch (mobile)
  (second mobile))

(defun make-branch (len structure)
  (list len structure))

(defun branch-len (branch)
  (first branch))

(defun branch-structure (branch)
  (second branch))
</pre>

	<p>I&#8217;m using CL&#8217;s convenience accessors for lists. <code>first</code> is equivalend to <code>car</code>, <code>second</code> to <code>cadr</code> (the <code>car</code> of the <code>cdr</code>). CL supports such accessors up to <code>tenth</code>, together with the generic accessor <code>nth</code>.</p>


	<p><strong>b.</strong></p>


	<p>I&#8217;m adding another abstraction &#8211; the predicate <code>structure-is-weight?</code>.</p>


<pre>
(defun structure-is-weight? (structure)
  (atom structure))

(defun weight-of-branch (branch)
  (let ((struct (branch-structure branch)))
    (if (structure-is-weight? struct)
      struct
      (weight-of-mobile struct))))

(defun weight-of-mobile (mobile)
  (+  (weight-of-branch (left-branch mobile))
      (weight-of-branch (right-branch mobile))))
</pre>

	<p>Note how <code>weight-of-mobile</code> and <code>weight-of-branch</code> are defined. These are mutually recursive functions. Defining them this way makes for a very natural code, <span class="caps">IMO</span>.</p>


	<p><strong>c.</strong></p>


	<p>I&#8217;m going to use the same technique (mutually recursive functions) to figure out whether a given mobile is balanced:</p>


<pre>
(defun torque-of-branch (branch)
  (*  (branch-len branch)
      (weight-of-branch branch)))

(defun branch-balanced? (branch)
  "A branch is balanced either when it has a structure
  that's a simple weight, or when the structure is 
  a balanced mobile" 
  (let ((struct (branch-structure branch)))
    (or
      (structure-is-weight? struct)
      (mobile-balanced? struct))))

(defun mobile-balanced? (mobile)
  (let ((lb (left-branch mobile))
        (rb (right-branch mobile)))
    (and
      (= 
        (torque-of-branch lb)
        (torque-of-branch rb))
      (branch-balanced? lb)
      (branch-balanced? rb))))
</pre>

	<p>Note the <em>documentation string</em> added to <code>branch-balanced?</code>. It is a standartized feature of Common Lisp, allowing me to find out what a function does from the <span class="caps">REPL</span>:</p>


<pre>
[5]&gt; (documentation  'branch-balanced? 'function)
"A branch is balanced either when it has a structure
  that's a simple weight, or when the structure is
  a balanced mobile" 
[6]&gt;
</pre>

	<p><strong>d.</strong></p>


	<p>I only need to change the accessors <code>left-branch, right-branch, branch-len, branch-structure</code> and the predicate <code>structure-is-weight?</code>. The rest of the code builds on top of the abstraction created by these functions and doesn&#8217;t need to be changed.</p>


	<h4>Exercise 2.30</h4>


<pre>
(defun square-tree-direct (tree)
  (cond ((null tree) nil)
        ((not (consp tree)) (square tree))
        (t
          (cons (square-tree-direct (car tree))
                (square-tree-direct (cdr tree))))))

(defun square-tree-map (tree)
  (mapcar 
    (lambda (subtree)
      (if (consp subtree)
        (square-tree-map subtree)
        (square subtree)))
    tree))
</pre>

	<h4>Exercise 2.31</h4>


<pre>
(defun tree-map (func tree)
  (mapcar 
    (lambda (subtree)
      (if (consp subtree)
        (tree-map func subtree)
        (funcall func subtree)))
    tree))
</pre>

	<h4>Exercise 2.32</h4>


	<p>In set theory, the set of all subsets of some set S is called the <em>powerset</em> of S. So I&#8217;m naming the function accordingly. This is a piece of completely futile mathematical pedantry :-)</p>


<pre>
(defun powerset (s)
  (if (null s)
    (list nil)
    (let ((rest (powerset (cdr s))))
      (append 
        rest 
        (mapcar (lambda (r) 
                  (cons (car s) r)) 
                rest)))))
</pre>

	<p>To understand why this works, let&#8217;s do the most natural thing and &#8220;walk over&#8221; the code mentally. So, the powerset of S is <code>nil</code> if S itself is <code>nil</code>. This is trivial. But what happens when S is a list ?</p>


	<p>Well, it is somewhat similar to change counting from the previous sections. We &#8220;pick up&#8221; the first element of the list and concatenate two sets:</p>


	<p>1. The powerset of all the elements without the first.
2. The powerset of all the elements without the first, with the first element prepended to each subset.</p>


	<p>Consider the set <code>(1)</code>. Its powerset is <code>(nil (1))</code>. Now, consider the larger set <code>(2 1)</code>. According to the procedure above, its powerset is the concatenation of:</p>


	<p>1. The powerset of all the elements without 2, that is <code>(1)</code>. Which we already saw is <code>(nil (1))</code>.
2. The element 2 prepended to each subset of the powerset of <code>(1)</code>, that is, 2 prepended to <code>nil</code> and 2 prepended to <code>(1)</code>, in total: <code>((2) (2 1))</code></p>


	<p>Concatenating the above two gives: <code>(nil (1) (2) (1 2))</code>, which is indeed the powerset of <code>(2 1)</code>. Using the same reasoning, we can compute the powerset of <code>(3 2 1)</code>. I hope it is clear by now why the procedure is correct.</p>


<pre>
</pre>

<pre>
</pre>

	<p id="fn1"><sup>1</sup> The convention of CL is to use the ending <code>p</code> for predicates, although it&#8217;s not too consistent &#8211; consider the predicates <code>null</code> and <code>atom</code>, for example. Personally I prefer Scheme&#8217;s idiom of ending a predicate with a question sign.</p>

    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-section-222';
            var disqus_url = 'http://eli.thegreenplace.net/2007/08/10/sicp-section-222';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-section-222#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>