<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP section 3.3.5 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-section-335"
                       rel="bookmark"
                       title="Permalink to SICP section 3.3.5">
                        SICP section 3.3.5
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> October 18, 2007 at 06:18</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <p>Similarly to the previous section, I&#8217;m going to implement the objects using <span class="caps">CLOS</span> classes and generic methods.</p>


	<p>First, the connector:</p>


<pre>
(defclass connector ()
  ( (value 
      :initform nil
      :accessor value
      :documentation
        "Current value of the connector")
    (informant
      :initform nil
      :accessor informant
      :documentation
        "The object that set the connector's value")
    (constraints
      :initform '()
      :accessor constraints
      :documentation
        "The constraints in which the connector
        participages")))

(defun make-connector ()
  (make-instance 'connector))

(defmethod has-value? ((c connector))
  (if (informant c)
    t
    '()))

(defmethod set-value! ((c connector) newval setter)
  (cond ((not (has-value? c))
          (setf (value c) newval)
          (setf (informant c) setter)
          (for-each-except 
            setter
            #'process-new-value
            (constraints c)))
        ((not (= (value c) newval))
          (error "Contradiction" 
            (list (value c) newval)))))

(defmethod forget-value! ((c connector) retractor)
  (when (eq retractor (informant c))
    (setf (informant c) nil)
    (for-each-except
      retractor
      #'process-forget-value
      (constraints c))))

(defmethod connect ((c connector) new-constraint)
  (if (not (member new-constraint (constraints c)))
    (push new-constraint (constraints c)))
  (if (has-value? c)
    (process-new-value new-constraint)))

(defun for-each-except (exception proc seq)
  (dolist (obj seq)
    (unless (eq obj exception)
      (funcall proc obj))))

(defmacro with-connectors ((&#38;rest names) &#38;body body)
  `(let ,(loop for n in names collect `(,n (make-connector)))
    ,@body))
</pre>

	<p>This is just a simple class with some methods. Note the <code>with-connectors</code> macro that will help us write complex constraint blocks with less repetitive typing. We&#8217;ll see its use shortly.</p>


	<p>As for the constraints, we&#8217;ll going to use a little more of <span class="caps">CLOS</span>&#8217;s power by actually employing the dispatching of generic methods. First, here are the two methods our constraints must implement:</p>


<pre>
(defgeneric process-new-value (constraint)
  (:documentation 
    "Called when one of the connectors attached to
    this constraint has a new value"))

(defgeneric process-forget-value (constraint)
  (:documentation 
    "Ask the attached connectors to forget their values"))
</pre>

	<p>Now, we can write our constraint classes and methods that implement these generics. In contrast to C++ and Java, these classes don&#8217;t have to be siblings. In fact, they can be any classes at all as long as they implement these two methods. Such approach has been recently brought to fame by Ruby, and it&#8217;s called <em>duck typing</em>. Here are the adder and multipler constraints, which are actually quite similar:</p>


<pre>
(defclass adder-constraint () 
  ( (a1 
      :accessor a1
      :initarg :a1
      :documentation "First addend")
    (a2 
      :accessor a2
      :initarg :a2
      :documentation "Second addend")
    (sum 
      :accessor sum
      :initarg :sum
      :documentation "Sum of addends")))

(defun adder (a1 a2 sum)
  (let ((cs (make-instance 
              'adder-constraint 
              :a1 a1 :a2 a2 :sum sum)))
    (connect a1 cs)
    (connect a2 cs)
    (connect sum cs)
    cs))

(defmethod process-new-value ((cs adder-constraint))
  (with-accessors ((a1 a1) (a2 a2) (sum sum)) cs
    (cond ((and (has-value? a1) (has-value? a2))
            (set-value! sum
                        (+ (value a1) (value a2))
                        cs))
          ((and (has-value? a1) (has-value? sum))
            (set-value! a2
                        (- (value sum) (value a1))
                        cs))
          ((and (has-value? a2) (has-value? sum))
            (set-value! a1
                        (- (value sum) (value a2))
                        cs)))))

(defmethod process-forget-value ((cs adder-constraint))
  (forget-value! (a1 cs) cs)
  (forget-value! (a2 cs) cs)
  (forget-value! (sum cs) cs)
  (process-new-value cs))

(defclass multiplier-constraint () 
  ( (m1 
      :accessor m1
      :initarg :m1
      :documentation "First multiplicand")
    (m2 
      :accessor m2
      :initarg :m2
      :documentation "Second multiplicand")
    (product 
      :accessor product
      :initarg :product
      :documentation "Product of multiplicands")))

(defun multiplier (m1 m2 product)
  (let ((cs (make-instance 
              'multiplier-constraint 
              :m1 m1 :m2 m2 :product product)))
    (connect m1 cs)
    (connect m2 cs)
    (connect product cs)
    cs))

(defmethod process-new-value ((cs multiplier-constraint))
  (with-accessors ((m1 m1) (m2 m2) (product product)) cs
    (cond ((or  (and (has-value? m1) (= (value m1) 0))
                (and (has-value? m2) (= (value m2) 0)))
            (set-value! product 0 cs))
          ((and (has-value? m1) (has-value? m2))
            (set-value! product
                        (* (value m1) (value m2)) cs))
          ((and (has-value? product) (has-value? m1))
            (set-value! m2
                        (/ (value product) (value m1) cs)))
          ((and (has-value? product) (has-value? m2))
            (set-value! m1
                        (/ (value product) (value m2)) cs)))))

(defmethod process-forget-value ((cs multiplier-constraint))
  (forget-value! (m1 cs) cs)
  (forget-value! (m2 cs) cs)
  (forget-value! (product cs) cs)
  (process-new-value cs))
</pre>

	<p>I suppose these do could be abstracted in some way by a generic &#8220;binary operation&#8221; constraint. This will be left as an exercise to the reader.</p>


	<p>The following two constrains are, in fact, quite different. But they still implement the two methods, so they are lawful constraints as far as we&#8217;re concerned:</p>


<pre>
(defclass constant-constraint () ())

(defun constant (value connector)
  (let ((cs (make-instance 'constant-constraint)))
    (connect connector cs)
    (set-value! connector value cs)
    cs))

(defmethod process-new-value ((cs constant-constraint))
  (error "Unable to set new value for CONSTANT"))

(defmethod process-forget-value ((cs constant-constraint))
  (error "Unable to forget a value for CONSTANT"))

(defclass probe-constraint () 
  ( (name :initarg :name :accessor name)
    (connector :initarg :connector :accessor connector)))

(defun probe (name connector)
  (let ((cs (make-instance 
              'probe-constraint 
              :name name
              :connector connector)))
    (connect connector cs)
    cs))

(defmethod print-probe ((cs probe-constraint) value)
  (format t "~%Probe: ~a = ~a" (name cs) value))

(defmethod process-new-value ((cs probe-constraint))
  (print-probe cs (value (connector cs))))

(defmethod process-forget-value ((cs probe-constraint))
  (print-probe cs "?"))
</pre>

	<p>Here&#8217;s a sample code that demonstrates how these are used (note the usage of <code>with-connectors</code> in <code>celsius-fahrenheit-converter</code>):</p>


<pre>
(defun celsius-fahrenheit-converter (c f)
  (with-connectors (u v w x y)
    (multiplier c w u)
    (multiplier v x u)
    (adder v y f)
    (constant 9 w)
    (constant 5 x)
    (constant 32 y)
    'ok))

(deflex c (make-connector))
(deflex f (make-connector))
(celsius-fahrenheit-converter c f)

(probe "Celsius temp" C)
(probe "Fahrenheit temp" F)

(set-value! C 25 'user)
(forget-value! C 'user)

(set-value! F 212 'user)
</pre>

	<p>This prints:</p>


<pre>
Probe: Celsius temp = 25
Probe: Fahrenheit temp = 77
Probe: Celsius temp = ?
Probe: Fahrenheit temp = ?
Probe: Fahrenheit temp = 212
Probe: Celsius temp = 100
</pre>

	<p>Note my usage of <code>deflex</code>. It is a macro for defining lexical variables in the global environment. I became painfully disillusioned with the functioning of <code>defvar</code> in interpreted code (run by <span class="caps">CLISP</span>) &#8211; its behavior contains non trivial gotchas caused by the dynamic scope. <code>deflex</code> is a useful macro I picked from comp.lang.lisp, it does the same work for me and behaves in a more expected way:</p>


<pre>
(defmacro deflex (var val &#38;optional (doc nil docp))    
  "Define a top level (global) lexical VAR with
  initial value VAL, which is assigned 
  unconditionally as with DEFPARAMETER. If a DOC
  string is provided, it is attached to both the 
  name |VAR| and the name *STORAGE-FOR-DEFLEX-VAR-|VAR|* 
  as a documentation string of kind 'VARIABLE. 
  The new VAR will have lexical scope and thus may be
  shadowed by LET bindings without affecting its 
  dynamic (global) value." 
  (let* ((s0 (symbol-name '#:*storage-for-deflex-var-))
         (s1 (symbol-name var))
         (s2 (symbol-name '#:*))
         (s3 (symbol-package var))
         (backing-var 
          (intern (concatenate 'string s0 s1 s2) s3)))
    ; Note: The DEFINE-SYMBOL-MACRO must be the last 
    ; thing we do so that the value of the form is the 
    ; symbol VAR.
    ; (print (concatenate 'string s0 s1 s2))
    (if docp
      `(progn
         (defparameter ,backing-var ,val ,doc)
         (setf (documentation ',var 'variable) ,doc)
         (define-symbol-macro ,var ,backing-var))
      `(progn
         (defparameter ,backing-var ,val)
         (define-symbol-macro ,var ,backing-var))))) 
</pre>

	<h4>Exercise 3.33</h4>


<pre>
(defun averager (a b c)
  (with-connectors (half sum)
    (constant 0.5 half)
    (adder a b sum)
    (multiplier half sum c)
    'ok))
</pre>

	<h4>Exercise 3.34</h4>


	<p>The simplest incarnation of the flaw can be demonstrated thus:</p>


<pre>
(with-connectors (a b)
  (probe "a" a)
  (probe "b" b)
  (squarer a b)
  (set-value! b 64 'user))
</pre>

	<p>This prints only:</p>


<pre>
Probe: b = 64
</pre>

	<p>Why ? Look at the way <code>process-new-value</code> for <code>multiplier</code> is implemented. It expects to see values set for two of its terminals, and computes the third. But in the example above, only one of the three terminals is set. Sure, the other two terminals can be considered equivalent, but the multiplier constraint has no idea about this. It sees that only one terminal is set and doesn&#8217;t compute the others, because as far as it&#8217;s concerns, the data is incomplete.</p>


	<h4>Exercise 3.35</h4>


<pre>
(defclass squarer-constraint ()
  ( (root 
      :accessor root
      :initarg :root
      :documentation "The square root site")
    (sq 
      :accessor sq
      :initarg :sq
      :documentation "The square side")))

(defun squarer (root sq)
  (let ((cs (make-instance 
              'squarer-constraint
              :root root :sq sq)))
    (connect root cs)
    (connect sq cs)
    cs))

(defmethod process-new-value ((cs squarer-constraint))
  (with-accessors ((root root) (sq sq)) cs
    (if (has-value? sq) 
      (if (&lt; (value sq) 0)
        (error "square less than 0 -- SQUARER" 
          (value sq))
        (set-value! root (sqrt (value sq)) cs))
      (when (has-value? root)
        (set-value! sq (square (value root)) cs)))))

(defmethod process-forget-value ((cs squarer-constraint))
  (forget-value! (sq cs) cs)
  (forget-value! (root cs) cs)
  (process-new-value cs))
</pre>

	<h4>Exercise 3.36</h4>


	<p>Obviously the env diagram wouldn&#8217;t be too relevant with my implementation, because the <span class="caps">CLOS</span> objects hide all the details of closures holding data.</p>


	<h4>Exercise 3.37</h4>


<pre>
(defun cv (val)
  (with-connectors (c)
    (constant val c)
    c))

(defun c+ (x y)
  (with-connectors (z)
    (adder x y z)
    z))

(defun c- (x y)
  (with-connectors (z)
    (adder z y x)
    z))

(defun c* (x y)
  (with-connectors (z)
    (multiplier x y z)
    z))

(defun c/ (x y)
  (with-connectors (z)
    (multiplier z y x)
    z))

(defun celsius-fahrenheit-converter2 (x)
  (c+ (c* (c/ (cv 9) (cv 5))
          x)
      (cv 32)))
</pre>


    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-section-335';
            var disqus_url = 'http://eli.thegreenplace.net/2007/10/18/sicp-section-335';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-section-335#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>