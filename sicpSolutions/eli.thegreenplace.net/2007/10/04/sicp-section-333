<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP section 3.3.3 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-section-333"
                       rel="bookmark"
                       title="Permalink to SICP section 3.3.3">
                        SICP section 3.3.3
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> October 04, 2007 at 12:58</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <p>The code for this section is in Common Lisp.</p>


	<p>The <code>assoc</code> function the authors define exists in Common Lisp, and the one-dimensional table presented here is called an <em>association list</em>, or <em>alist</em>.</p>


	<p>Here&#8217;s a sample session:</p>


<pre>
[11]&gt; (defvar tbl '((a . 1) (b . 2) (c . 3)))
TBL
[12]&gt; (assoc 'c tbl)
(C . 3)
[13]&gt; (assoc 'd tbl)
NIL
[14]&gt; (assoc 'c tbl :test #'equalp)
(C . 3)
</pre>

	<p>As the last line shows, <code>assoc</code> accepts a test function as an argument (it uses <code>eql</code> by default).</p>


	<h4>Exercise 3.24</h4>


	<p>I&#8217;ll use the idiomatic CL way of keyword arguments to set <code>same-key?</code>. Keyword arguments are a very useful feature CL supports out-of-the-box.</p>


<pre>
(defun make-table (&#38;key (same-key? #'eql))
  (let ((local-table (list '*table*)))
    (labels (
      (tassoc (key table)
        (assoc key table :test same-key?))

      (lookup (key-1 key-2)
        (let ((subtable (tassoc key-1 (cdr local-table))))
          (if subtable
            (let ((record (tassoc key-2 (cdr subtable))))
              (if record
                (cdr record)
                nil))
            nil)))

      (insert! (key-1 key-2 val)
        (let ((subtable (tassoc key-1 (cdr local-table))))
          (if subtable
            (let ((record (tassoc key-2 (cdr subtable))))
              (if record
                (setf (cdr record) val)
                (setf (cdr subtable)
                      (cons (cons key-2 val)
                            (cdr subtable)))))
            (setf (cdr local-table)
                  (cons (list key-1
                              (cons key-2 val))
                        (cdr local-table)))))
        'ok)

      (dispatch (m)
        (case m
          ('lookup-proc #'lookup)
          ('insert-proc! #'insert!)
          (otherwise (error "Bad dispatch ~a" m)))))

      #'dispatch)))

(defvar operation-table (make-table :same-key? #'equal))

(defvar get (funcall operation-table 'lookup-proc))
(defvar put (funcall operation-table 'insert-proc!))
</pre>

	<p>Here&#8217;s sample usage:</p>


<pre>
(funcall put 'x 'y 12)
=&gt; OK
(funcall get 'x 'y)
=&gt; 12
</pre>

	<h4>Exercise 3.25</h4>


	<p>One simple and effective way to achieve this is to use a list as the key. You&#8217;ll also need to pass in an equality predicate that knows how to compare lists, for example <code>equal</code>.</p>


	<h4>Exercise 3.26</h4>


	<p>I&#8217;ll use the binary tree representation that was presented for sets in section 2.3.3 of the book. In the solution of exercise 2.66 I&#8217;ve already implemented a lookup, so what&#8217;s left is to package it all in a &#8220;local table&#8221; and add the insertion function.</p>


<pre>
; Generic binary tree
;
(defun make-tree (entry left right)
  (list entry left right))

(defun make-leaf (entry)
  (list entry nil nil))

(defun entry (tree) 
  (car tree))

(defun set-entry! (tree ent) 
  (setf (car tree) ent))

(defun left-branch (tree) 
  (cadr tree))

(defun set-left-branch! (tree lb)
  (setf (cadr tree) lb))

(defun right-branch (tree) 
  (caddr tree))

(defun set-right-branch! (tree lb)
  (setf (caddr tree) lb))

; Records
;
(defun make-record (key data)
  (list key data))

(defun key (record)
  (car record))

(defun data (record)
  (cadr record))

; Table implemented as a binary tree
;
(defun make-table (&#38;key (&lt;? #'&lt;))
  (let ((local-table (cons '*head* nil)))
    (labels (
      (tree-root ()
        (cdr local-table))

      (set-tree-root! (node)
        (setf (cdr local-table) node))

      (node-lookup (key node)
        (if (null node)
          nil
          (let*  ((cur-entry (entry node))
                  (cur-key (key cur-entry)))
            (cond ((funcall &lt;? key cur-key)
                    (node-lookup 
                      key
                      (left-branch node)))
                  ((funcall &lt;? cur-key key)
                    (node-lookup
                      key
                      (right-branch node)))
                  (t ; equal
                    cur-entry)))))

      (lookup (key)
        (node-lookup key (cdr local-table)))

      (node-insert (key data node)
        (let*  ((cur-entry (entry node))
                (cur-key (key cur-entry)))
          (cond ((funcall &lt;? key cur-key)
                  (if (null (left-branch node))
                    (set-left-branch! 
                      node
                      (make-leaf 
                        (make-record key data)))
                    (node-insert
                      key data (left-branch node))))
                ((funcall &lt;? cur-key key)
                  (if (null (right-branch node))
                    (set-right-branch! 
                      node
                      (make-leaf 
                        (make-record key data)))
                    (node-insert
                      key data (right-branch node))))
                (t ; equal
                  (set-entry! 
                    node (make-record key data))))))

      (insert! (key data)
        (if (null (tree-root))
          (set-tree-root! 
            (make-leaf (make-record key data)))
          (node-insert key data (tree-root))))

      (dispatch (m)
        (case m
          ('lookup-proc #'lookup)
          ('insert-proc! #'insert!)
          (otherwise (error "Bad dispatch ~a" m)))))

      #'dispatch)))
</pre>

	<p>Note the usage of a generic <em>less than</em> operator. This is an accepted technique which is used in, for example, the Standard Template Library of C++. By providing a <em>less than</em> operator, we can compare keys and infer their ordering (and even know whether they&#8217;re equal).</p>


	<p>Here&#8217;s some sample code that demonstrates how this works:</p>


<pre>
(defvar my-t (make-table))
(defvar get (funcall my-t 'lookup-proc))
(defvar put (funcall my-t 'insert-proc!))

(funcall put 5 55)
(funcall put 6 66)
(funcall put 3 33)
(funcall put 9 99)
(funcall put 1 11)
(funcall put 2 22)

(funcall get 9)
=&gt; (9 99)

(funcall get 7)
=&gt; NIL

(funcall put 7 77)

(funcall get 7)
=&gt; (7 77)
</pre>

	<h4>Exercise 3.27</h4>


	<p>I won&#8217;t draw the env diagram, but I will explain what&#8217;s going on.</p>


	<p>When <code>memoize</code> is called, and environment with the variable <code>table</code> is created, and the function returned points to this environment. Each time the function is executed (each call to <code>memo-fib</code>), it is executed within the body of the lambda that <code>memoize</code> returns &#8211; which checks for the value in the table.</p>


	<p><code>(memo-fib n)</code> takes <code>n</code> steps to compute its result because it never computes the same result twice. The call tree is flattened into a linear list.</p>


	<p>The scheme would not work if we had defined <code>memo-fib</code> to be <code>(memoize fib)</code>. This is because <code>fib</code> still calls itself (<code>fib</code>) instead of <code>memo-fib</code> in its recursive calls.</p>


    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-section-333';
            var disqus_url = 'http://eli.thegreenplace.net/2007/10/04/sicp-section-333';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-section-333#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>