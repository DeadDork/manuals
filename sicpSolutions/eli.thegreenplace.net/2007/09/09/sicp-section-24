<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP section 2.4 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-section-24"
                       rel="bookmark"
                       title="Permalink to SICP section 2.4">
                        SICP section 2.4
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> September 09, 2007 at 05:44</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <p>The code for this section is Scheme. Also, note that I skipped a couple of sub-sections in 2.3 - they're quite code-heavy and I hope to have them done soon.</p>


	<p>Section 2.4 has a whole lot of text and not many exercises. It is an important and interesting read on the topic of multiple representations for data and generic operations. However, I feel that these topics are less in the domain of Lisp, since they are much more familiar from the world of C++, C#, Java and Ruby &#8211; object oriented languages.</p>


	<p>In fact, Lisp has object orientation as well. In Common Lisp there&#8217;s <span class="caps">CLOS</span>, and in Scheme there are a few OO packages flying around. While in languages like C++ object-orientation is a pre-designed feature, in Lisp it&#8217;s just built in on top of the basic language as any other <span class="caps">DSL</span>. This is possible because the meta-programming Lisp allows with its closures, code-as-data and macros are a much more fundamental and powerful concept than OO, and so can be used to implement it<sup><a href="sicp-section-24#fn1">1</a></sup>.</p>


	<p>Anyway, on to some code.</p>


	<h4>Exercise 2.73</h4>


	<p><strong>a.</strong> Similarly to the examples of complex numbers, the code was turned into dispatching on the operator. <code>get</code> returns the appropriate functions for the operator it is given, and that function is called on the operands with the variable to do the actual derivation.</p>


	<p><code>number?</code> and <code>same-variable?</code> weren&#8217;t assimilated into the data-directed dispatch because there&#8217;s nothing to dispatch on for them. While the operator is part of the data (hence &#8220;data-directed&#8221; dispatch), these two are just predicates that examine properties of the data, and can&#8217;t be dispatched on.</p>


	<p><strong>b.</strong> Although the authors don&#8217;t explicitly ask to implement the <code>put</code> and <code>get</code> operations (since assignment isn&#8217;t taught until the next chapter), I will do it since I want to test that my solution works:</p>


<pre>
;; Operation, type -&gt; procedure
;; Dispatch table.
;; 
(define *op-table* (make-hash-table 'equal))

(define (put op type proc)
  (hash-table-put! *op-table* (list op type) proc))

(define (get op type)
  (hash-table-get *op-table* (list op type) '()))
</pre>

	<p>The table is implemented using Scheme&#8217;s hash table facility. Note that I use lists as keys (<em>tuples</em> of operation and type) and so <code>equal</code> must be used as the comparison operator<sup><a href="sicp-section-24#fn2">2</a></sup>.</p>


	<p>Now, the <em>deriv</em> package:</p>


<pre>
(define (install-deriv-package)
  ;; internal procedures
  (define (make-sum a1 a2) (list '+ a1 a2))
  (define (addend s) (car s))
  (define (augend s) (cadr s))

  (define (make-product m1 m2) (list '* m1 m2))
  (define (multiplier p) (car p))
  (define (multiplicand p) (cadr p))

  (define (deriv-sum exp var)
    (make-sum (deriv (addend exp) var)
              (deriv (augend exp) var)))

  (define (deriv-product exp var) 
    (make-sum 
      (make-product (multiplier exp)
                    (deriv (multiplicand  exp) var))
      (make-product (deriv (multiplier  exp) var)
                    (multiplicand exp))))

  ;; interface to the rest of the system
  (put 'deriv '+ deriv-sum)
  (put 'deriv '* deriv-product))
</pre>

	<p>A small thing to note: the definitions of accessors (<code>augend</code>, <code>multiplier</code>, etc.) are different from the originals &#8211; because now <code>deriv</code> only passes the expression without the operator into <code>deriv-sum</code> and <code>deriv-product</code>.</p>


	<p><strong>c.</strong> With the infrastructure already in place, this is easy. Just adding the following forms into <code>install-deriv-package</code> does the job, without the need to change <code>deriv</code> itself:</p>


<pre>
  (define (make-exponentation base exp)
    (list '** base exp))
  (define (base s) (car s))
  (define (exponent s) (cadr s))

  (define (deriv-exponentation exp var)
    (make-product
      (make-product
        (exponent exp)
        (make-exponentation
          (base exp)
          (- (exponent exp) 1)))
      (deriv (base exp) var)))

  (put 'deriv '** deriv-exponentation)
</pre>

	<p><strong>d.</strong> Since this works on the abstraction level of <code>get</code> and <code>put</code>, the only change required is switching the order of arguments given to <code>put</code> in <code>install-deriv-package</code>. The implementation of <code>put</code> and <code>get</code> is indifferent to the order of the arguments, as longs as it is consistent on the calling level.</p>


	<h4>Exercise 2.74</h4>


	<p>The requirements in this exercise are somewhat abstract and aren&#8217;t easily testable without building the whole system, so the code I&#8217;m writing here wasn&#8217;t really tested. The vast majority of exercises in <span class="caps">SICP</span> are very good. This exercise is one of the exceptions to that rule.</p>


	<p><strong>a.</strong> First, let&#8217;s define a <em>generic file</em> as a tagged file type that contains the division it belongs to:</p>


<pre>
(define (make-generic-file division file)
  (list division file))

(define (division-of-generic-file gf)
  (car gf))

(define (file-of-generic-file gf)
  (cadr gf))
</pre>

	<p><code>make-generic-file</code> takes a division name and a file object and builds a generic file object. The other two functions are simple accessors.</p>


	<p>With this in hand, we can write <code>get-record</code> as follows:</p>


<pre>
(define (get-record employee file)
  ((get 'get-record  
        (division-of-generic-file file))
    employee
    (file-of-generic-file file)))</pre>

	<p>It applies the generic operation <code>get-record</code> to the employee and the file. It does this by first fetching the appropriate <code>get-record</code> for the division with which the file is tagged, and then calling it on the employee and the actual file.</p>


	<p><strong>b.</strong> Similarly to <code>get-record</code>, we can assume we have accessors for a generic employee object and write:</p>


<pre>
(define (get-salary employee)
  ((get 'get-salary
        (division-of-generic-employee employee))
    (employee-of-generic-employee employee)))
</pre>

	<p><strong>c.</strong> In Common Lisp I&#8217;d use one of the plethora of <code>find</code> functions. In Scheme, they&#8217;re not part of the standard but are commonly available as extensions. Here is the implementation, using <code>findf</code> from <span class="caps">PLT</span> Scheme&#8217;s library of list utilities.</p>


<pre>
(require (lib "list.ss"))

(define (find-employee-record employee file-list)
  (findf 
    (lambda (f)
      (let ((r (get-record employee f)))
        (if (null? r)
          #f
          r)))
    file-list))
</pre>

	<p>Note the translation from <code>'()</code> to <code>#f</code>, since Scheme considers the empty list to be true in boolean expressions.</p>


	<p><strong>d.</strong> It needs to add the functions that know how to extract employee records from its own file format, and install them in the dispatch table with <code>put</code>.</p>


	<h4>Exercise 2.75</h4>


<pre>
(define (make-from-mag-ang mag ang)
  (define (dispatch op)
    (cond 
      ((eq? op 'real-part) 
        (* mag (cos ang)))
      ((eq? op 'imag-part)
        (* mag (sin ang)))
      ((eq? op 'magnitude) mag)
      ((eq? op 'angle) ang)
      (else
        (error "Unknown op -- MAKE-FROM-MAG-ANG" op))))
  dispatch)
</pre>

	<h4>Exercise 2.76</h4>


	<ul>
	<li>With explicit dispatch, every function will have to be changed when a new type is added. This isn&#8217;t very good, of course.</li>
	</ul>


	<ul>
	<li>With data directed style, we&#8217;ll have to install another package (like we did with <code>deriv</code> in Exercise 2.74), but from there the upper level calls don&#8217;t have to change.</li>
	</ul>


	<ul>
	<li>With message passing, similarly to data directed style, we&#8217;ll only have to add another type of &#8220;object&#8221; that accepts the same messages. The upper level calling code doesn&#8217;t even have to be aware of the fact a new type has been added.</li>
	</ul>


	<p id="fn1"><sup>1</sup> Contrast it with the opposite &#8211; OO in C++ can&#8217;t be used to implement the special features of Lisp (without writing a full Lisp interpreter, of course).</p>


	<p id="fn2"><sup>2</sup> You can read about the Scheme equivalence operators <a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-9.html#%_sec_6.1">here</a></p>

    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-section-24';
            var disqus_url = 'http://eli.thegreenplace.net/2007/09/09/sicp-section-24';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-section-24#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>