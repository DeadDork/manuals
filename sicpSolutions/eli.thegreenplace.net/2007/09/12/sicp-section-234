<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP section 2.3.4 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-section-234"
                       rel="bookmark"
                       title="Permalink to SICP section 2.3.4">
                        SICP section 2.3.4
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> September 12, 2007 at 06:47</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <p>The solutions for this section are coded in Common Lisp.</p>


	<p>Here is the code of the section before the first exercise, translated into CL:</p>


<pre>
(load "common")

(defun make-leaf (symbol weight)
  (list 'leaf sym weight))

(defun leaf? (obj)
  (eq (car obq) 'leaf))

(defun symbol-leaf (x)
  (cadr x))

(defun weight-leaf (x)
  (caddr x))

(defun make-code-tree (left right)
  (list 
    left
    right
    (append (symbols left) (symbols right))
    (+ (weight left) (weight right))))

(defun left-branch (tree)
  (car tree))

(defun right-branch (tree)
  (cadr tree))

(defun symbols (tree)
  (if (leaf? tree)
    (list (symbol-leaf tree))
    (caddr tree)))

(defun weight (tree)
  (if (leaf? tree)
    (weight-leaf tree)
    (cadddr tree)))

(defun adjoin-set (x set)
  "Add a new element _x_ into a set of elements,
  sorted by weight" 
  (cond ((null set) (list x))
        ((&lt; (weight x) (weight (car set)))
          (cons x set))
        (t (cons  (car set)
                  (adjoin-set x (cdr set))))))

(defun make-leaf-set (pairs)
  (if (null pairs)
    '()
    (let ((pair (car pairs)))
      (adjoin-set (make-leaf 
                    (car pair)      ; symbol
                    (cadr pair))    ; frequency
                  (make-leaf-set (cdr pairs))))))  

(defun decode (bits tree)
  (labels (
    (decode-1 (bits branch)
      (if (null bits)
        '()
        (let ((next-branch
                (choose-branch (car bits) branch)))
            (if (leaf? next-branch)
              (cons (symbol-leaf next-branch)
                    (decode-1 (cdr bits) tree))
              (decode-1 (cdr bits) next-branch))))))

    (decode-1 bits tree)))

(defun choose-branch (bit branch)
  (cond ((= bit 0) (left-branch branch))
        ((= bit 1) (right-branch branch))
        (t (error "bad bit -- CHOOSE-BRANCH ~A" bit))))
</pre>

	<p>I have a serious concern regarding the <code>decode</code> function. Its helper function <code>decode-1</code> recurses over the input list (<em>bits</em>), and not as a tail recursion (look at the positive branch of the inner <code>if</code> &#8211; consing a new decoded symbol to the decoding result of the rest of the input). Therefore, the stack depth of this function is proportional to the input size. Since input sizes may become quite large when decoding large files, it smells of a stack overflow.</p>


	<p>I also wrote a convenience function for printing out Huffman trees. This makes debugging easier:</p>


<pre>
(defun print-tree (tree)
  (labels (
    (print-node (node offset)   
      (dotimes (i offset) (format t " "))
      (if (leaf? node)
        (format t "~A ~A~%" 
          (symbol-leaf node) (weight-leaf node))
        (progn
          (format t "~A ~A~%" 
            (symbols node) (weight node))
          (print-node 
            (left-branch node) (+ 2 offset))
          (print-node 
            (right-branch node) (+ 2 offset))))))

    (print-node tree 0)))
</pre>

	<p>Note that I&#8217;m using <code>format</code>. CL has a few basic printing functions with disgustingly unhelpful names: <code>prin1, princ, print, pprint</code>. I much prefer just using <code>format</code> even for the simple things instead of trying to remember what each of those does<sup><a href="sicp-section-234#fn1">1</a></sup>.</p>


	<h4>Exercise 2.67</h4>


<pre>
(defvar sample-tree
  (make-code-tree 
    (make-leaf 'A 4)
    (make-code-tree
      (make-leaf 'B 2)
      (make-code-tree 
        (make-leaf 'D 1)
        (make-leaf 'C 2)))))

(defvar sample-message
  '(0 1 1 0 0 1 0 1 0 1 1 1 0))

(print (decode sample-message sample-tree))
=&gt;
(A D A B B C A)
</pre>

	<p>You can easily follow the decoding process manually &#8211; <code>decode</code> returns a correct result.</p>


	<p>And re the stack overflow, sure enough, for inputs about 1000 bits long, <code>decode</code> begins overflowing the stack. This certainly is one of those places where iteration (or tail recursion) is much more appropriate. After all, there&#8217;s no real state to keep between decoded characters. Therefore, decoding them in a loop is appropriate and readable.</p>


	<h4>Exercise 2.68</h4>


	<p>Here&#8217;s <code>encode-symbol</code>:</p>


<pre>
(defun encode-symbol (sym tree)
  (labels (
    (tree-walk (sym node encoding)
      (if (leaf? node)
        encoding
        (cond
          ((element-of-set? sym (symbols (left-branch node)))
            (tree-walk sym (left-branch node) (cons 0 encoding)))
          ((element-of-set? sym (symbols (right-branch node)))
            (tree-walk sym (right-branch node) (cons 1 encoding)))
          (t (error "Symbol not in tree -- ~A" sym))))))

    (reverse (tree-walk sym tree '()))))
</pre>

	<p>The internal function <code>tree-walk</code> recursively walks the encoding tree, looking for the full binary sequence that encodes the given symbol. Note that it builds the encoding by consing each new bit in front of the existing list, so its result must be reversed<sup><a href="sicp-section-234#fn2">2</a></sup>.</p>


	<p>Note also that it uses the <code>element-of-set?</code> function (from the previous section). It is the unordered list version, since this is how sets of symbols are represented here.</p>


	<p>And the ultimate test:</p>


<pre>
(decode 
  (encode '(A D A B B C A) sample-tree)
  sample-tree))

=&gt; '(A D A B B C A)
</pre>

	<h4>Exercise 2.69</h4>


	<p>I don&#8217;t know why the authors say <code>successive-merge</code> is tricky. It appears pretty straightforward to me, just following the algorithm outlined in the subsection named &#8220;Generating Huffman trees&#8221;</p>


<pre>
(defun generate-huffman-tree (pairs)
  (successive-merge (make-leaf-set pairs)))

(defun successive-merge (node-set)
  (if (null (cadr node-set))
    (car node-set)
    (successive-merge
      (adjoin-set 
        (make-code-tree (car node-set) 
                        (cadr node-set))
        (cddr node-set)))))
</pre>

	<p>At each step, <code>successive-merge</code> examines the set of nodes. If there&#8217;s only one node in it (<code>cadr</code> is empty, meaning &#8220;no second element&#8221;) then this is the root of the tree and can be returned. Otherwise, it takes the first two nodes (that happen to be the nodes with the lowest weight, because <code>adjoin-set</code> keeps the list ordered) out of the set, makes a node that has them as its left and right branches, and puts the new node back, keeping the order. Eventually, only the tree root is left.</p>


	<p>Here&#8217;s an example call with the same characters as the sample in the &#8220;Generating Huffman trees&#8221; section</p>


<pre>
(print-tree 
  (generate-huffman-tree 
    '((a 8 ) 
      (b 3) 
      (c 1)
      (d 1)
      (e 1) 
      (f 1) 
      (g 1) 
      (h 1))))

=&gt;

(A H G F E D C B) 17
  A 8
  (H G F E D C B) 9
    (H G F E) 4
      (H G) 2
        H 1
        G 1
      (F E) 2
        F 1
        E 1
    (D C B) 5
      (D C) 2
        D 1
        C 1
      B 3
</pre>

	<p>Indeed, the result is exactly as expected.</p>


	<h4>Exercise 2.70</h4>


<pre>
(defvar rock-50s-tree 
  (generate-huffman-tree
    '((a 2) (boom 1) (get 2) (job 2)
      (na 16) (sha 3) (yip 9) (wah 1))))

(print 
  (encode 
    '(get a job sha na na na na na na na na
      get a job sha na na na na na na na na
      wah yip yip yip yip yip yip yip yip yip
      sha boom)
    rock-50s-tree))

=&gt;
(1 1 1 1 1 1 1 0 0 1 1 1 1 0 1 1 
1 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 
0 0 1 1 1 1 0 1 1 1 0 0 0 0 0 0 0 
0 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 
1 0 1 0 1 0 1 0 1 1 1 0 1 1 0 1 1) 
</pre>

	<p>Altogether 84 bits. Had we used a fixed encoding we&#8217;d need 3 bits per symbol to encode the 8 different symbols. The length of the song is 36 symbols &#8211; so the fixed encoding would be <code>36 * 3 = 108</code> bits long.</p>


	<h4>Exercise 2.71</h4>


	<p>For <code>n=5</code>:</p>


<pre>
(print-tree
  (generate-huffman-tree
    '((a 1) (b 2) (c 4) (d 8 ) (e 16))))

=&gt;
(A B C D E) 31
  (A B C D) 15
    (A B C) 7
      (A B) 3
        A 1
        B 2
      C 4
    D 8
  E 16
</pre>

	<p>For <code>n=10</code>:</p>


<pre>
(print-tree
  (generate-huffman-tree
    '((a 1) (b 2) (c 4) (d 8 ) (e 16)
      (f 32) (g 64) (h 128) (i 256) (j 512))))

=&gt;
(A B C D E F G H I J) 1023
  (A B C D E F G H I) 511
    (A B C D E F G H) 255
      (A B C D E F G) 127
        (A B C D E F) 63
          (A B C D E) 31
            (A B C D) 15
              (A B C) 7
                (A B) 3
                  A 1
                  B 2
                C 4
              D 8
            E 16
          F 32
        G 64
      H 128
    I 256
  J 512
</pre>

	<p>As we can see, the result is a &#8220;linear&#8221; tree &#8211; each successive leaf is exactly one level deeper than the previous one. It is easy to see why &#8211; when the relative frequencies of symbols are successive powers of two, the sum of the weights of the two least frequent nodes is almost lower than the weight of the next node, so in the construction function, the tree is built &#8220;sequentially&#8221; deeper and deeper.</p>


	<p>In such a tree, the most frequent symbol will need 1 bit of encoding, and the least frequent symbol will need <code>n-1</code> bits of encoding.</p>


	<h4>Exercise 2.72</h4>


	<p>In general, in the worst case we&#8217;d need to descend <code>n</code> levels (as Exercise 2.71 shows), and at each step we have to find the symbol in a set of symbols at that node. The implementation of <code>encode</code> used an unordered set to keep the symbols, so the search takes <code>O(n)</code>[3]. Therefore, the whole encoding procedure takes <code>O(n^2)</code>. Had we used a binary tree for the sets of symbols, we could bring this time down to <code>O(n^2)</code>. Of course, building the tree would then take longer.</p>


<hr />

	<p id="fn1"><sup>1</sup> Except, perhaps the most trivial <code>(print obj)</code> when debugging, since it is shorter to write than the corresponding <code>format</code> call.</p>


	<p id="fn2"><sup>2</sup> This is a common pattern in list processing &#8211; consing in front takes only a constant time, and in the end you <code>reverse</code> once, whereas appending each new element to the end of the list will result in quadratic runtime since the appending operation takes time proportional to the length of the list.</p>


	<p id="fn3"><sup>3</sup> You may be tempted to say that the set to search grows smaller at each step, and that&#8217;s true. However, the average set size for the worst tree is <code>n/2</code> which is still <code>O(n)</code>.</p>

    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-section-234';
            var disqus_url = 'http://eli.thegreenplace.net/2007/09/12/sicp-section-234';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-section-234#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>