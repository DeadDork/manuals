<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP section 2.5.3 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-section-253"
                       rel="bookmark"
                       title="Permalink to SICP section 2.5.3">
                        SICP section 2.5.3
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> September 21, 2007 at 20:11</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <p>The code for this section is in Scheme.</p>


	<h4>Arithmetic on polynomials</h4>


	<p>Here is the whole code written by the authors before the exercises commence, collected into the <code>polynomial</code> package:</p>


<pre>
(define (install-polynomial-package)
  (define (variable? x) (symbol? x))

  (define (same-variable? v1 v2)
    (and (variable? v1) (variable? v2) (eq? v1 v2)))

  (define (make-poly variable term-list)
    (cons variable term-list))

  (define (variable p) (car p))

  (define (term-list p) (cdr p))

  (define (adjoin-term term term-list)
    (if (=zero? (coeff term))
        term-list
        (cons term term-list)))

  (define (the-empty-termlist) '())
  (define (first-term term-list) (car term-list))
  (define (rest-terms term-list) (cdr term-list))
  (define (empty-termlist? term-list) (null? term-list))
  (define (make-term order coeff) (list order coeff))
  (define (order term) (car term))
  (define (coeff term) (cadr term))

  (define (add-terms L1 L2)
    (cond ((empty-termlist? L1) L2)
          ((empty-termlist? L2) L1)
          (else
           (let ((t1 (first-term L1)) (t2 (first-term L2)))
             (cond ((&gt; (order t1) (order t2))
                    (adjoin-term
                     t1 (add-terms (rest-terms L1) L2)))
                   ((&lt; (order t1) (order t2))
                    (adjoin-term
                     t2 (add-terms L1 (rest-terms L2))))
                   (else
                    (adjoin-term
                     (make-term (order t1)
                                (add (coeff t1) (coeff t2)))
                     (add-terms (rest-terms L1)
                                (rest-terms L2)))))))))

  (define (mul-terms L1 L2)
    (if (empty-termlist? L1)
        (the-empty-termlist)
        (add-terms (mul-term-by-all-terms (first-term L1) L2)
                   (mul-terms (rest-terms L1) L2))))
  (define (mul-term-by-all-terms t1 L)
    (if (empty-termlist? L)
        (the-empty-termlist)
        (let ((t2 (first-term L)))
          (adjoin-term
           (make-term (+ (order t1) (order t2))
                      (mul (coeff t1) (coeff t2)))
           (mul-term-by-all-terms t1 (rest-terms L))))))

  (define (add-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-poly (variable p1)
                   (add-terms (term-list p1)
                              (term-list p2)))
        (error "Polys not in same var -- ADD-POLY" 
               (list p1 p2))))
  (define (mul-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-poly (variable p1)
                   (mul-terms (term-list p1)
                              (term-list p2)))
        (error "Polys not in same var -- MUL-POLY" 
               (list p1 p2))))

  ;; Interface to the outer world
  ;;
  (define (tag p) (attach-tag 'polynomial p))
  (put 'add '(polynomial polynomial) 
    (lambda (p1 p2) (tag (add-poly p1 p2))))
  (put 'mul '(polynomial polynomial) 
    (lambda (p1 p2) (tag (mul-poly p1 p2))))
  (put 'make 'polynomial
    (lambda (var terms) (tag (make-poly var terms))))
  'done)

(define (make-polynomial var terms)
  ((get 'make 'polynomial) var terms))
</pre>

	<p>Because of the way the generic arithmetic package from the previous section is structured, incorporating polynomials into it is very easy. I just loaded the code by executing:</p>


<pre>
(load "generic_arithmetic_combining_types.scm")
</pre>

	<p>And now I have all the generic functions (<code>add</code>, <code>apply-generic</code>, etc.) available, and the polynomial package can be installed without affecting the other types. When something like this happens, you know it&#8217;s good software design.</p>


	<h4>Exercise 2.87</h4>


<pre>
;; This goes inside "install-polynomial-package":
  (define (zero-poly? p)
    (let ((terms (term-list p)))
      (if (empty-termlist? terms)
        #t
        (and (=zero? (coeff (first-term terms)))
             (zero-poly? 
              (make-poly 
                (variable p)
                (rest-terms terms)))))))

  (put '=zero? '(polynomial)
    (lambda (p) (zero-poly? p)))
</pre>

	<p>The function <code>zero-poly?</code> is implemented in a clever recursive way. A polynomial is zero if either its terms list is empty (i.e. no terms), or its first term&#8217;s coefficient is 0 and the rest of the polynomial is zero.</p>


	<p>However, after writing this, I felt not so good with it. After all, it doesn&#8217;t look nice to create the polynomial anew with the reduced terms list. Can&#8217;t we just work on the terms list itself ?</p>


	<p>So I&#8217;ve rewritten the function to look like this:</p>


<pre>
  (define (zero-poly? p)
    (define (zero-terms? terms)
      (or (empty-termlist? terms)
          (and  (=zero? (coeff (first-term terms)))
                (zero-terms? (rest-terms terms)))))

    (zero-terms? (term-list p)))
</pre>

	<p>It looks cleaner to me, but that&#8217;s a matter of taste.</p>


	<h4>Exercise 2.88</h4>


	<p>First, here is the negation for the scheme number package, to allow testing:</p>


<pre>
(put 'neg '(scheme-number)
  (lambda (x) (tag (- x))))
</pre>

	<p>And the generic operation will be defined as:</p>


<pre>
(define (neg x) (apply-generic 'neg x))
</pre>

	<p>When I came to adding negation to the polynomial package, I ran into an abstraction problem. Generally, the most natural way to negate a polynomial is to map over all its terms and negate each. But the representation of the terms list is abstracted away by <code>first-term</code> and <code>rest-terms</code>, so I can only walk the list in order. However, to create a new list, I must use <code>adjoin-term</code> function which adds a new term to the beginning of the list. Therefore I can create the terms list only in reverse. So, it appears there&#8217;s not clean iterative solution to this problem without breaking the abstraction, and a recursive one will have to do (although I find it terribly inefficient, being proportional in depth to the amount of terms in the polynomial):</p>


<pre>
(define (negate-terms terms)
  (if (empty-termlist? terms)
    (the-empty-termlist)
    (let ((first (first-term terms)))
      (adjoin-term 
        (make-term (order first) (neg (coeff first)))
        (negate-terms (rest-terms terms))))))

(define (negate-poly p)
  (make-poly 
    (variable p)
    (negate-terms (term-list p))))

(put 'neg '(polynomial)
  (lambda (p) (tag (negate-poly p))))
</pre>

	<p><code>negate-terms</code> does its trick by reversing the list of terms implicitly in the Scheme program stack. Look at the call to <code>adjoin-term</code> &#8211; it obviously always has its elements in the correct order. The first term is created, and then <code>adjoin-term</code> &#8220;waits&#8221; for the recursive call to return the rest of the negated terms and prepends the first one to them. This way, the correct order is preserved.</p>


	<p>Anyway, I almost forgot our real goal here is to subtract polynomials. Given the negation, it is trivial:</p>


<pre>
(define (sub-poly p1 p2)
  (add-poly p1 (negate-poly p2)))

(put 'sub '(polynomial polynomial)
  (lambda (p1 p2) (tag (sub-poly p1 p2))))
</pre>

	<h4>Exercise 2.89</h4>


	<p>There is a slight trick here. Note that in the sparse polynomial term-list, the order of each coefficient is explicit. In a dense term-list this is not so, however, and the order is implicit in the coefficient&#8217;s location in the term-list.</p>


	<p>So my proposed implementation is this:</p>


<pre>
(define (adjoin-term term term-list)
  (if (=zero? (coeff term))
      term-list
      (cons (coeff term) term-list)))

(define (the-empty-termlist) '())

(define (first-term term-list) 
  (cons 
    (car term-list) 
    (- (length term-list) 1)))

(define (rest-terms term-list) (cdr term-list))
(define (empty-termlist? term-list) (null? term-list))
(define (make-term order coeff) (list order coeff))
(define (order term) (car term))
(define (coeff term) (cadr term))
</pre>

	<p>Note that <code>first-term</code> and <code>adjoin-term</code> are different from the sparse versions. The strategy is as follows: while the term list is a simple list of coefficients (dense representation), a single term is an <code>(order coefficient)</code> pair. The order is determined in <code>first-term</code> by computing the length of the list, and <code>adjoin-term</code> removes the order to attach only the coefficient to a term list.</p>


	<h4>Exercise 2.90</h4>


	<p>After struggling with this for half an hour, I reached the conclusion this is too much work. Repeatable work. So, I&#8217;ll skip it now and will perhaps get back to it later.</p>


	<h4>Exercise 2.91</h4>


	<p>This is the complete <code>div-terms</code>:</p>


<pre>
  (define (div-terms L1 L2)
    (if (empty-termlist? L1)
        (list (the-empty-termlist) (the-empty-termlist))
        (let ((t1 (first-term L1))
              (t2 (first-term L2)))
          (if (&gt; (order t2) (order t1))
              (list (the-empty-termlist) L1)
              (let* ( (new-c (div (coeff t1) (coeff t2)))
                      (new-o (- (order t1) (order t2)))
                      (new-t (make-term new-o new-c))
                      (mult (mul-terms L2 (list new-t)))
                      (diff (add-terms 
                              L1
                              (negate-terms mult))))
                (let ((rest-of-result
                        (div-terms diff L2)))
                  (list 
                    (cons new-t (car rest-of-result))
                    (cadr rest-of-result))))))))
</pre>

	<p>Note the order of computations in the <code>let*</code> form &#8211; it carefully follows the algorithm outlined in the text.</p>


	<p>And this is the rest of the code to be added to <code>install-polynomial-package</code>:</p>


<pre>
  (define (div-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
      (let ((div-result (div-terms
                          (term-list p1)
                          (term-list p2))))
        (list
          (make-poly (variable p1) (car div-result))
          (make-poly (variable p2) (cadr div-result))))
      (error "Polys not in same var -- DIV-POLY" 
        (list p1 p2))))

  (put 'div '(polynomial polynomial)
    (lambda (p1 p2) 
      (let ((div-result (div-poly p1 p2)))
        (list 
          (tag (car div-result))
          (tag (cadr div-result))))))
</pre>

	<h4>Exercise 2.92</h4>


	<p>Skipping.</p>


	<h4>Exercise 2.93</h4>


<pre>
(define (install-rational-package)
  (define (tag x) (attach-tag 'rational x))

  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (equal-rat? x y)
    (and 
      (equ? (numer x) (numer y))
      (equ? (denom x) (denom y))))

  (define (make-rat n d)
    (cons n d))

  (define (add-rat x y)
    (make-rat (add  (mul (numer x) (denom y))
                    (mul (numer y) (denom x)))
              (mul (denom x) (denom y))))

  (define (sub-rat x y)
    (make-rat (sub (mul (numer x) (denom y))
                   (mul (numer y) (denom x)))
              (mul (denom x) (denom y))))

  (define (mul-rat x y)
    (make-rat (mul (numer x) (numer y))
              (mul (denom x) (denom y))))

  (define (div-rat x y)
    (make-rat (mul (numer x) (denom y))
              (mul (denom x) (numer y))))

  ;; interface to rest of the system
  ;;
  (put 'equ? '(rational rational)
    (lambda (x y) (equal-rat? x y)))
  (put '=zero? '(rational)
    (lambda (x) (=zero? (numer x))))
  (put 'add '(rational rational)
    (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
    (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
    (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
    (lambda (x y) (tag (div-rat x y))))
  (put 'make 'rational
    (lambda (n d) (tag (make-rat n d))))
  'done)
</pre>

	<p>Now executing:</p>


<pre>
(define p1 (make-polynomial 'x '((2 1) (0 1))))
(define p2 (make-polynomial 'x '((3 1) (0 1))))

(define rf (make-rational p1 p2))
(define rf2 (add rf rf))

(printf "~a~%" rf)
(printf "~a~%" rf2)
</pre>

	<p>Produces the expected results.</p>


	<h4>Exercise 2.94</h4>


	<p>First, I&#8217;ll add this to the <code>scheme-number</code> package:</p>


<pre>
  (put 'greatest-common-divisor '(scheme-number scheme-number)
    (lambda (a b) (gcd a b)))
</pre>

	<p>And this to the outer code for the generic operation:</p>


<pre>
(define (greatest-common-divisor a b)
  (apply-generic 'greatest-common-divisor a b))
</pre>

	<p>The additions to the polynomial package are:</p>


<pre>
  (define (remainder-terms a b)
    (cadr (div-terms a b)))

  (define (gcd-terms a b)
    (if (empty-termlist? b)
        a
        (gcd-terms b (remainder-terms a b))))

  (define (gcd-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
      (make-poly    
        (variable p1)
        (gcd-terms (term-list p1) (term-list p2)))
      (error "Polys not in same var -- GCD-POLY" 
        (list p1 p2))))

  (put 'greatest-common-divisor '(polynomial polynomial)
    (lambda (p1 p2) (tag (gcd-poly p1 p2))))
</pre>

	<h4>Exercise 2.95</h4>


<pre>
(define p1 (make-polynomial 'x '((2 1) (1 -2) (0 1))))
(define p2 (make-polynomial 'x '((2 11) (0 7))))
(define p3 (make-polynomial 'x '((1 13) (0 5))))

(define q1 (mul p1 p2))
(define q2 (mul p1 p3))

(define gq (greatest-common-divisor q1 q2))

(printf "~a~%" gq)
=&gt;
(polynomial x (2 1458/169) (1 -2916/169) (0 1458/169))
</pre>

	<p>Which obviously isn&#8217;t <code>p1</code>, although there is some consistency in it. Note that if 1458/169 represents 1, it is exactly the same as <code>p1</code>. So how did 1 turn into 1458/169 ?</p>


	<p>We can find out by tracing some of the functions. In Scheme, tracing is not part of the language, but most implementations provide it. <span class="caps">PLT</span> Scheme has a <code>trace</code> function in the <code>trace.ss</code> library of MzLib. First it&#8217;s imported with:</p>


<pre>
(require (lib "trace.ss"))
</pre>

	<p>Then, I&#8217;ve added these lines to the polynomial package:</p>


<pre>
  (trace div-terms)
  (trace gcd-terms)
</pre>

	<p>And when running the <code>greatest-common-divisor</code> call, the result is:</p>


<pre>
|(gcd-terms ((4 11) (3 -22) (2 18) (1 -14) (0 7)) ((3 13) (2 -21) (1 3) (0 5)))
| (div-terms
    ((4 11) (3 -22) (2 18) (1 -14) (0 7))
    ((3 13) (2 -21) (1 3) (0 5)))
| |(div-terms
     ((3 -55/13) (2 201/13) (1 -237/13) (0 7))
     ((3 13) (2 -21) (1 3) (0 5)))
| | (div-terms
      ((2 1458/169) (1 -2916/169) (0 1458/169))
      ((3 13) (2 -21) (1 3) (0 5)))
| | (() ((2 1458/169) (1 -2916/169) (0 1458/169)))
| |(((0 -55/169)) ((2 1458/169) (1 -2916/169) (0 1458/169)))
| (((1 11/13) (0 -55/169)) ((2 1458/169) (1 -2916/169) (0 1458/169)))
|(gcd-terms
   ((3 13) (2 -21) (1 3) (0 5))
   ((2 1458/169) (1 -2916/169) (0 1458/169)))
| (div-terms
    ((3 13) (2 -21) (1 3) (0 5))
    ((2 1458/169) (1 -2916/169) (0 1458/169)))
| |(div-terms ((2 5) (1 -10) (0 5)) ((2 1458/169) (1 -2916/169) (0 1458/169)))
| | (div-terms () ((2 1458/169) (1 -2916/169) (0 1458/169)))
| | (() ())
| |(((0 845/1458)) ())
| (((1 2197/1458) (0 845/1458)) ())
|(gcd-terms ((2 1458/169) (1 -2916/169) (0 1458/169)) ())
|((2 1458/169) (1 -2916/169) (0 1458/169))
(polynomial x (2 1458/169) (1 -2916/169) (0 1458/169))
</pre>

	<p>Let&#8217;s see what&#8217;s happening here. <code>gcd-terms</code> is called with <code>q1</code> and <code>q2</code> and divides one by another to find the remainder. The quotient of this division is: <code>(((1 11/13) (0 -55/169))</code>, and the remainder is: <code>((2 1458/169) (1 -2916/169) (0 1458/169)))</code>, so this is where the fractions are coming from.</p>


	<h4>Exercise 2.96</h4>


	<p><strong>a.</strong></p>


<pre>
(define (pseudoremainder-terms a b)
  (let*  ((t1 (first-term a))
          (o1 (order t1))
          (t2 (first-term b))
          (o2 (order t2))
          (c (coeff t2))
          (ic (expt c (+ 1 o1 (- o2)))))
    (cadr 
      (div-terms
        (map 
          (lambda (t)
            (make-term (order t) (* ic (coeff t))))
          a)
        b))))

(define (gcd-terms a b)
  (if (empty-termlist? b)
      a
      (gcd-terms b (pseudoremainder-terms a b))))
</pre>

	<p>Now the result is:</p>


<pre>
(polynomial x (2 1458) (1 -2916) (0 1458))
</pre>

	<p><strong>b.</strong></p>


	<p>Luckily, Scheme&#8217;s built-in <code>gcd</code> function knows how to compute the answer for an arbitrary amount of arguments. This allows us to rewrite <code>gcd-terms</code> as:</p>


<pre>
  (define (gcd-terms a b)
    (if (empty-termlist? b)
        a
        (let*  ((gcd-res (gcd-terms b (pseudoremainder-terms a b)))
                (coeff-list (map cadr gcd-res))
                (coeff-gcd (apply gcd coeff-list)))
          (map 
            (lambda (t)
              (make-term  (order t) 
                          (/ (coeff t) coeff-gcd)))
            gcd-res))))
</pre>

	<h4>Exercise 2.97</h4>


	<p><strong>a.</strong></p>


	<p>I took some common code out into a separate function, so here is the full code for this extended exercise:</p>


<pre>
  (define (map-coeffs fn term-list)
    "fn is a function that will be called on each
    coefficient in term-list, and is expected to
    return a new coefficient." 
    (map
      (lambda (t)
        (make-term (order t) (fn (coeff t))))
      term-list))

  (define (reduce-terms n d)
    (let*  ((nd-gcd (gcd-terms n d))
            (o1 (max  (order (first-term n))
                      (order (first-term d))))
            (o2 (order (first-term nd-gcd)))
            (c (coeff (first-term nd-gcd)))
            (ic (expt c (+ 1 o1 (- o2))))
            (ni (map-coeffs 
                  (lambda (c) (* c ic)) n))
            (di (map-coeffs
                  (lambda (c) (* c ic)) d))
            (nn (quotient-terms ni nd-gcd))
            (dd (quotient-terms di nd-gcd)))
      (list nn dd)))

  (define (quotient-terms a b)
    (car (div-terms a b)))

  (define (remainder-terms a b)
    (cadr (div-terms a b)))

  (define (pseudoremainder-terms a b)
    (let*  ((t1 (first-term a))
            (o1 (order t1))
            (t2 (first-term b))
            (o2 (order t2))
            (c (coeff t2))
            (ic (expt c (+ 1 o1 (- o2)))))
      (cadr 
        (div-terms
          (map-coeffs (lambda (c) (* c ic)) a)
          b))))

  (define (gcd-terms a b)
    (if (empty-termlist? b)
        a
        (let*  ((gcd-res (gcd-terms b (pseudoremainder-terms a b)))
                (coeff-list (map cadr gcd-res))
                (coeff-gcd (apply gcd coeff-list)))
          (map 
            (lambda (t)
              (make-term  (order t) 
                          (/ (coeff t) coeff-gcd)))
            gcd-res))))

  (define (div-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
      (let ((div-result (div-terms
                          (term-list p1)
                          (term-list p2))))
        (list
          (make-poly (variable p1) (car div-result))
          (make-poly (variable p2) (cadr div-result))))
      (error "Polys not in same var -- DIV-POLY" 
        (list p1 p2))))

  (define (gcd-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
      (make-poly    
        (variable p1)
        (gcd-terms (term-list p1) (term-list p2)))
      (error "Polys not in same var -- GCD-POLY" 
        (list p1 p2))))

  (define (reduce-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
      (let ((result (reduce-terms
                      (term-list p1)
                      (term-list p2))))
        (list
          (make-poly (variable p1) (car result))
          (make-poly (variable p2) (cadr result))))
      (error "Polys not in same var -- REDUCE-POLY" 
        (list p1 p2))))
</pre>

	<p><strong>b.</strong></p>


<pre>
;; Added to the scheme-number package
;;
(define (reduce-integers n d)
  (let ((g (gcd n d)))
    (list (/ n g) (/ d g))))

(put 'reduce '(scheme-number scheme-number)
  (lambda (n d) (reduce-integers n d)))

;; Added as an outer function
;;
(define (reduce n d) (apply-generic 'reduce n d))

;; Added to the polynomial package
;;
(put 'reduce '(polynomial polynomial)
  (lambda (p1 p2)
    (let ((result (reduce-poly p1 p2)))
      (list 
        (tag (car result))
        (tag (cadr result))))))
</pre>

	<p>Now, the answer of <code>(add rf1 rf2)</code> is:</p>


<pre>
(rational 
  (polynomial x (3 1) (2 2) (1 3) (0 1)) 
  polynomial x (4 1) (3 1) (1 -1) (0 -1))
</pre>

	<p>As expected.</p>


	<h4>Afterword</h4>


	<p>This concludes chapter 2 of <span class="caps">SICP</span>. Phew, that was lots of work. Especially the last few sections with the generic arithmetic packages. I feel it got a little repetitive and tiresome towards the end, so I even skipped a couple of exercises. Nevertheless, I learned a lot from this chapter and am looking forward to chapter 3.</p>

    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-section-253';
            var disqus_url = 'http://eli.thegreenplace.net/2007/09/21/sicp-section-253';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-section-253#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>