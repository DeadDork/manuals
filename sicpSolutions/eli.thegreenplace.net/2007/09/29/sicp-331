<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP section 3.3.1 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-331"
                       rel="bookmark"
                       title="Permalink to SICP section 3.3.1">
                        SICP section 3.3.1
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> September 29, 2007 at 11:20</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <p>Until now all the code I&#8217;ve written for chapter 3 was in Scheme. Now I want to switch to Common Lisp, mainly in order to explore its facilities for state and assignment.</p>


	<p>It is actually quite interesting to compare Scheme with Common Lisp in this respect, because they&#8217;re a bit different. Scheme has a <em>setter</em> function for most types it supports, including pairs (<code>set-car!</code>, <code>set-cdr!</code>). On the other hand, CL has a common <code>setf</code> macro which is useful for all<sup><a href="sicp-331#fn1">1</a></sup> types. It can be used to set variables, structure elements, array cells, pairs, and so on.</p>


	<p>In fact, as a remnant from the past CL has special functions for setting the <code>car</code> and <code>cdr</code> of pairs: <code>rplaca</code> and <code>rplacd</code>. Apart from the ugly names (<code>rplaca</code> is &#8220;replace car&#8221;), these functions are no longer recommended for use by the CL community. Instead of writing <code>(rplaca pair val)</code>, it is a better style to write <code>(setf (car pair) val)</code>. Although a bit longer, it is better in the sense that one doesn&#8217;t have to employ a special function, and uses the common <code>setf</code> which is very familiar<sup><a href="sicp-331#fn2">2</a></sup>.</p>


	<h4>Exercise 3.12</h4>


	<p>Let&#8217;s translate the code to CL and see the results<sup><a href="sicp-331#fn3">3</a></sup>:</p>


<pre>
(defun my-append (x y)
  (if (null x)
    y
    (cons (car x) (my-append (cdr x) y))))

(defun my-append! (x y)
  (setf (cdr (last x)) y)
  x)

(defvar x (list 'a 'b))
(defvar y (list 'c 'd))
(defvar z (my-append x y))

z
=&gt; (a b c d)
(cdr x)
=&gt; (b)

(defvar w (my-append! x y))

w
=&gt; (a b c d)
(cdr x)
=&gt; (b c d)
</pre>

	<p>Note that the call to <code>my-append!</code> attaches <code>y</code> onto the tail of <code>x</code> and returns <code>x</code>. Therefore, <code>w</code> and <code>x</code> point to the same location.</p>


	<h4>Exercise 3.13</h4>


<pre>
(defun make-cycle (x)
  (setf (cdr (last x)) x)
  x)
</pre>

	<p>This creates a <code>circular list</code>. The <code>cdr</code> of the last cell in the list, instead of pointing to <code>nil</code>, points to the first cell of the list. Now any attempt to walk the list or print it will result in an infinite loop.</p>


	<p>Circular lists are useful in some situations, but one has to know one&#8217;s dealing with them and write code accordingly. Printing out a circular list is just one of those things you don&#8217;t do<sup><a href="sicp-331#fn4">4</a></sup>.</p>


	<h4>Exercise 3.14</h4>


	<p><code>mystery</code> reverses the list <code>x</code>. Here&#8217;s the code rewritten in CL:</p>


<pre>
(defun mystery (x)
  (labels (
    (my-loop (x y)
      (if (null x)
        y
        (let ((temp (cdr x)))
          (setf (cdr x) y)
          (my-loop temp x)))))

    (my-loop x '())))
</pre>

	<p>Running it:</p>


<pre>
(defvar v '(a b c d))
(defvar w (mystery v))

w
=&gt; (d c b a)

v
=&gt; (a)
</pre>

	<h4>Exercise 3.15</h4>


	<p>I&#8217;ll skip this. I think I understand box-and-pointer diagrams well enough (coming from a C background, I must) and they&#8217;re too tiresome to draw.</p>


	<h4>Exercise 3.16</h4>


	<p>Again, I will not draw the diagrams themselves, but I will present the data structures that cause this output. You can use a paper and a pencil to draw these simple diagrams according with the code. First, here&#8217;s the code in CL:</p>


<pre>
(defun bad-count-pairs (x)
  (if (not (consp x))
    0
    (+  (bad-count-pairs (car x))
        (bad-count-pairs (cdr x))
        1)))
</pre>

	<p>Now, let&#8217;s define a simple list:</p>


<pre>
(defvar z '(a b c))
(bad-count-pairs z)
=&gt; 3
</pre>

	<p>If we set the <code>car</code> of the second element of the list to point to the third (instead of the symbol <code>b</code>), we&#8217;ll get a count of 4:</p>


<pre>
(setf (car (cdr z)) (cddr z))
(bad-count-pairs z)
=&gt; 4
</pre>

	<p>If we also set the <code>car</code> of the first element of the list to point to the second:</p>


<pre>
(setf (car z) (cdr z))
(bad-count-pairs z)
=&gt; 7
</pre>

	<p>If this is not clear, draw the diagrams for these operations on paper and convince yourself!</p>


	<p>To get an endless loop, any loop in the list will suffice, such as setting the <code>car</code> of an element to itself:</p>


<pre>
(setf (car z) z)
(bad-count-pairs z)
=&gt; *** - Program stack overflow. RESET
</pre>

	<h4>Exercise 3.17</h4>


	<p>Since each object in CL is <code>eq</code> to itself, we can just keep a table of the pairs we&#8217;ve already seen. I&#8217;ll use CL&#8217;s hash table facility for this purpose:</p>


<pre>
(defun good-count-pairs (x)
  (let ((pairs-table (make-hash-table :test #'eq)))
    (labels (
      (traverse-count (x)
        (cond 
          ((not (consp x)) 0)
          ((gethash x pairs-table) 0)
          (t
            (setf (gethash x pairs-table) 1)
            (+  (traverse-count (car x))
                (traverse-count (cdr x))
                1)))))

      (traverse-count x))))
</pre>

	<p>Now, the count for all the structures of exercise 3.16 return 3, as expected.</p>


	<h4>Exercise 3.18</h4>


	<p>We&#8217;ll employ a technique similar to the <code>good-count-pairs</code> function &#8211; remember which pairs were already seen. If we run into one we&#8217;ve seen before, the list has loops.</p>


<pre>
(defun has-loop? (x)
  (let ((pairs-table (make-hash-table :test #'eq)))
    (labels (
      (traverse-list (x)
        (cond 
          ((null x) nil)
          ((gethash x pairs-table) t)
          (t
            (setf (gethash x pairs-table) 1)
            (traverse-list (cdr x))))))

      (traverse-list x))))
</pre>

	<h4>Exercise 3.19</h4>


	<p>The algorithm outlined in the solution of 3.18 uses linear space, of course<sup><a href="sicp-331#fn5">5</a></sup>. It is possible to do it in constant space, and in fact this is a common interview question. The algorithm for this is a bit clever, but simple to understand.</p>


	<p>To find out if a list has a loop, we&#8217;ll traverse it using two pointers. One will walk the list normally, from one element to the next. Another will advance 2 elements at a time. If, and only if, the list has a loop, the double-speed pointer will meet the normal pointer again after the beginning. Think about it for a moment &#8211; it actually makes a lot of sense.</p>


	<p>To do this I&#8217;ll employ an iterative technique, using CL&#8217;s <code>do</code> form. It has a built-in ability of advancing several iterators, which is useful in this case:</p>


<pre>
(defun has-loop-O1space? (x)
  (do ( (iter-1 (cdr x) (cdr iter-1))
        (iter-2 (cddr x) (cddr iter-2)))
      ((null iter-2) nil)
    (when (eq iter-1 iter-2) 
      (return t))))
</pre>

	<p>The code follows the algorithm I outlined exactly. One small thing to note is the lack of boundary tests. I rely on the very convenient fact that in CL, <code>(cdr nil)</code> is just <code>nil</code>. Therefore, there will be no errors generated in the <code>do</code> loop even if an empty list is passed in<sup><a href="sicp-331#fn6">6</a></sup>.</p>


	<h4>Exercise 3.20</h4>


	<p>Skipping.</p>


<img class="align-center" src="../../../images/hline.jpg" style="width: 320px; height: 5px;" />

	<p id="fn1"><sup>1</sup> I&#8217;m not 100% sure on this and would love some constructive comments for this claim. CL has so many dusty corners, one has to be an expert to know.</p>


	<p id="fn2"><sup>2</sup> I tried asking in the <code>#lisp</code> IRC room, but couldn&#8217;t fathom a deeper reason for <code>setf</code>&#8217;s superiority in this case.</p>


	<p id="fn3"><sup>3</sup> I&#8217;m attaching <code>my-</code> to the names of the functions because CL doesn&#8217;t allow redefining built-ins.</p>


	<p id="fn4"><sup>4</sup> Trying to do it for this exercise almost killed my Windows session.</p>


	<p id="fn5"><sup>5</sup> Since it&#8217;s a hash table, in most likeness it uses even more memory than the amount of elements in the list, but asymptotically it&#8217;s still O(n).</p>


	<p id="fn6"><sup>6</sup> In Scheme, on the other hand, <code>(cdr '())</code> generates an error &#8211; which forces the programmer to do more manual tests.</p>

    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-331';
            var disqus_url = 'http://eli.thegreenplace.net/2007/09/29/sicp-331';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-331#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>