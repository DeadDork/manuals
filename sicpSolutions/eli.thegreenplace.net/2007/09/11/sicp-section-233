<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP section 2.3.3 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-section-233"
                       rel="bookmark"
                       title="Permalink to SICP section 2.3.3">
                        SICP section 2.3.3
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> September 11, 2007 at 05:04</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <p>The solutions for this section are coded in Common Lisp.</p>


	<h4>Exercise 2.59</h4>


	<p>The union of two sets is the combination of elements from both sets, without duplicates. For sets <code>set1</code> and <code>set2</code>, we will walk over the elements of <code>set2</code>, and keep only those that aren&#8217;t already members of <code>set1</code>. The remaining elements will be appended to <code>set1</code>.</p>


<pre>
(defun union-set (set1 set2)
  (append 
    set1
    (remove-if 
      (lambda (x)
        (element-of-set? x set1))
      set2)))
</pre>

	<h4>Exercise 2.60</h4>


	<p>Sets with duplicates are traditionally called <em>multisets</em>. <code>element-of-set?</code> is the same function. I&#8217;ll implement it using CL&#8217;s built in function <code>member</code>:</p>


<pre>
(defun element-of-multiset? (x set)
  (member x set :test #'equal))
</pre>

	<p>Intersection is also similar:</p>


<pre>
(defun intersection-multiset (set1 set2)
  (cond ((or (null set1) (null set2)) '())
        ((element-of-multiset? (car set1) set2)
          (cons (car set1)
                (intersection-multiset (cdr set1) set2)))
        (t (intersection-multiset (cdr set1) set2))))
</pre>

	<p>However, <code>adjoin-set</code> and <code>union-set</code> are much simpler. Since we no longer care about duplicates, we don&#8217;t have to check that the elements we&#8217;re adding to a set don&#8217;t already exist in it:</p>


<pre>
(defun adjoin-multiset (x set)
  (cons x set))

(defun union-multiset (set1 set2)
  (append set1 set2))
</pre>

	<p>Efficiency: <code>element-of-multiset?</code> and <code>intersection-multiset</code> will perform roughly the same as their regular set counterparts<sup><a href="sicp-section-233#fn1">1</a></sup>. <code>adjoin-multiset</code> is <code>O(1)</code> (as opposed to <code>O(1)</code> for unordered-list sets) and <code>union-multiset</code> is <code>O(n)</code> (as opposed to <code>O(n^2)</code>, assuming that both sets have roughly <code>n</code> elements).</p>


	<p>This representation makes sense when most of the operations we do on sets are unions and adjoins, of course.</p>


	<h4>Exercise 2.61</h4>

<pre>
(defun adjoin-set (x set)
  (cond ((null set) (cons x '()))
        ((&lt; x (car set)) (cons x set))
        ((= x (car set)) set)
        (t (cons 
            (car set) 
            (adjoin-set x (cdr set))))))
</pre>



	<h4>Exercise 2.62</h4>


<pre>
(defun union-set (set1 set2)
  (let ((x1 (car set1)) (x2 (car set2)))
    (cond ((null x1) set2)
          ((null x2) set1)
          ((= x1 x2)
            (cons x1 (union-set (cdr set1) (cdr set2))))
          ((&lt; x1 x2)
            (cons x1 (union-set (cdr set1) set2)))
          (t
            (cons x2 (union-set set1 (cdr set2)))))))
</pre>

	<h4>Exercise 2.63</h4>


	<p>a. Yes, both procedures produce the same result for all trees&#8212;the in-order traversal.</p>


	<p>b. There&#8217;s no difference in the order of growth, both require <code>O(n)</code> steps.</p>


	<h4>Exercise 2.64</h4>

	<p>a. <code>partial-tree</code> divides the first <code>n</code> elements from <code>elts</code> into two groups&#8212;left and right, such that the sizes of the groups are <code>n/2</code> (the right group gets the extra element in case of an odd <code>n</code>). It recursively creates a right subtree and a left subtree from these two groups and then <code>cons</code>-es them into the current node, producing a larger tree. It&#8217;s a really beautiful example of recursive code, I must add.</p>


	<p>The tree produced by it for the list <code>(1 3 5 7 9 11)</code> is (this should be printed out in fixed font):</p>

<pre><code>
     5
    / \
   /   \
  1     9
   \   / \
    3 7  11
</code></pre>


	<p>b. The order of growth is <code>O(n)</code>, as eventually <code>partial-tree</code> traverses each element of the list once.</p>


	<h4>Exercise 2.65</h4>


	<p>Since we now know how to:</p>


	<ul>
	<li>Convert from an ordered binary tree to an ordered list<sup><a href="sicp-section-233#fn2">2</a></sup> in <code>O(n)</code></li>
		<li>Compute intersection and union of two ordered lists in <code>O(n)</code></li>
		<li>Convert back from an ordered list to a balanced binary tree in <code>O(n)</code></li>
	</ul>


	<p>We can just combine the operations and end up with a <code>O(n)</code> procedure.</p>


	<p>If we keep the name <code>union-set</code> for union computation on ordered lists, here is the union for binary trees:</p>


<pre>
(defun union-set-bintree (set1 set2)
  (let*  ((lset1 (tree-&gt;list-1 set1))
          (lset2 (tree-&gt;list-1 set2))
          (lunion (union-set lset1 lset2))
          (union (list-&gt;tree lunion)))
    union))
</pre>

	<p>The intersection is very similar<sup><a href="sicp-section-233#fn3">3</a></sup>:</p>


<pre>
(defun intersection-set-bintree (set1 set2)
  (let*  ((lset1 (tree-&gt;list-1 set1))
          (lset2 (tree-&gt;list-1 set2))
          (lintersect (intersection-set lset1 lset2))
          (intersect (list-&gt;tree lintersect)))
    intersect))
</pre>

	<h4>Exercise 2.66</h4>


	<p>The procedure is a simple conversion of the <code>element-of-set?</code> procedure:</p>


<pre>
(defun lookup (given-key set)
  (if (null set) 
    nil
    (let*  ((cur-entry (entry set))
            (cur-key (key cur-entry)))
      (cond ((= cur-key given-key) cur-entry)
            ((&lt; given-key cur-key)
              (lookup 
                given-key 
                (left-branch set)))
            ((&gt; given-key cur-key)
              (lookup 
                given-key 
                (right-branch set)))))))
</pre>

	<p>Note that I&#8217;ve defined the following simple abstraction for storing key-value pairs in the set instead of simple values:</p>


<pre>
(defun make-record (key data)
  (list key data))

(defun key (record)
  (car record))

(defun data (record)
  (cadr record))
</pre>

	<p id="fn1"><sup>1</sup> They will be a little slower on average, since multisets are longer than sets (because of all the duplicates). This depends on the actual data a lot.</p>


	<p id="fn2"><sup>2</sup> Since <code>tree->list-1</code> (and <code>tree->list-2</code>) traverse the tree in-order, they will print out an ordered list for an ordered binary tree.</p>


	<p id="fn3"><sup>3</sup> Naturally, in real code we&#8217;d find away to reuse the common code, perhaps abstracting the relations between the same operators on different representations in a dispatch table.</p>

    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-section-233';
            var disqus_url = 'http://eli.thegreenplace.net/2007/09/11/sicp-section-233';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-section-233#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>