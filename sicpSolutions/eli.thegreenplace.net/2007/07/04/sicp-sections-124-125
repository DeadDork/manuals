<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP sections 1.2.4 - 1.2.5 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-sections-124-125"
                       rel="bookmark"
                       title="Permalink to SICP sections 1.2.4 - 1.2.5">
                        SICP sections 1.2.4 - 1.2.5
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> July 04, 2007 at 04:45</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <h3>Section 1.2.4</h3>


	<h4>Exercise 1.16</h4>


This is the fast recursive version, for reference:
<pre>
(defun square (x)
  (* x x))

; Recursive version
(defun fast-expt (b n)
  (cond ((= n 0) 1)
        ((evenp n) (square (fast-expt b (/ n 2))))
        (t (* b (fast-expt b (- n 1))))))
</pre>

	<p>And this is the iterative version, the requirement of the exercise. Note my usage of the <code> &#38;optional </code> function parameter for <code>a</code>. Common Lisp supports optional and keyword parameters, which makes writing functions more convenient sometimes.</p>


<pre>
; Iterative version
; Note: using CL's &#38;optional arguments instead
; of the auxiliary function
;
(defun fast-expt-iter (b n &#38;optional (a 1))
  (cond ((= n 0) a)
        ((evenp n) (fast-expt-iter (square b) (/ n 2) a))
        (t (fast-expt-iter b (- n 1) (* b a)))))
</pre>

	<h4>Exercise 1.17</h4>


	<p>I will implement <code>double</code> and <code>halve</code> using normal CL operators. If our &#8220;machine&#8221; really doesn&#8217;t have multiplication instructions, the doubling and halving can be implemented by means of left and right shift, respectively.</p>


<pre>
(defun double (x)
  (* x 2))

(defun halve (x)
  (/ x 2))

(defun fast-mult (a b)
  (cond ((= b 0) 0)
        ((= b 1) a)
        ((evenp b) (double (fast-mult a (halve b))))
        (t (+ a (fast-mult a (- b 1))))))
</pre>

	<p>Note that there are two special cases &#8211; for 0 and for 1. The case <code>(= b 0)</code> will not be reached during the recursion &#8211; it&#8217;s only there to provide an answer when <code>(fast-mult a 0)</code> is requested by the user.</p>


	<h4>Exercise 1.18</h4>


	<p>After understanding the technique of solution in exercise 1.16, this one is quite simple. The auxuliary state variable is <code>acc</code> &#8211; it accumulates the sum, and the invariant <code>answer = a*b + acc</code> holds on each iteration.</p>


<pre>
(defun fast-mult-iter (a b &#38;optional (acc 0))
  (cond ((= b 0) acc)
        ((evenp b) (fast-mult-iter (double a) (halve b) acc))
        (t (fast-mult-iter a (1- b) (+ a acc)))))
</pre>

	<h4>Exercise 1.19</h4>


<pre>
Tpq(a,b) = {a &lt;- bq + aq + ap
           {b &lt;- bp + aq
</pre>

	<p>To apply <code>Tpq</code> twice, we replace <code>a</code> and <code>b</code> on the right hand side in the equations above with their definitions by <code>Tpq</code> (that is, with the full expansion).</p>


<pre>
Tp'q'(a,b) = {a &lt;- bpq + aqq + bqp + aqp + app + bqq + aqq + apq
             {b &lt;- bpp + aqp + bqq + aqq + apq

           = {a &lt;- (pq + qq + qp)*b + (pq + qq + qp)*a + (qq + pp)*a
           = {b &lt;- (pp + qq)*b + (pq + qp + qq)*a
</pre>

	<p>Restructured this way, we see that indeed the double transformation works, and we get <code>Tpq</code> back if we define:</p>


<pre>
p' = pp + qq
q' = pq + qp + qq
</pre>

	<p>Now we are ready to write the code:</p>


<pre>
(defun fast-fib-iter (n)
  (fast-fib-iter-aux 1 0 0 1 n))

(defun fast-fib-iter-aux (a b p q count)
  (cond ((= count 0) b)
        ((evenp count)
          (fast-fib-iter-aux a
                             b
                             (+ (* p p) (* q q))     ; p'
                             (+ (* 2 p q) (* q q))   ; q'
                             (/ count 2)))
        (t (fast-fib-iter-aux (+ (* b q) (* a q) (* a p))
                              (+ (* b p) (* a q))
                              p
                              q
                              (1- count)))))
</pre>

	<h3>Section 1.2.5</h3>


	<p>The authors present <em>Euclid&#8217;s Algorithm</em> for computing the <span class="caps">GCD</span> (Greatest Common Divisor) of two numbers. It&#8217;s a very interesting and important algorithm, worth to understand. Here is a simple proof I lifted from <span class="caps">TAOCP</span> section 1.1<sup><a href="sicp-sections-124-125#fn1">1</a></sup></p>


<pre>
GCD(a, b)

The remainder of the division a/b is r.
We can write this as:

qb + r = a
(for some integer q - the quotient of the division)

This means that any number that divides b and r must
also divide a.

The equation can also be rewritten as:

r = a - qb

This means that any number that divides a and b must
also divide r. So, the set of divisors of b and r
is the same as the set of divisors of a and b. In
particular, the greatest common divisor is the same.
Q.E.D.
</pre>

	<p>Also, the Lam√© theorem is presented &#8211; it provides a fascinating connection between Euclid&#8217;s algorithm and Fibonacci numbers, and this is used to prove the the runtime of Euclid&#8217;s algorithm is logarithmic.</p>


	<h4>Exercise 1.20</h4>


	<p>We get back to applicative vs. normal order evaluation. In applicative order, the process generated is as follows (the number following a comment counts actual executions of <code>remainder</code>):</p>


<pre>
(gcd 206 40)
(gcd 40 (remainder 206 40)) ; 1
(gcd 40 6) 
(gcd 6 (remaider 40 6)) ; 2
(gcd 6 4)
(gcd 4 (remainder 6 4)) ; 3
(gcd 4 2) 
(gcd 2 (remainder 4 2)) ; 4
(gcd 2 0)
2
</pre>

	<p>So, <code>remainder</code> is called 4 times, exactly in the sequence given in the example process. By <code>-&gt;</code> I mean that a call to <code>gcd</code> occurs.</p>


<pre>
(gcd 206 40)
(gcd 40 (remainder 206 40))
-&gt;
(if (= (remainder 206 40) 0) ; 1 time
  40
  (gcd (remainder 206 40)
    (remainder 40 (remainder 206 40))))
-&gt;
(if (= (remainder 40 (remainder 206 40)) 0) ; 2 times
  (remainder 206 40)
  (gcd 
    (remainder 
      40 
      (remainder 206 40))
    (remainder 
      (remainder 206 40) 
      (remainder 
        40 
        (remainder 206 40)))))
-&gt;
if (= (remainder (remainder 206 40) (remainder 40 (remainder 206 40))) 0) ; 4 times
  (remainder 40 (remainder 206 40))
  (gcd 
    (remainder 
      (remainder 206 40) 
      (remainder 
        40 
        (remainder 206 40)))
    (remainder
      (remainder 40 (remainder 206 40))
      (remainder 
        (remainder 206 40) 
        (remainder 
          40 
          (remainder 206 40)))))
-&gt;
if (= (...)) ; 7 times (b from above)

And this indeed equals 0, so the next is evaluated (a from above):
  (remainder 
    (remainder 206 40) 
    (remainder 
      40 
      (remainder 206 40)))

Another 4 calls. 
In total 1 + 2 + 4 + 7 + 4 = 18 calls to remainder
</pre>

	<h4>Footnotes</h4>


	<p id="fn1"><sup>1</sup> Donald Knuth&#8217;s <em>The Art Of Computer Programming</em>.</p>

    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-sections-124-125';
            var disqus_url = 'http://eli.thegreenplace.net/2007/07/04/sicp-sections-124-125';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-sections-124-125#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>