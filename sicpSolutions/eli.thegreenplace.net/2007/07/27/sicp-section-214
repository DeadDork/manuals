<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP section 2.1.4 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-section-214"
                       rel="bookmark"
                       title="Permalink to SICP section 2.1.4">
                        SICP section 2.1.4
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> July 27, 2007 at 07:52</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <h4>Exercise 2.7</h4>


	<p>Although in the definition of make-interval given by the authors it can&#8217;t be seen explicitly, from the interval arithmetic functions presented it is clear that the lower bound is the first argument to make-interval. Therefore I prefer to give more explicit names to the arguments of make-interval:</p>


<pre>
(defun make-interval (lower upper)
  (cons lower upper))

(defun upper-bound (interval)
  (cdr interval))

(defun lower-bound (interval)   
  (car interval))
</pre>

	<h4>Exercise 2.8</h4>


<pre>
(defun sub-interval (x y)
  (make-interval 
    (- (lower-bound x) (upper-bound y))
    (- (upper-bound x) (lower-bound y))))
</pre>

	<h4>Exercise 2.9</h4>


	<p>Suppose we&#8217;re adding two intervals: <code>x1,y1</code> and <code>x2,y2</code>. If we shift both bounds of each interval by the same amount, keeping the width intact, it is obvious that the sum of the intervals will have the same width as the original &#8211; the sum of the widths. To prove it mathematically, let&#8217;s represent an interval as only one bound and the width:</p>


<pre>
interval = (x, y)
Width: w = (y - x) / 2
=&gt;
interval = (x, x + 2*w)
</pre>

Adding two intervals:
<pre>
(x_1, x_1 + 2*w_1) + (x_2, x_2 + 2*w_2)
=
(x_1 + x_2, x_1 + x_2 + 2*w_1 + 2*w_2)
</pre>

	<p>The width of the sum is:</p>


<pre>
(y - x) / 2
=&gt; 
w_1 + w_2
</pre>

	<p>Q.E.D. &#8211; the width of the sum is dependent only on the widths of the addends, not the addends themselves. The same applies to subtracting two intervals and can be proven similarly.</p>


	<p>Now, to prove that this isn&#8217;t true for multiplication, consider the interval <code>2,4</code> (width = 1). Multiplied by <code>7,10</code> (width = 1.5) we get <code>14,40</code> (width = 13). Now, if we multiply it by another interval with width 1.5, say <code>2,5</code> we get <code>4,20</code> (width = 8). Therefore, the width of the multiplication doesn&#8217;t depend only on the widths of the multiplicands.</p>


	<p>The sample example disproves the lemma for division as well: <code>2,4</code> divided by <code>7,10</code> is <code>0.2, 0.57</code> (width = 0.185), while divided by <code>2,5</code> is <code>0.4, 2</code> (width = 0.8).</p>


	<h4>Exercise 2.10</h4>


<pre>
(defun div-interval (x y)
  (if (and 
        (>= (upper-bound y) 0) 
        (<= (lower-bound y) 0))
    (error "Denominator spans zero")
    (mul-interval 
      x
      (make-interval  (/ 1.0 (upper-bound y))
                    (/ 1.0 (lower-bound y))))))
</pre>

	<h4>Exercise 2.11</h4>


	<p>To understand the &#8220;cryptic comment&#8221;, let&#8217;s first think about the original implementation of <code>mul-interval</code>. Here is is:</p>


<pre>
(defun mul-interval (x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (upper-bound y)))
        (p4 (* (upper-bound x) (lower-bound y))))
    (make-interval 
      (min p1 p2 p3 p4)
      (max p1 p2 p3 p4))))
</pre>

	<p>Why are so many computations needed, instead of something simple like the implementation of <code>add-interval</code> ? Because of negative bounds. Had we had an assurance that both bounds would be positive, <code>mul-interval</code> would be as simple as <code>add-interval</code>. But since some of the bounds can be negative, we should take many cases into consideration.</p>


	<p>Now, Ben&#8217;s suggestion is absolutely correct. If we figure out which bounds are positive and which are negative we can save some multiplications. For example, if both bounds of both intervals are positive, we only need two. For each interval, there are 3 cases: (1) both bounds negative, (2) both positive, (3) one negative and one positive. Since we multiply two intervals, we have 9 cases in total. Behold, this is not pretty:</p>


<pre>
(defun mul-interval (x y)
  (let ((upper-x (upper-bound x))
        (lower-x (lower-bound x))
        (upper-y (upper-bound y))
        (lower-y (lower-bound y)))
    (cond ( (and  (&gt;= upper-x 0) (&gt;= lower-x 0)     ; x++, y++
                  (&gt;= upper-y 0) (&gt;= lower-y 0))
              (make-interval (* lower-x lower-y) (* upper-x upper-y)))
          ( (and  (&gt;= upper-x 0) (&gt;= lower-x 0)     ; x++, y+-
                  (&gt;= upper-y 0) (&lt; lower-y 0))
              (make-interval (* upper-x lower-y) (* upper-x upper-y)))
          ( (and  (&gt;= upper-x 0) (&gt;= lower-x 0)     ; x++ y--
                  (&lt; upper-y 0) (&lt; lower-y 0))
              (make-interval (* upper-x lower-y) (* lower-x upper-y)))
          ( (and  (&gt;= upper-x 0) (&lt; lower-x 0)     ; x+- y++
                  (&gt;= upper-y 0) (&gt;= lower-y 0))
              (make-interval (* upper-y lower-x) (* upper-y upper-x)))
          ( (and  (&gt;= upper-x 0) (&lt; lower-x 0)     ; x+- y+-
                  (&gt;= upper-y 0) (&lt; lower-y 0))
              ; Here we must do all the possible multiplications,
              ; because we can't know what the worst case is
              ;
              (let ((p1 (* lower-x lower-y))
                    (p2 (* lower-x upper-y))
                    (p3 (* upper-x upper-y))
                    (p4 (* upper-x lower-y)))
                (make-interval 
                  (min p1 p2 p3 p4)
                  (max p1 p2 p3 p4))))
          ( (and  (&gt;= upper-x 0) (&lt; lower-x 0)     ; x+- y--
                  (&lt; upper-y 0) (&lt; lower-y 0))
              (make-interval (* upper-x lower-y) (* lower-x lower-y)))
          ( (and  (&lt; upper-x 0) (&lt; lower-x 0)     ; x-- y++
                  (&gt;= upper-y 0) (&gt;= lower-y 0))
              (make-interval (* lower-x upper-y) (* lower-y upper-x)))
          ( (and  (&lt; upper-x 0) (&lt; lower-x 0)     ; x-- y+-
                  (&gt;= upper-y 0) (&lt; lower-y 0))
              (make-interval (* lower-x upper-y) (* lower-y lower-x)))
          ( (and  (&lt; upper-x 0) (&lt; lower-x 0)     ; x-- y--
                  (&lt; upper-y 0) (&lt; lower-y 0))
              (make-interval (* upper-x upper-y) (* lower-y lower-x)))

          (t (error "can't be")))))
</pre>

	<h4>Exercise 2.12</h4>

<pre>
(defun make-center-percent (c p)
  (let ((w (abs (* p (/ c 100)))))
    (make-center-width c w)))

(defun percent (i)
  (* 100 (/ (width i) (abs (center i)))))
</pre>

	<h4>Exercise 2.13</h4>


	<p>Let&#8217;s assume that the error of <code>X</code> is <code>dx</code>. Then:</p>


<pre>
Z + dz = (X + dx) * (Y + dy)
= X*dy + Y*dx + XY + dy*dx
=&gt;
Z = XY
dz = X*dy + Y*dx + dy*dx
</pre>

	<p>No surprises so far. But recall the assumption that <code>dx << X</code> and <code>dy << Y</code>. So we can drop the <code>dy*dx</code> term:</p>


<pre>
Z = XY
dz = X*dy + Y*dx
</pre>

	<p>In percentages:</p>


<pre>
dz/Z = (X*dy + Y*dx) / XY
=&gt;
dz/Z = dy/Y + dx/X
</pre>

	<p>This is the tolerance (in percentages) of the result in terms of the tolerances of the factors.</p>


	<h4>Exercise 2.14</h4>


	<p>First, showing that <code>par1</code> and <code>par2</code> indeed result different results:</p>


<pre>
(defun par1 (r1 r2)
  (div-interval 
    (mul-interval r1 r2)
    (add-interval r1 r2)))

(defun par2 (r1 r2)
  (let ((one (make-interval 1 1)))
    (div-interval 
      one
      (add-interval (div-interval one r1)
                    (div-interval one r2)))))

(defvar aa (make-center-width 5 0.1))
(defvar bb (make-center-width 10 0.1))

(print (par1 aa bb))
=&gt; (3.191447 . 3.4804058) 
(print (par2 aa bb))
=&gt; (3.2777026 . 3.3888159)
</pre>

	<p>The reason why this is so isn&#8217;t immediately obvious, but it becomes quite clear once we consider the two alternative formulas for parallel resistors carefully. Let&#8217;s take this formula:</p>


<pre>
1 / (1/R1 + 1/R2)
</pre>

	<p>And see how we reach the other formula from it. If we take the denominator, we can multiply <code>1/R1</code> by <code>R2/R2</code> without changing the formula, because <code>R2/R2</code> is 1 (A). Then we can multiply <code>1/R2</code> by <code>R1/R1</code> using the same reasoning. So we get:</p>


<pre>
1 / (R2/R1*R2 + R1/R1*R2) =&gt;
1 / ((R2 + R1)/R1*R2) =&gt;
R1*R2 / (R1 + R2)
</pre>

	<p>Viola! We&#8217;ve reached the second formula. So indeed they are algebraically equivalent. However, for intervals this transformation doesn&#8217;t work. Look above at the statement marked by (A). It says that <code>R2/R2 = 1</code>. But is it, when we talk about intervals ?</p>


<pre>
(defvar aa (make-center-width 5 0.1))
(print (div-interval aa aa))
=&gt;
(0.9607844 . 1.0408163) 
</pre>

	<p>Of course not. After all, it&#8217;s just two intervals divided one by another, and all the rules apply. No wonder Lem is getting different answers &#8211; he is using two different formulas!</p>


	<h4>Exercises 2.15 &#38; 2.16</h4>


	<p>This is a combined answer to both exercises:</p>


	<p>Eva Lu Ator is right, and an example can be seen in the computation done in the previous exercise &#8211; <code>par2</code> produces tighter bounds than <code>par1</code>. To understand why this is so, I will try to explain the problems with interval arithmetic (answer to 2.16):</p>


	<p>In doing arithmetic, we rely on some laws to hold without giving them much thought. Speaking mathematically, the real numbers are <a href="http://en.wikipedia.org/wiki/Field_%28mathematics%29">fields</a>. For example, we expect to have an inverse element for addition &#8211; for each element A to have an element A&#8217; so that A + A&#8217; = 0. It is easy to check that this doesn&#8217;t hold for intervals! An inverse element for multiplication also doesn&#8217;t exist (this is the problem we saw in exercise 2.14). The distributive law doesn&#8217;t hold &#8211; consider the expression <code>[1,2] * ([-3,-2] + [3,4])</code> &#8211; it makes a difference whether you do the additions or the multiplication first.</p>


	<p>To solve these problems at least for the simple arithmetic package we&#8217;re developing, I think we need to define the concept of identity for an interval. Operations must be able to identify if two operators are identical, and adjust the results accordingly.</p>



    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-section-214';
            var disqus_url = 'http://eli.thegreenplace.net/2007/07/27/sicp-section-214';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-section-214#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>