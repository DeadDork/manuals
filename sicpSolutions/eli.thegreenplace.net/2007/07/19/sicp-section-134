<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP section 1.3.4 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-section-134"
                       rel="bookmark"
                       title="Permalink to SICP section 1.3.4">
                        SICP section 1.3.4
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> July 19, 2007 at 05:53</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <p>Some important quotes from the book:</p>


	<blockquote>
		<p>We began section 1.3 with the observation that compound procedures are a crucial abstraction mechanism, because they permit us to express general methods of computing as explicit elements in our programming language. Now we&#8217;ve seen how higher-order procedures permit us to manipulate these general methods to create further abstractions.</p>
	</blockquote>


<blockquote> [...] In general, programming languages impose restrictions on the ways in which computational elements can be manipulated. Elements with the fewest restrictions are said to have first-class status. Some of the ``rights and privileges&#8217;&#8217; of first-class elements are: (1) They may be named by variables; (2) They may be passed as arguments to procedures; (3) They may be returned as the results of procedures; (4) They may be included in data structures; Lisp, unlike other common programming languages, awards procedures full first-class status. This poses challenges for efficient implementation, but the resulting gain in expressive power is enormous.
</blockquote>

	<p>Here is the code for <code>newtons-method</code> in CL. Note that this time I&#8217;ll follow Lisp&#8217;s convention of signifying the names of global variables by asterisks:</p>


<pre>
(defvar *tolerance* 0.00001)

(defun fixed-point (f first-guess)
  (labels ( 
    (close-enough? (v1 v2)
      (&lt; (abs (- v1 v2)) *tolerance*))
    (try (guess)
      (let ((next (funcall f guess)))
        (if (close-enough? guess next)
          next
          (try next)))))

    (try first-guess)))

(defvar *dx* 0.00001)

(defun deriv (g)
  (lambda (x)
    (/  (-  (funcall g (+ x *dx*))
            (funcall g x))
        *dx*)))

(defun newton-transform (g)
  (lambda (x)
    (- x  (/ (funcall g x) 
          (funcall (deriv g) x)))))

(defun newtons-method (g guess)
  (fixed-point (newton-transform g) guess))
</pre>

	<p>Note again that CL&#8217;s semantics of handling functions makes the code a little more cumbersome than the Scheme code of the authors. While anonymous functions defined by <code>lambda</code> can be passed as arguments where functions are expected (for example the second argument in the call to <code>fixed-point</code> in <code>newtons-method</code>), when applied to arguments explicitly, a <code>funcall</code> must be used (for example the application of <code>(deriv g)</code> in the last line of <code>newton-transform</code>).</p>


	<h4>Exercise 1.40</h4>


	<p>This is just an exercise in building functions from arguments and returning them.</p>


<pre>
(defun cubic (a b c)
  (lambda (x)
    (+  (cube x)
        (* a (square x))
        (* b x)
        c)))
</pre>

	<p>Note that <code>cubic</code> is a function builder &#8211; each time it&#8217;s called with some arguments, it creates a new function and returns is.</p>


	<h4>Exercise 1.41</h4>


	<p>Again, this is a function builder. It is even more interesting, because its argument is a function and not numbers. So <code>double</code> takes a function as an argument and returns a function &#8211; it&#8217;s almost a full case study of higher-order functions by itself!</p>


<pre>
(defun double (f)
  (lambda (x)
    (funcall f (funcall f x))))

(print (funcall (double #'1+) 1))
=&gt;
3
</pre>

	<p>What does <code>(double double)</code> do ? Applies f twice to its argument, when f is a function that applies some function twice to its argument. Therefore, it applies the function it receives 4 times. <code>((double (double double))</code> applies the function it receives 4*4 = 16 times. Therefore:</p>


<pre>
(print  (funcall 
          (funcall 
            (double (double #'double)) 
            #'1+) 
          5))
=&gt; 
21
</pre>

	<h4>Exercise 1.42</h4>


	<p>This is very similar to the previous exercise:</p>


<pre>
(defun compose (f g)
  (lambda (x)
    (funcall f (funcall g x))))
</pre>

	<h4>Exercise 1.43</h4>


<pre>
(defun repeated (f n)
  (if (= n 0)
    #'identity
    (compose f (repeated f (1- n)))))
</pre>

	<p>This is a process that &#8220;accumulates&#8221; applications of <code>f</code> on itself. Note the stop condition &#8211; <code>identity</code> is returned for <code>n = 0</code>. This means that for <code>n = 1</code>, <code>f</code> is composed with <code>identity</code>, and the result is just applying <code>f</code> once, which is what we need.</p>


	<h4>Exercise 1.44</h4>


<pre>
(defvar *dx* 0.00001)

(defun smooth (f)
  (lambda (x)
    (/ (+ (funcall f (- x *dx*))
          (funcall f x)
          (funcall f (+ x *dx*)))
        3)))

(defun n-fold-smooth (f n)
  (funcall (repeated #'smooth n) f))
</pre>

	<h4>Exercise 1.45</h4>


	<p>First, recall the code of section 1.3.3 and the solutions to its exercises. Here is the <code>dampen-sqrt</code> function again:</p>


<pre>
(defvar *tolerance* 0.00001)

(defun fixed-point (f first-guess)
  (labels ( 
    (close-enough? (v1 v2)
      (&lt; (abs (- v1 v2)) *tolerance*))
    (try (guess)
      (let ((next (funcall f guess)))
        (if (close-enough? guess next)
          next
          (try next)))))

    (try first-guess)))

(defun average (a b)
  (/ (+ a b) 2))

(defun dampen-sqrt (x) 
  (fixed-point 
    (lambda (y) 
      (average y (/ x y)))
    1.0))
</pre>

	<p>Now, let&#8217;s implement a more general dampening function for any root of x:</p>


<pre>
(defun dampen-root (x n)
  (fixed-point
    (lambda (y)
      (average y (/ x (expt y (1- n)))))
    1.0))
</pre>

	<p><code>n</code> will be 2 for the square root, 3 for the cube root, 4 for the 4th root and so on. Using this function we can try computing various roots:</p>


<pre>
(print (dampen-root 2 2))
=&gt; 1.4142
(print (dampen-root 2 3))
=&gt; 1.2599
(print (dampen-root 2 4))
=&gt; *** - Program stack overflow. RESET
</pre>

	<p>Indeed, the simple 1-step dampening doesn&#8217;t work for the 4th root &#8211; the computation doesn&#8217;t converge. So let&#8217;s follow the authors&#8217; advice and implement a repeated dampening<sup><a href="sicp-section-134#fn1">1</a></sup> version:</p>


<pre>
(defun repeated-dampen-root (x nroot nrepeat)
  (fixed-point-of-transform
    (lambda (y) (average y (/ x (expt y (1- nroot)))))
    (repeated #'average-damp nrepeat)
    1.0))

(print (repeated-dampen-root 2 4 2))
=&gt; 1.89
</pre>

	<p>This is better.</p>


	<h4>Exercise 1.46</h4>


<pre>
(defun iterative-improve (good-enough? improve)
  (lambda (first-guess)
    (labels (
      (improve-iter (guess)
        (let ((improved-guess (funcall improve guess)))
          (if (funcall good-enough? guess improved-guess)
            improved-guess
            (improve-iter improved-guess)))))

      (improve-iter first-guess))))

(defun improved-sqrt (num)
  (funcall  (iterative-improve 
              (lambda (x y)
                (let ((ratio (/ x y)))
                  (and (&lt; ratio 1.001) (&gt; ratio 0.999))))
              (lambda (guess)
                (average guess (/ num guess))))
            1.0))

(defvar *tolerance* 0.00001)

(defun improved-fixed-point (f first-guess)
  (funcall  (iterative-improve
              (lambda (x y)
                (&lt; (abs (- x y)) *tolerance*))
              (lambda (guess)
                (funcall f guess)))
            first-guess))
</pre>

<img class="align-center" src="../../../images/hline.jpg" style="width: 320px; height: 5px;" />

	<p id="fn1"><sup>1</sup> Thanks to Sean who suggested a bug fix in this function (see Comments to this post).</p>

    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-section-134';
            var disqus_url = 'http://eli.thegreenplace.net/2007/07/19/sicp-section-134';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-section-134#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>