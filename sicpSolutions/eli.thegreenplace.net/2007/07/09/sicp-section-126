<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP section 1.2.6 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-section-126"
                       rel="bookmark"
                       title="Permalink to SICP section 1.2.6">
                        SICP section 1.2.6
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> July 09, 2007 at 05:47</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <p>The section begins with a discussion of the deterministic test of primality of <code>n</code> by testing all numbers between 2 and the square root of <code>n</code>. Here is the CL code:</p>


<pre>
(defun smallest-divisor (n)
  (find-divisor n 2))

(defun find-divisor (n test-divisor)
  (cond ((&gt; (square test-divisor) n) n)
    ((divides? test-divisor n) test-divisor)
    (t (find-divisor n (+ test-divisor 1)))))

(defun divides? (a b)
  (= (rem b a) 0))

(defun square (x)
  (* x x))

(defun prime? (n)
  (= n (smallest-divisor n)))
</pre>

	<p>And this is the code for <code>expmod</code>:</p>


<pre>
(defun expmod (base exponent m)
  (cond ((= exponent 0) 1)
        ((even? exponent)
          (rem  (square (expmod base (/ exponent 2) m))
                m))
        (t 
          (rem  (* base (expmod base (- exponent 1) m))
                m))))
</pre>

	<p>As the authors said, you can easily see its similarity to <code>fast-expt</code> that was presented in an earlier section. Using a rule from number theory for multiplication with modulo, it is translated into this fast exponentation modulo function. Here is the rest of the code that implements fast probabilistic prime testing with the Fermat test:</p>


<pre>
(defun fermat-test (n)
  (defun try-it (a)
    (= (expmod a n n) a))
  (try-it (1+ (random (1- n)))))

(defun fast-prime? (n times)
  (cond ((= times 0) t)
        ((fermat-test n) (fast-prime? n (1- times)))
        (t nil)))
</pre>

	<h4>Exercise 1.21</h4>


	<p>Let&#8217;s practice with CL&#8217;s <code>dolist</code> and <code>format</code> forms:</p>


<pre>
(dolist (num '(199 1999 19999))
  (format t 
    "The smallest divisor of ~d is ~d~%" 
    num (smallest-divisor num)))
</pre>

	<p>So, we see that while 199 and 1999 are primes, 19999&#8217;s smallest divisor is 7.</p>


	<h4>Exercise 1.22</h4>


	<p>Common Lisp has a more convenient method for measuring the runtime of code. The macro <code>time</code> can be called on any CL code and after running (evaluating) it, reports how long it took and how much memory it used. This is the <code>search-for-primes</code> function. Note that it uses several CL features like <code>when</code> and <code>do</code>:</p>


<pre>
(defun search-for-primes (start end)
  ; To go over the even numbers, we'll start from start+1
  ; if start is even and advance in steps of 2
  ;
  (let ((start (if (evenp start) (1+ start) start)))
    (do ((i start (+ i 2))) 
        ((&gt; i end))
      (when (prime? i)
        (format t "~d is prime~%" i)))))
</pre>

	<p>And now I can run this function in any range I want, for example:</p>


<pre>
(search-for-primes 1000 1019)
=&gt;
1009 is prime
1013 is prime
1019 is prime
</pre>

	<p>Curiously, timing the runs for 1,000 10,000 100,000 and 1,000,000 doesn&#8217;t work because my computer is too fast (SICP was written in the 80s!) &#8211; all the runs just take 0 seconds, which means that the runtime is below the resolution of the timer used in the timing. However, if I run it in a loop, I can get more reliable results:</p>


<pre>
(time (dotimes (i 1000 t) (search-for-primes 1000 1019)))
=&gt;
1009 is prime
1013 is prime
1019 is prime
Real time: 0.6875 sec.
Run time: 0.6875 sec.
Space: 2472736 Bytes
GC: 4, GC time: 0.03125 sec.
</pre>

So, the runtimes I&#8217;m getting are:
<pre>
Range        Runtime for 1,000 iterations
-----        ----------------------------
1,000        0.68
10,000       2.5
100,000      6.15
1,000,000    17.8
</pre>

	<p>These runtimes are definitely not <code>sqrt(10)</code> multiples of one another, but it&#8217;s not too far from it. Of course, the <code>O(sqrt(10))</code> runtime is only an asymptotic bound. The real runtime depends on a lot of other things &#8211; the constants, the machine, the compiler, etc. The asymptotic bound is useful for an estimation, not exact prediction of the runtime.</p>


	<h4>Exercise 1.23</h4>


<code>find-divisor</code> will be rewritten as follows:
<pre>
(defun next-divisor (n)
  (if (= n 2)
    3
    (+ n 2)))

(defun find-divisor (n test-divisor)
  (cond ((&gt; (square test-divisor) n) n)
    ((divides? test-divisor n) test-divisor)
    (t (find-divisor n (next-divisor test-divisor)))))
</pre>

	<p>When I run <code>(prime? 1000037)</code> 10000 times with the two methods I see that the speedup is indeed almost 2 (50 seconds vs. 26 seconds).</p>


	<h4>Exercise 1.24</h4>


	<p>While the speedup can&#8217;t be matched exactly, the runtime grows very slowly which demonstrates logarithmic growth. For example, testing 1,037 (1k times) takes 0.1 seconds, 1,000,037 takes 0.67 seconds and 1,000,000,007 takes 1.07 seconds.</p>


	<h4>Exercise 1.25</h4>


	<p>There is a huge flaw in Alyssa&#8217;s code. The call to <code>fast-expt</code> will result in huge numbers being crunched. Curiously, this problem takes time to show in Common Lisp which has built-in arbitrary precision arithmetic (huge integers). In many languages special libraries are required to handle integers larger than the machine word size (typically 2^32 &#8211; 1 for unsigned integers on 32-bit machines). Since prime tests are usually invoked on huge numbers (for example, the numbers used in <span class="caps">RSA</span> are typically hundreds of digits long), it just won&#8217;t work. And if it will, it will take very long time because bignum arithmetic takes much much longer than ordinary arithmetic.</p>


	<p>The <code>expmod</code> implementation provided by the authors, on the other hand, doesn&#8217;t suffer from this problem. It uses a mathematical trick that keeps all numbers it works on low.</p>


	<h4>Exercise 1.26</h4>


	<p>This is a good time to present the Common Lisp built-in macro <code>trace</code>. When asked to <code>trace</code> a function prior to calling it, CL environments will display all calls to the function. This is very useful in order to analyze the call-graph of a function. For example:</p>


<pre>
; For CLISP, in order to indent recursive calls
(setf custom:*trace-indent* 1)

(trace expmod)
(expmod 15 10 10)
</pre>

	<p>Shows:</p>


<pre>
;; Tracing function EXPMOD.
 1. Trace: (EXPMOD '15 '10 '10)
  2. Trace: (EXPMOD '15 '5 '10)
   3. Trace: (EXPMOD '15 '4 '10)
    4. Trace: (EXPMOD '15 '2 '10)
     5. Trace: (EXPMOD '15 '1 '10)
      6. Trace: (EXPMOD '15 '0 '10)
      6. Trace: EXPMOD ==&gt; 1
     5. Trace: EXPMOD ==&gt; 5
    4. Trace: EXPMOD ==&gt; 5
   3. Trace: EXPMOD ==&gt; 5
  2. Trace: EXPMOD ==&gt; 5
 1. Trace: EXPMOD ==&gt; 5
</pre>

	<p>Implementing the alternative <code>expmod</code>:</p>


<pre>
(defun louis-expmod (base exponent m)
  (cond ((= exponent 0) 1)
        ((evenp exponent)
          (rem  (*  (louis-expmod base (/ exponent 2) m)
                    (louis-expmod base (/ exponent 2) m))
                m))
        (t 
          (rem  (* base (louis-expmod base (- exponent 1) m))
                m))))
</pre>

	<p>When traced with the same arguments we used to call <code>expmod</code> in the example above, this function generates:</p>


<pre>
;; Tracing function LOUIS-EXPMOD.
 1. Trace: (LOUIS-EXPMOD '15 '10 '10)
  2. Trace: (LOUIS-EXPMOD '15 '5 '10)
   3. Trace: (LOUIS-EXPMOD '15 '4 '10)
    4. Trace: (LOUIS-EXPMOD '15 '2 '10)
     5. Trace: (LOUIS-EXPMOD '15 '1 '10)
      6. Trace: (LOUIS-EXPMOD '15 '0 '10)
      6. Trace: LOUIS-EXPMOD ==&gt; 1
     5. Trace: LOUIS-EXPMOD ==&gt; 5
     5. Trace: (LOUIS-EXPMOD '15 '1 '10)
      6. Trace: (LOUIS-EXPMOD '15 '0 '10)
      6. Trace: LOUIS-EXPMOD ==&gt; 1
     5. Trace: LOUIS-EXPMOD ==&gt; 5
    4. Trace: LOUIS-EXPMOD ==&gt; 5
    4. Trace: (LOUIS-EXPMOD '15 '2 '10)
     5. Trace: (LOUIS-EXPMOD '15 '1 '10)
      6. Trace: (LOUIS-EXPMOD '15 '0 '10)
      6. Trace: LOUIS-EXPMOD ==&gt; 1
     5. Trace: LOUIS-EXPMOD ==&gt; 5
     5. Trace: (LOUIS-EXPMOD '15 '1 '10)
      6. Trace: (LOUIS-EXPMOD '15 '0 '10)
      6. Trace: LOUIS-EXPMOD ==&gt; 1
     5. Trace: LOUIS-EXPMOD ==&gt; 5
    4. Trace: LOUIS-EXPMOD ==&gt; 5
   3. Trace: LOUIS-EXPMOD ==&gt; 5
  2. Trace: LOUIS-EXPMOD ==&gt; 5
  2. Trace: (LOUIS-EXPMOD '15 '5 '10)
   3. Trace: (LOUIS-EXPMOD '15 '4 '10)
    4. Trace: (LOUIS-EXPMOD '15 '2 '10)
     5. Trace: (LOUIS-EXPMOD '15 '1 '10)
      6. Trace: (LOUIS-EXPMOD '15 '0 '10)
      6. Trace: LOUIS-EXPMOD ==&gt; 1
     5. Trace: LOUIS-EXPMOD ==&gt; 5
     5. Trace: (LOUIS-EXPMOD '15 '1 '10)
      6. Trace: (LOUIS-EXPMOD '15 '0 '10)
      6. Trace: LOUIS-EXPMOD ==&gt; 1
     5. Trace: LOUIS-EXPMOD ==&gt; 5
    4. Trace: LOUIS-EXPMOD ==&gt; 5
    4. Trace: (LOUIS-EXPMOD '15 '2 '10)
     5. Trace: (LOUIS-EXPMOD '15 '1 '10)
      6. Trace: (LOUIS-EXPMOD '15 '0 '10)
      6. Trace: LOUIS-EXPMOD ==&gt; 1
     5. Trace: LOUIS-EXPMOD ==&gt; 5
     5. Trace: (LOUIS-EXPMOD '15 '1 '10)
      6. Trace: (LOUIS-EXPMOD '15 '0 '10)
      6. Trace: LOUIS-EXPMOD ==&gt; 1
     5. Trace: LOUIS-EXPMOD ==&gt; 5
    4. Trace: LOUIS-EXPMOD ==&gt; 5
   3. Trace: LOUIS-EXPMOD ==&gt; 5
  2. Trace: LOUIS-EXPMOD ==&gt; 5
 1. Trace: LOUIS-EXPMOD ==&gt; 5
</pre>

	<p>What has happened here ? Well, we see that the double call to itself has transformed <code>expmod</code> from a linear recursion (like the one in the factorial computation) to a tree recursion (like the one in the Fibonacci computation), and thus the amount of calls grows exponentially. To understand it logically, note that we turned a single call to itself in the <code>evenp</code> branch to two calls. But this not merely multiplies the amount of calls by two &#8211; it multiplies it by two for each level, so if previously we had N calls, now we have <code>2^N</code> calls. In the case of <code>expmod</code>, instead of logarithmic runtime we get linear runtime <code>(2^logN = N)</code>.</p>


	<h4>Exercise 1.27</h4>


	<p>This is the solution of the exercise:</p>


<pre>
(defun full-fermat-test (n)
  (defun aux-test (a)  
    (cond ((= a 1) t)
          ((/= (expmod a n n) a) nil)
          (t (aux-test (1- a)))))
  (aux-test (1- n)))
</pre>

	<p>Using this function it is possible to test that 561, 1105, 1729, 2465, 2821, and 6601 are indeed Carmichael numbers, since they elude the test for all <code>a</code>. However, there is a slight problem worth mentioning here. On my Windows machine, with <span class="caps">CLISP 2</span>.41, the call <code>(full-fermat-test 6601)</code> produces a stack overflow. Let&#8217;s understand why.</p>


	<p><code>full-fermat-test</code> is an iterative process, because <code>aux-test</code> is tail recursive. However, recall that I mentioned that, at least in <span class="caps">CLISP</span>, the tail recursion optimization is implemented only when functions are compiled. To make it work, I had to rewrite the test as:</p>


<pre>
(defun full-fermat-test (n)
  (defun aux-test (a)  
    (cond ((= a 1) t)
          ((/= (expmod a n n) a) nil)
          (t (aux-test (1- a)))))
  (compile 'aux-test)
  (aux-test (1- n)))
</pre>

	<p>Now the call <code>(full-fermat-test 6601)</code> doesn&#8217;t overflow the stack. Just for fun, here is a version of the same test using a DO loop:</p>


<pre>
(defun full-fermat-test-loop (n)
  (do ((a 1 (+ a 1)))
      ((= a n) t)
      (when (/= (expmod a n n) a)
        (return nil))))
</pre>

	<p>When timed against each other, these two tests (the compiled tail recursive one and the one using DO) run for about the same time, which makes sense because of their similarity.</p>


	<h4>Exercise 1.28</h4>


<pre>
(defun expmod (base exponent m)
  (cond ((= exponent 0) 1)
        ((evenp exponent)
          (let* ( (candidate (expmod base (/ exponent 2) m))
                  (root (rem (square candidate) m)))
                (if (and (/= candidate 1) (/= candidate (1- m)) (= root 1))
                  0
                  root)))
        (t 
          (rem  (* base (expmod base (- exponent 1) m))
                m))))

; Returns T from numbers that are probably prime
(defun miller-rabin-test (n)
  (let ((testnum (1+ (random (1- n)))))
    (= (expmod testnum (1- n) n) 1)))
</pre>

	<p>Note the test in <code>miller-rabin-test</code>. It will fail when a nontrivial root of 1 modulo n is discovered, because in that case <code>expmod</code> propagates 0.</p>

    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-section-126';
            var disqus_url = 'http://eli.thegreenplace.net/2007/07/09/sicp-section-126';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-section-126#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>