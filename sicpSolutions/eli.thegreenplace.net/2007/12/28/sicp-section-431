<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP section 4.3.1 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-section-431"
                       rel="bookmark"
                       title="Permalink to SICP section 4.3.1">
                        SICP section 4.3.1
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> December 28, 2007 at 21:01</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <p>The material in section 4.3 is far from simple, and requires careful reading of the book in order to understand it fully<sup><a href="sicp-section-431#fn1">1</a></sup>. Also, if you <em>really</em> want to grasp what&#8217;s going under the hood of nondeterministic evaluation, there is no alternative to reimplementing the <code>amb</code> evaluator with your own hands following the instructions in section 4.3.3</p>

<!--more-->
	<p>In order to test my solutions to exercises in sections 4.3.1 and 4.3.2 I&#8217;ve implemented the <code>amb</code> evaluator in Common Lisp. Below are some selected parts with explanations.</p>


	<h4>Understanding the <code>amb</code> evaluator</h4>


	<p>From &#8220;Structure of the evaluator&#8221;</p>


	<blockquote>
		<p>A success continuation is a procedure of two arguments: the value just obtained and another failure continuation to be used if that value leads to a subsequent failure. A failure continuation is a procedure of no arguments.</p>
	</blockquote>


	<p>This is a crucial point, and it&#8217;s valuable to understand why this is so. From an earlier paragraph, in &#8220;Execution procedures and continuations&#8221;</p>


	<blockquote>
		<p>It is the job of the success continuation to receive a value and proceed with the computation. Along with that value, the success continuation is passed another failure continuation, which is to be called subsequently if the use of that value leads to a dead end. It is the job of the failure continuation to try another branch of the nondeterministic process.</p>
	</blockquote>


	<p>The simple expressions presented also demand some explanations. Compare the original <code>analyze-self-evaluating</code>:</p>


<pre>
(defun analyze-self-evaluating (exp)
  (lambda (env) exp))
</pre>

	<p>With the new version:</p>


<pre>
(defun analyze-self-evaluating (exp)
  (lambda (env succeed fail)
    (succeed exp fail)))
</pre>

	<p>What&#8217;s going on here? Why is <code>succeed</code> called? Because:</p>


	<blockquote>
		<p>[...] the execution procedures in the amb evaluator take three arguments: the environment, and two procedures called continuation procedures. The evaluation of an expression will finish by calling one of these two continuations: If the evaluation results in a value, the success continuation is called with that value; if the evaluation results in the discovery of a dead end, the failure continuation is called.</p>
	</blockquote>


	<p>So yes, even the simplest evaluations must obey these rules. A self evaluating expression always succeeds, hence <code>succeed</code> is called, passing its value on. Also, recall that <code>succeed</code> is a procedure of two arguments: the value and a <code>fail</code> continuation.</p>


	<p>Here&#8217;s <code>analyze-if</code>:</p>


<pre>
(defun analyze-if (exp)
  (let ((pproc (analyze. (if-predicate exp)))
        (cproc (analyze. (if-consequent exp)))
        (aproc (analyze. (if-alternative exp))))
    (lambda (env succeed fail)
      (funcall pproc 
        env
        ;; success continuation for evaluating the
        ;; predicate to obtain pred-value
        (lambda (pred-value fail2)
          (if (true? pred-value)
            (funcall cproc env succeed fail2)
            (funcall aproc env succeed fail2)))
        ;; failure continuation for evaluating the
        ;; predicate
        fail))))
</pre>

	<p>It is not immediately obvious (at least for me!) why it works this way. Consider, however, what is the result of each call to <code>analyze.</code>. It is a procedure that accepts <code>(env succeed fail)</code> as arguments and is expected to call <code>succeed</code> if it results in a value and <code>fail</code> otherwise. But without first calling <code>pproc</code> we don&#8217;t know here if there is a value, so we call <code>pproc</code> with a <code>succeed</code> and <code>fail</code> continuations of its own. The <code>succeed</code> continuation we provide it performs the <em>actual</em> job of the <code>if</code> form<sup><a href="sicp-section-431#fn2">2</a></sup>.</p>


	<p>The new <code>analyze-assignment</code> is:</p>


<pre>
(defun analyze-assignment (exp)
  (let ((var (assignment-variable exp))
        (vproc (analyze. (assignment-value exp))))
    (lambda (env succeed fail)
      (funcall vproc 
        env
        (lambda (val fail2)       
          (let ((old-value
                  (lookup-variable-value var env)))
            (set-variable-value! var val env)
            (succeed 
              'ok
              (lambda ()         
                (set-variable-value! 
                  var 
                  old-value
                  env)
                (funcall fail2)))))
        fail))))
</pre>

	<p>When I first read the description of the <code>amb</code> evaluator I thought that it&#8217;s probably a lot of trouble &#8220;rolling back&#8221; assignments from failed paths. However, in <code>analyze-assignment</code>, continuation-passing style solves the problem with elegance.</p>


	<p>If the call to <code>vproc</code> succeeds, we continue by actually assigning the value and passing on a <code>fail</code> continuation that resets the old value in case this path ever becomes failed. That&#8217;s it &#8211; so simple.</p>


	<p>At last, let&#8217;s inspect <code>analyze-amb</code>:</p>


<pre>
(defun analyze-amb (exp)
  (let ((cprocs (mapcar #'analyze. (amb-choices exp))))
    (lambda (env succeed fail)
      (labels (
          (try-next (choices)
            (if (null choices)
              (funcall fail)
              (funcall (car choices)
                env
                succeed
                (lambda ()
                  (try-next (cdr choices)))))))
        (try-next cprocs)))))
</pre>

	<p>This one simply tries all the choices it was given in order, until one of them succeeds. It iterates through the choices by passing on a <code>fail</code> continuation that tries the next choice.</p>


	<p>You can download the full <code>amb</code> evaluator here: evaluator_amb.lisp. Now we&#8217;re ready to solve the exercises of section 4.3.1</p>


	<h4>Exercise 4.35</h4>


<pre>
(define (an-integer-between low high)
  (require (&lt;= low high))
  (amb low (an-integer-between (+ low 1) high)))
</pre>

	<p>Now we can use <code>a-pythagorean-triple-between</code> like this<sup><a href="sicp-section-431#fn3">3</a></sup>:</p>


<pre>
;;; Amb-Eval input:
(a-pythagorean-triple-between 1 6)

;;; Starting a new problem 
;;; Amb-Eval value:
(3 4 5)
</pre>

	<h4>Exercise 4.36</h4>


	<p>To understand why that wouldn&#8217;t work, we&#8217;ll modify <code>a-pythagorean-triple-between</code> as suggested and add a printout<sup><a href="sicp-section-431#fn4">4</a></sup> to show which values it tries:</p>


<pre>
(interpret
  '(define (aptb low)
    (let ((i (an-integer-starting-from low)))
      (let ((j (an-integer-starting-from low)))
        (let ((k (an-integer-starting-from low)))
          (format true "pyt: ~a ~a ~a~%" i j k)
          (require (= (+ (* i i) (* j j)) (* k k)))
          (list i j k))))))
</pre>

<pre>
(aptb 1)

;;; Starting a new problem pyt: 1 1 1
pyt: 1 1 1
pyt: 1 1 2
pyt: 1 1 3
pyt: 1 1 4
pyt: 1 1 5
pyt: 1 1 6
pyt: 1 1 7
pyt: 1 1 8
pyt: 1 1 9

...
...
</pre>

	<p>Whoops! Now it should be quite clear why providing an infinite range wouldn&#8217;t work. As the authors noted in the book, the <code>amb</code> evaluator employs <em>depth-first search</em> to backtrack, so it tries to exhaust each path before trying another one. In this case, it tries to exhaust <code>k</code> &#8211; an impossible task<sup><a href="sicp-section-431#fn5">5</a></sup>.</p>


	<p>One approach to solve it is to generate the triplets in a more balanced fashion, using <em>breadth-first search</em> on the tree of possibilities:</p>


<pre>
(interpret
  '(define (nextc trp)
    (let ((a (car trp))
          (b (car (cdr trp)))
          (c (car (cdr (cdr trp)))))
      (cond ((= a b c)
              (list 1 1 (+ c 1)))
            ((= a b)
              (list 1 (+ b 1) c))
            (else
              (list (+ a 1) b c))))))
</pre>

	<p>This procedure will iterate over triplets, given the current one. Here&#8217;s a sample order it generates:</p>


<pre>
(1 1 1)
(1 1 2)
(1 2 2)
(2 2 2)
(1 1 3)
(1 2 3)
(2 2 3)
(1 3 3)
(2 3 3)
(3 3 3)
(1 1 4)
(1 2 4)
(2 2 4)
(1 3 4)
(2 3 4)
</pre>

	<p>Now, we&#8217;re ready for the implementation:</p>


<pre>
(interpret
  '(define (a-triplet)
    (a-triplet-rec '(1 1 1))))

(interpret
  '(define (a-triplet-rec trp)
    (amb
      trp
      (a-triplet-rec (nextc trp)))))

(interpret
  '(define (aptb)
    (let ((trp (a-triplet)))
      (let ((i (car trp))
            (j (car (cdr trp)))
            (k (car (cdr (cdr trp)))))
        (require (= (+ (* i i) (* j j)) (* k k)))
        (list i j k)))))
</pre>

	<p>Here&#8217;s a sample interaction:</p>


<pre>
;;; Amb-Eval input:
(aptb)

;;; Starting a new problem
;;; Amb-Eval value:
(3 4 5)

;;; Amb-Eval input:
try-again

;;; Amb-Eval value:
(6 8 10)

;;; Amb-Eval input:
try-again

;;; Amb-Eval value:
(5 12 13)

;;; Amb-Eval input:
try-again

;;; Amb-Eval value:
(9 12 15)

;;; Amb-Eval input:
try-again

;;; Amb-Eval value:
(8 15 17)

;;; Amb-Eval input:
try-again

;;; Amb-Eval value:
(12 16 20)

;;; Amb-Eval input:
try-again

;;; Amb-Eval value:
(15 20 25)

;;; Amb-Eval input:
try-again

;;; Amb-Eval value:
(7 24 25)

;;; Amb-Eval input:
try-again

;;; Amb-Eval value:
(10 24 26)
</pre>

	<p>Although it works, I have a nagging feeling that this solution is not optimal and there may be more elegant solutions to this problem out there. If you find one, let me know!</p>


	<h4>Exercise 4.37</h4>


	<p>Yes, Ben&#8217;s implementation is much more efficient than the one in exercise 4.35, because it throws away many irrelevant results, using two techniques:</p>


	<ol>
	<li>It rejects triplets in which the sum of squares of <code>i</code> and <code>j</code> is higher than the square of <code>high</code>. This is called <em>tree pruning</em>.</li>
		<li>Instead of running on all <code>k</code>, it tries to check whether the square root of the squares of <code>i</code> and <code>j</code> is an integer. If it is, we have a solution.</li>
	</ol>


<img class="align-center" src="../../../images/hline.jpg" style="width: 320px; height: 5px;" />

	<p id="fn1"><sup>1</sup> I think it took me at least 4 times of reading through the instructions in section 4.3.3 before I really understood what&#8217;s going on.</p>


	<p id="fn2"><sup>2</sup> Perhaps a clearer way to look at it would be: we have to decide if we have a result and so which of the continuations to call. But without first executing <code>pproc</code> we can&#8217;t know. So we pass the decision to <code>pproc</code> itself by means of a continuation, asking it to perform the work of <code>if</code> in case of a success.</p>


	<p id="fn3"><sup>3</sup> The <code>amb</code> evaluator is very call-stack-heavy, so <code>clisp</code> can&#8217;t handle it and reports a stack overflow. I used the experimental <span class="caps">SBCL 1</span>.0.9 build for Windows to generate this result.</p>


	<p id="fn4"><sup>4</sup> To make <code>format</code> work in the evaluated Scheme, I added it as a primitive procedure to the evaluator.</p>


	<p id="fn5"><sup>5</sup> This problem is somewhat similar with the one we had with infinite streams in section 3.5, where we solved it by writing the <code>interleave</code> procedure.</p>

    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-section-431';
            var disqus_url = 'http://eli.thegreenplace.net/2007/12/28/sicp-section-431';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-section-431#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>