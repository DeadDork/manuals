<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP sections 4.1.3 - 4.1.5 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-sections-413-415"
                       rel="bookmark"
                       title="Permalink to SICP sections 4.1.3 - 4.1.5">
                        SICP sections 4.1.3 - 4.1.5
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> December 08, 2007 at 10:16</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <h4>Exercise 4.11</h4>


	<p>Since we have the <code>frame</code> abstraction, it suffices to modify only it:</p>


<pre>
(defun make-frame (vars vals)
  (if (/= (length vars) (length vals))
    (error "MAKE-FRAME length mismatch")
    (labels (
        (build-pairs (vars vals)
          (if (null vars)
            '()
            (cons 
              (cons (car vars) (car vals))
              (build-pairs (cdr vars) (cdr vals))))))
      (cons 'frame (build-pairs vars vals)))))

(defun add-binding-to-frame! (var val frame)
  (push (cons var val) (cdr frame)))

(defun frame-variables (frame)
  (mapcar #'car (cdr frame)))

(defun frame-values (frame)
  (mapcar #'cdr (cdr frame)))
</pre>

	<p>We can now use the test suite (see previous post) to quickly verify that with this change the evaluator keeps functioning well. Bah&#8230; it doesn&#8217;t!</p>


	<p>After some investigation, it appears that the problem occurs when modifying variables in the environment, an a quick investigation of the code shows why. The function <code>set-variable-value!</code> breaks the <code>frame</code> abstraction, by assuming its structure and modifying the frame accordingly. Fixing this abstraction leak will be left as an exercise to diligent readers.</p>


	<h4>Exercise 4.12</h4>


	<p>For this exercise we go back to the original implementation of frames, as a list of variables / list of values pair. To generalize the traversal of environments, I will first empower the frame abstraction somewhat. This will also fix the abstraction leak we discovered in the previous exercise.</p>


	<p>There&#8217;s no reason why an environment should be responsible for looking up values in frames. Frames can do that. So we&#8217;ll add these functions to the frame abstraction:</p>


<pre>
(defun find-binding-in-frame (frame var)
  "Looks up the variable in the frame.
  Returns a pair: if the -car- of the pair is t,
  then the variable was found and it's in the -cdr-
  of the pair. If the -car- of the pair is nil,
  then the variable was not found" 
  (labels (
      (scan (vars vals)
        (cond ((null vars)
                (cons nil nil))
              ((eq var (car vars))
                (cons t (car vals)))
              (t 
                (scan (cdr vars) (cdr vals))))))
    (scan (frame-variables frame)
          (frame-values frame))))

(defun set-binding-in-frame! (frame var val)
  "Sets the variable to the value in the frame.
  Returns t if the variable was found and modified,
  nil otherwise." 
  (labels (
      (scan (vars vals)
        (cond ((null vars)
                nil)
              ((eq var (car vars))
                (setf (car vals) val)
                t)
              (t
                (scan (cdr vars) (cdr vals))))))
    (scan (frame-variables frame)
          (frame-values frame))))
</pre>

	<p>And now, the environment-level functions are much shorter:</p>


<pre>
(defun lookup-variable-value (var env)
  (labels ( 
      (env-loop (env)
        (when (&gt; *evaluator-debug-level* 2)
          (format t "scanning env: ~a~%" env))
        (if (eq env the-empty-environment)
          (error "Unbound variable ~a" var))
          (let ((result (find-binding-in-frame (first-frame env) var)))
            (if (car result)
              (cdr result)
              (env-loop (enclosing-environment env))))))
    (env-loop env)))

(defun set-variable-value! (var val env)
  (labels (
      (env-loop (env)
        (if (eq env the-empty-environment)
          (error "Unbound variable ~a" var)
          (if (set-binding-in-frame! (first-frame env) var val)
            t
            (env-loop (enclosing-environment env))))))
    (env-loop env)))

(defun define-variable! (var val env)
  (let ((frame (first-frame env)))
    (if (set-binding-in-frame! frame var val)
      t
      (add-binding-to-frame! frame var val))))
</pre>

	<p>I have a nagging feeling that even more of the functionality can be abstracted out, especially if we put macros to use. However, this looks good enough so I&#8217;ll just move on.</p>


	<h4>Exercise 4.13</h4>


	<p>I think it makes most sense to unbind the variable only in its current frame, i.e. in its immediate lexical environment. Unbinding variables in enclosing environments doesn&#8217;t sound like good encapsulation to me.</p>


	<p>First, the function that unbinds a variable at the frame level:</p>


<pre>
(defun unbind-var-in-frame! (frame var)
  "Unbinds a variable in the frame." 
  (let ((vars (frame-variables frame))
        (vals (frame-values frame))
        (new-vars '())
        (new-vals '()))
    (loop
      for a-var in vars
      for a-val in vals
      do 
      (unless (eq a-var var)
        (push a-var new-vars)
        (push a-val new-vals)))
    (setf (car frame) new-vars)
    (setf (cdr frame) new-vals)))
</pre>

	<p>I&#8217;ve decided to employ the almighty <code>loop</code> macro here. The functions turns the order of variables in the frame around, but this has no bad effect on its functionality. Now, to add the function at the environment level, plus a recognizer for the new form:</p>


<pre>
(defun make-unbound? (exp) 
  (tagged-list? exp 'make-unbound!))

(defun unbind-variable! (exp env)
  (unbind-var-in-frame! (first-frame env) (cadr exp)))
</pre>

	<p>Finally, an addition to <code>eval.</code>:</p>


<pre>
  ((make-unbound? exp)
    (unbind-variable! exp env))
</pre>

	<h4>Exercise 4.14</h4>


	<p>It is clear why Eva&#8217;s <code>map</code> works. Eva has written it in the interpreted Scheme, so there is no reason for it not to work, since the interpreter is quite complete and can run such functions.</p>


	<p>On the other hand, Louis committed a mistake by mixing up the interpreted language with the driving language in which the interpreter is written. Installing <code>map</code> as a primitive can&#8217;t work, because <code>map</code> takes a function as an argument and applies it. The function it expects must be in the <em>driving language</em>, and it is applied with the native <code>apply</code>, of Common Lisp in our case. On the other hand, in Louis&#8217;s interpreted Scheme code, he hands in Scheme functions to <code>map</code>. These functions must be applied with <code>apply.</code>, and not with the native <code>apply</code> of Common Lisp.</p>


	<h4>Exercise 4.15</h4>


	<p>This is the <em>Halting theorem</em>. The authors provide enough clues to prove it very easily. When <code>(try try)</code> is executed, <code>(halts? p p)</code> is called. <code>try</code> is substituted for <code>p</code> so it&#8217;s actually <code>(halts? try try)</code>. Now, this can either return true or false.</p>


	<p>Suppose it returns true. Then, <code>try</code> enters an endless loop &#8211; so it obviously doesn&#8217;t halt, while <code>halts?</code> returned true. This is a contradiction.</p>


	<p>Suppose now it returns false. Then <code>try</code> halts and returns <code>halted</code>, which is again a contradiction.</p>


	<p>Therefore, there can be no such function as <code>halts?</code> which adheres to its spec.</p>

The updated evaluator files: evaluator.lisp, evaluator_testing.lisp 
    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-sections-413-415';
            var disqus_url = 'http://eli.thegreenplace.net/2007/12/08/sicp-sections-413-415';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-sections-413-415#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>