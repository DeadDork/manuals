<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP section 5.3 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-section-53"
                       rel="bookmark"
                       title="Permalink to SICP section 5.3">
                        SICP section 5.3
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> March 07, 2008 at 16:54</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <p>I liked the way the authors used vectors to simply implement list structures. While cumbersome, the <code>car</code>, <code>cdr</code> and <code>cons</code> they've defined actually work very well. Here's a simple example that builds a cons cell and prints it out:</p>
<!--more-->

<pre>
(define fib
  (make-machine
    '(n x y a b c val n1 the-cars the-cdrs free)
    `((= ,=) (+ ,+) (printf ,printf)
      (vector-ref ,vector-ref) 
      (vector-set! ,vector-set!) 
      (make-vector ,make-vector))
    '(
      ; create the-cars and the-cdrs vectors
      (assign the-cars (op make-vector) (const 100))
      (assign the-cdrs (op make-vector) (const 100))

      ; init the free pointer
      (assign free (const 0))

      ; n &lt;- (cons x y)
      (perform (op vector-set!) (reg the-cars) (reg free) (reg x))
      (perform (op vector-set!) (reg the-cdrs) (reg free) (reg y))
      (assign n (reg free))
      (assign free (op +) (reg free) (const 1))

      ; print (car x)
      (assign val (op vector-ref) (reg the-cars) (reg n))
      (perform (op printf) (const "~a~%") (reg val))

      ; print (cdr y)
      (assign val (op vector-ref) (reg the-cdrs) (reg n))
      (perform (op printf) (const "~a~%") (reg val))      
    )))

(set-register-contents! fib 'x 100)
(set-register-contents! fib 'y 222)
(start fib)

=&gt;

100
222
</pre>

	<p>Unfortunately they don't go on implementing this system, and leave the <em>typed pointers</em> out. Hence, predicates such as <code>pair?</code> and <code>null?</code> aren't available.</p>


	<h4>Exercise 5.20</h4>


	<p>The box and pointer diagram created by:</p>


<pre>
(define x (cons 1 2))
(define y (list x x))
</pre>

	<p>Is:</p>


	<p><img src="../../../images/2008/02/env1.png" /></p>


	<p>The numbers in orange circles are the cons-cell numbers that are referenced in the memory-vector representation, which is:</p>


	<p><img src="../../../images/2008/02/mem_vector.png" /></p>


	<p><code>free</code> will contain <code>p4</code> after these assignments, since the cell at index 4 is the next unallocated memory slot.</p>


	<h4>Exercise 5.21</h4>


	<p><strong>a.</strong></p>


	<p>The weirdest thing has just happened. I banged in the machine code for this computation and it worked the first time. No debugging, no tracing, nada. And this is a double-recursive function we're talking about ! I attribute this success to the structured way to write recursive procedures I've spoken about <a href="http://eli.thegreenplace.net/2008/02/22/sicp-section-51/">here</a>. Although that was for a single recursion, double recursion isn't really more difficult if you follow the same guidelines. So here is the code, note how well it adheres to the rules I've previously outlined:</p>


<pre>
(define count-leaves-rec
  (make-machine
    '(tree n retval temp retaddr)
    `((= ,=) (+ ,+) (car ,car) (cdr ,cdr)
      (not ,not) (null? ,null?) (pair? ,pair?))
    '(
        (goto (label machine-start))

      ;;; procedure count-leaves-rec
      count-leaves-rec
        (restore retaddr)       ; return address
        (restore temp)          ; argument
        (save tree)             ; save caller's regs
        (save n)
        (save retaddr)
        (assign tree (reg temp)) ; working on 'tree'
        (test (op null?) (reg tree))
        (branch (label count-leaves-null))
        (test (op pair?) (reg tree))
        (branch (label count-leaves-pair))
        (goto (label count-leaves-atom))

      count-leaves-pair
        ; First recursive call, push arguments &#38;
        ; return address, and execute call.
        ;
        (assign temp (op car) (reg tree))
        (save temp)
        (assign retaddr (label after-first-return))
        (save retaddr)
        (goto (label count-leaves-rec))

      after-first-return
        (assign n (reg retval))

        ; Second recursive call
        ;
        (assign temp (op cdr) (reg tree))
        (save temp)
        (assign retaddr (label after-second-return))
        (save retaddr)
        (goto (label count-leaves-rec))

      after-second-return
        (assign retval (op +) (reg n) (reg retval))
        (goto (label count-leaves-end))

      count-leaves-null
        (assign retval (const 0))
        (goto (label count-leaves-end))

      count-leaves-atom
        (assign retval (const 1))
        (goto (label count-leaves-end))

      count-leaves-end
        (restore retaddr)       ; restore caller's regs
        (restore n)
        (restore tree)
        (goto (reg retaddr))    ; return to caller
      ;;; end procedure count-leaves-rec

      machine-start
        (save tree)
        (assign retaddr (label machine-end))
        (save retaddr)
        (goto (label count-leaves-rec))

      machine-end
      )))
</pre>

	<p>A small test shows that this works:</p>


<pre>
(set-register-contents! count-leaves-rec 
  'tree '(1 (3 4) 5 (6 (7 3) 9)))
(set-register-contents! count-leaves-rec 'retval 0)

(start count-leaves-rec)

(printf ":~a~%" (get-register-contents count-leaves-rec 'retval))

=&gt;

:8
</pre>

	<p><strong>b.</strong></p>


	<p>In this version of <code>count-leaves</code>, there are also two recursive calls, but one of them is <em>tail-recursive</em> and can be replaced by a loop:</p>


<pre>
(define count-leaves
  (make-machine
    '(tree n retval temp1 temp2 retaddr)
    `((= ,=) (+ ,+) (car ,car) (cdr ,cdr)
      (not ,not) (null? ,null?) (pair? ,pair?))
    '(
        (goto (label machine-start))

      ;;; procedure count-leaves-iter
      count-leaves-iter
        (restore retaddr)       ; return address
        (restore temp1)         ; argument 'tree'
        (restore temp2)         ; argument 'n'
        (save tree)             ; save caller's regs
        (save n)
        (save retaddr)
        (assign tree (reg temp1)) 
        (assign n (reg temp2))

      count-leaves-iter-loop
        (test (op null?) (reg tree))
        (branch (label count-leaves-null))
        (test (op pair?) (reg tree))
        (branch (label count-leaves-pair))
        (goto (label count-leaves-atom))

      count-leaves-pair
        ; Recursive call, push arguments &#38;
        ; return address, and execute call.
        ;
        (save n)
        (assign temp1 (op car) (reg tree))
        (save temp1)
        (assign retaddr (label after-recursive-return))
        (save retaddr)
        (goto (label count-leaves-iter))

      after-recursive-return
        (assign n (reg retval))
        (assign tree (op cdr) (reg tree))
        (goto (label count-leaves-iter-loop))

      count-leaves-null
        (assign retval (reg n))
        (goto (label count-leaves-end))

      count-leaves-atom
        (assign retval (op +) (reg n) (const 1))
        (goto (label count-leaves-end))

      count-leaves-end
        (restore retaddr)       ; restore caller's regs
        (restore n)
        (restore tree)
        (goto (reg retaddr))    ; return to caller
      ;;; end procedure count-leaves-iter

      machine-start
        (assign n (const 0))
        (save n)
        (save tree)
        (assign retaddr (label machine-end))
        (save retaddr)
        (goto (label count-leaves-iter))

      machine-end
      )))
</pre>

	<h4>Exercise 5.22</h4>


	<p>Here is <code>append</code>:</p>


<pre>
(define append-rec
  (make-machine
    '(x y retval temp1 temp2 retaddr)
    `((car ,car) (cdr ,cdr) (cons ,cons)
      (not ,not) (null? ,null?) (pair? ,pair?))
    '(
        (goto (label machine-start))

      ;;; procedure append-rec
      append-rec
        (restore retaddr)       ; return address
        (restore temp2)         ; argument 'y'
        (restore temp1)         ; argument 'x'
        (save x)                ; save caller's regs
        (save y)
        (save retaddr)
        (assign x (reg temp1)) 
        (assign y (reg temp2))

        (test (op null?) (reg x))
        (branch (label append-null-x))
        (goto (label append-not-null-x))

      append-null-x
        (assign retval (reg y))
        (goto (label append-end))

      append-not-null-x 
        ; Execute recursive call
        (assign temp1 (op cdr) (reg x))
        (save temp1)
        (save y)
        (assign retaddr (label after-recursive-return))
        (save retaddr)
        (goto (label append-rec))

      after-recursive-return
        (assign temp1 (op car) (reg x))
        (assign retval (op cons) (reg temp1) (reg retval))

      append-end
        (restore retaddr)       ; restore caller's regs
        (restore y)
        (restore x)
        (goto (reg retaddr))    ; return to caller
      ;;; end procedure append-end

      machine-start
        (save x)
        (save y)
        (assign retaddr (label machine-end))
        (save retaddr)
        (goto (label append-rec))

      machine-end
      )))
</pre>

	<p>And a test:</p>


<pre>
(set-register-contents! append-rec 'x '(1 2 3))
(set-register-contents! append-rec 'y '(8 9))
(set-register-contents! append-rec 'retval '())

(start append-rec)
(printf ":~a~%" (get-register-contents append-rec 'retval))
=&gt;
:(1 2 3 8 9)
</pre>

	<p>And this is <code>append!</code>:</p>


<pre>
(define append!
  (make-machine
    '(x y retval temp1 temp2 retaddr)
    `((car ,car) (cdr ,cdr) (cons ,cons)
      (set-cdr! ,set-cdr!)
      (not ,not) (null? ,null?) (pair? ,pair?))
    '(
        (goto (label machine-start))

      ;;; procedure append!
      append!
        (restore retaddr)
        (restore y)
        (restore x)

        ; Prepare arguments and call last-pair
        (save x)
        (assign temp2 (label after-last-pair))
        (save temp2)
        (goto (label last-pair))

      after-last-pair
        (assign temp2 (reg retval))
        (perform (op set-cdr!) (reg temp2) (reg y))
        (assign retval (reg x))
        (goto (reg retaddr))
      ;;; end procedure append!

      ;;; procedure last-pair
      last-pair
        (restore temp2)         ; argument 'retaddr'
        (restore temp1)         ; argument 'x'
        (save x)
        (save retaddr)
        (assign x (reg temp1))
        (assign retaddr (reg temp2))

      last-pair-loop
        (assign temp1 (op cdr) (reg x))
        (test (op null?) (reg temp1))
        (branch (label last-pair-null))
        (assign x (op cdr) (reg x))
        (goto (label last-pair-loop))

      last-pair-null
        (assign retval (reg x))
        (assign temp2 (reg retaddr))
        (restore retaddr)
        (restore x)
        (goto (reg temp2))    ; return
      ;;; end procedure last-pair

      machine-start
        (save x)
        (save y)
        (assign retaddr (label machine-end))
        (save retaddr)
        (goto (label append!))

      machine-end
      )))
</pre>

	<p>And a test:</p>


<pre>
(set-register-contents! append! 'x '(1 2 3))
(set-register-contents! append! 'y '(8 9))

(start append!)
(printf ":~a~%" (get-register-contents append! 'x))
=&gt;
:(1 2 3 8 9)
</pre>

	<h4>A word on programming style</h4>


	<p>I wrote about this before, but I want to emphasize this point again: the programming style I'm using here for writing the register machine code is not optimized for speed or minimal space. Rather, its main aim is to be systematic and easily understandable. It's definitely possible to optimize away a few statements in each machine I wrote in this section, especially in the handling of stack data, but <span class="caps">IMHO</span> that would hurt the clarity of this code. And clarity is my preference, at least here.</p>

    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-section-53';
            var disqus_url = 'http://eli.thegreenplace.net/2008/03/07/sicp-section-53';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-section-53#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>