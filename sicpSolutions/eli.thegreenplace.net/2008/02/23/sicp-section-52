<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP section 5.2 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-section-52"
                       rel="bookmark"
                       title="Permalink to SICP section 5.2">
                        SICP section 5.2
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> February 23, 2008 at 18:04</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        The full implementation of the register-machine simulator is here.
	
	<h4>Exercise 5.7</h4>

Done 

	<h4>Exercise 5.8</h4>


	<p>When control reaches <code>there</code>, the contents of <code>a</code> are 3. This happens because:</p>
<!--more-->

	<ul>
	<li>When the machine code is assembled, the function <code>extract-labels</code> builds a list of all the labels in the code. When two labels have the same name, this label name will appear twice in the list.</li>
		<li>When the <code>goto</code> instruction is executed, it finds the label to go to by calling <code>lookup-label</code>, which uses <code>assoc</code> on the list of labels. <code>assoc</code> returns the first "hit", so the fist label of the duplicates is jumped to.</li>
	</ul>


	<p>We'll modify <code>extract-labels</code> to test whether a label already exists before adding it to the list:</p>


<pre>
(define (extract-labels text)
  (if (null? text)
    (cons '() '())
    (let ((result (extract-labels (cdr text))))
      (let ((instructions (car result))
            (labels (cdr result)))
        (let ((next-instruction (car text)))
          (if (symbol? next-instruction) ; a label ?
            (if (label-exists labels next-instruction)
              (error "Label name is duplicated: " next-instruction)
              (cons instructions
                    (cons (make-label-entry next-instruction instructions) labels)))
            (cons (cons (make-instruction next-instruction) instructions)
                  labels)))))))
</pre>

	<p>This auxiliary function is used to preserve the abstraction of <code>labels</code>:</p>


<pre>
(define (label-exists labels label-name)
  (assoc label-name labels))
</pre>

	<h4>Exercise 5.9</h4>


	<p>Adding a simple label test to <code>make-operation-exp</code> does the trick:</p>


<pre>
(define (make-operation-exp exp machine labels operations)
  (let ((op (lookup-prim (operation-exp-op exp) operations))
        (aprocs
         (map (lambda (e)
                (if (label-exp? e)
                  (error "Using operation on label: " e)
                  (make-primitive-exp e machine labels)))
              (operation-exp-operands exp))))
    (lambda ()
      (apply op (map (lambda (p) (p)) aprocs)))))
</pre>

	<h4>Exercise 5.10</h4>


	<p>At this point in the book, I don't find this exercise interesting enough to pursue.</p>


	<h4>Exercise 5.11</h4>


	<p><strong>a.</strong></p>


	<p>The change will be done after the label <code>afterfib-n-2</code>. These lines:</p>


<pre>
(assign n (reg val))    
(restore val)             
</pre>

	<p>Place <code>Fib(n-2)</code> in <code>n</code> and <code>Fib(n-1)</code> in <code>val</code>. They can be replaced by the single line:</p>


<pre>
(restore n)                   
</pre>

	<p>Which places <code>Fib(n-1)</code> in <code>n</code>, because <code>Fib(n-2)</code> is already in <code>val</code>, and we only use the values in an addition which is commutative, so it doesn't care about the order of its addends:</p>


<pre>
(assign val (op +) (reg val) (reg n))
</pre>

	<p><strong>b.</strong></p>


	<p>I'll store a <code>(reg-name reg)</code> pair on the stack instead of just the <code>reg</code>. These are the new <code>save</code> and <code>restore</code>:</p>


<pre>
(define (make-save inst machine stack pc)
  (let* ((reg-name (stack-inst-reg-name inst))
          (reg (get-register machine reg-name)))
    (lambda ()
      (push stack (cons reg-name (get-contents reg)))
      (advance-pc pc))))

(define (make-restore inst machine stack pc)
  (let* ((reg-name (stack-inst-reg-name inst))
          (reg (get-register machine reg-name)))
    (lambda ()
      (let* ((stack-top (pop stack))
              (saved-reg-name (car stack-top))
              (saved-reg (cdr stack-top)))
        (if (equal? reg-name saved-reg-name)
          (begin
            (set-contents! reg saved-reg)    
            (advance-pc pc))
          (error (format "Restoring saved reg ~a into ~a~%" 
                          saved-reg-name reg-name)))))))
</pre>

	<p><strong>c.</strong></p>


	<p>First of all, I'll modify the stack data structure to make it manage several stacks, each with its own name. Now the state variable <code>s</code> holds an association list of <code>(stack-name stack)</code> which is accessed with <code>assoc</code>. <code>push</code> and <code>pop</code> will receive the stack name:</p>


<pre>
(define (make-stack)
  (let ((s '()))
    (define (push reg-name x)
      (let ((reg-stack (assoc reg-name s)))
        (if reg-stack
          (set-cdr! reg-stack (cons x (cdr reg-stack)))
          (error "PUSH: No stack for register " reg-name))))
    (define (pop reg-name)
      (let ((reg-stack (assoc reg-name s)))
        (if reg-stack
          (if (null? (cdr reg-stack))
            (error "POP: Empty stack for register " reg-name)
            (let ((top (cadr reg-stack)))
              (set-cdr! reg-stack (cddr reg-stack))
              top))
          (error "POP: No stack for register " reg-name))))
    (define (add-reg-stack reg-name)
      (if (assoc reg-name s)
        (error "Stack already exists for " reg-name)
        (set! s (cons (cons reg-name '()) s))))
    (define (initialize)
      (for-each
        (lambda (stack)
          (set-cdr! stack '()))
        s)
      'done)
    (define (dispatch message)
      (cond ((eq? message 'push) push)
            ((eq? message 'pop) pop)
            ((eq? message 'add-reg-stack) add-reg-stack)
            ((eq? message 'initialize) (initialize))
            (else (error "Unknown request -- STACK" message))))
    dispatch))

(define (pop stack reg-name)
  ((stack 'pop) reg-name))

(define (push stack reg-name value)
  ((stack 'push) reg-name value))
</pre>

	<p>Now, the <code>allocate-register</code> internal function in <code>make-new-machine</code> must be rewritten. Each time the machine is asked to allocate a new register, it adds a stack for this register to the stack management object:</p>


<pre>
(define (allocate-register name)
  (if (assoc name register-table)
    (error "Multiply defined register: " name)
    (begin
      (set! register-table 
            (cons (list name (make-register name))
                  register-table))
      ((stack 'add-reg-stack) name)
      'register-allocated)))
</pre>

	<p>And finally, these are the new <code>make-save</code> and <code>make-restore</code>:</p>


<pre>
(define (make-save inst machine stack pc)
  (let* ((reg-name (stack-inst-reg-name inst))
          (reg (get-register machine reg-name)))
    (lambda ()
      (push stack reg-name (get-contents reg))
      (advance-pc pc))))

(define (make-restore inst machine stack pc)
  (let* ((reg-name (stack-inst-reg-name inst))
          (reg (get-register machine reg-name)))
    (lambda ()
      (set-contents! reg (pop stack reg-name))
      (advance-pc pc))))
</pre>

	<p>Here's a demonstration of this feature:</p>


<pre>
(define fib
  (make-machine
    '(n val n1)
    `((= ,=))
    '(
      (save n)
      (assign n (const 40))
      (save n)

      (save val)
      (assign val (const 10))
      (save val)

      (restore n)
      (assign n1 (reg n))
      (restore n)

      (assign val (const 1))
      (restore val)

      )))

(set-register-contents! fib 'n 8 )
(set-register-contents! fib 'val 3)
(start fib)
(printf ":~a~%" (get-register-contents fib 'n))
(printf ":~a~%" (get-register-contents fib 'n1))
(printf ":~a~%" (get-register-contents fib 'val))
=&gt;
:8
:40
:10
</pre>

	<p>Note how each register has its own stack, and a <code>save</code> or <code>restore</code> to another register don't affect it.</p>


	<h4>Exercises 5.12 &#8211; 5.13</h4>


	<p>I'll pass. I understand the simulator well enough now and don't feel these exercises will add to my comprehension.</p>


	<h4>Exercise 5.14</h4>


	<p>The factorial machine does all its <code>save</code>-s first and only then its <code>restore</code>-s. Hence, the maximal depth of the stack and the amount of <code>push</code>-es are equal. Let's try to match a linear equation for <code>P</code> &#8211; the amount of pushes:</p>


	<table style="border:1px solid black;">
		<tr>
			<th>n</th>
			<th>P</th>
		</tr>
		<tr>
			<td>1</td>
			<td>0</td>
		</tr>
		<tr>
			<td>2</td>
			<td>2</td>
		</tr>
		<tr>
			<td>3</td>
			<td>4</td>
		</tr>
		<tr>
			<td>4</td>
			<td>6</td>
		</tr>
		<tr>
			<td>5</td>
			<td>8</td>
		</tr>
		<tr>
			<td>6</td>
			<td>10</td>
		</tr>
	</table>




	<p>From this it's quite obvious that for an input <code>n</code> the amount of pushes is <code>2n-2</code>.</p>


	<h4>Exercise 5.15</h4>


	<p>This is the modified <code>make-new-machine</code>. Changed and added lines are marked with a comment.</p>


<pre>
(define (make-new-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (instruction-count 0)           ;; **
        (the-instruction-sequence '()))
    (let ((the-ops
            (list (list 'initialize-stack
                        (lambda () (stack 'initialize)))))
          (register-table
            (list (list 'pc pc) (list 'flag flag))))
      (define (allocate-register name)
        (if (assoc name register-table)
          (error "Multiply defined register: " name)
          (set! register-table 
                (cons (list name (make-register name))
                      register-table)))
        'register-allocated)
      (define (lookup-register name)
        (let ((val (assoc name register-table)))
          (if val
              (cadr val)
              (error "Unknown register: " name))))
      (define (execute)
        (let ((insts (get-contents pc)))
          (if (null? insts)
            'done
            (begin
              (set! instruction-count (+ 1 instruction-count)) ;; **
              ((instruction-execution-proc (car insts)))
              (execute)))))
      (define (dispatch message)
        (cond ((eq? message 'start)
               (set-contents! pc the-instruction-sequence)
               (execute))
              ((eq? message 'install-instruction-sequence)
               (lambda (seq) 
                (set! the-instruction-sequence seq)))
              ((eq? message 'allocate-register) allocate-register)
              ((eq? message 'get-register) lookup-register)
              ((eq? message 'install-operations)
               (lambda (ops) (set! the-ops (append the-ops ops))))
              ((eq? message 'stack) stack)
              ((eq? message 'operations) the-ops)
              ((eq? message 'get-instruction-count)  ;; **
                (let ((count instruction-count))   
                  (set! instruction-count 0)        
                  count))
              (else (error "Unknown request -- MACHINE" message))))
      dispatch)))
</pre>

	<p>The instruction count is incremented in the <code>execute</code> procedure, prior to executing a new instruction.</p>


	<h4>Exercise 5.16</h4>


	<p>I'll add a state variable into the large <code>let</code> at the top of <code>make-new-machine</code>:</p>


<pre>
(instruction-trace-on #f)
</pre>

	<p>The new messages the machine accepts are:</p>


<pre>
((eq? message 'trace-on)
  (set! instruction-trace-on #t))
((eq? message 'trace-off)
  (set! instruction-trace-on #f))
</pre>

	<p>And this is the new <code>execute</code> procedure (it augments both instruction counting and tracing):</p>


<pre>
(define (execute)
  (let ((insts (get-contents pc)))
    (if (null? insts)
      'done
      (begin
        (set! instruction-count (+ 1 instruction-count))
        (if instruction-trace-on
          (printf "trace: ~a~%" (instruction-text (car insts))))
        ((instruction-execution-proc (car insts)))
        (execute)))))
</pre>

	<h4>Exercise 5.17</h4>


	<p>To make this work I'll change the way instructions are represented. Thankfully, the "instruction" abstraction is hidden behind a constructor and a set of accessors, so not too much code has to be modified:</p>


<pre>
(define (make-instruction text)
  (list text '() '()))
(define (make-instruction-with-label text label)
  (list text label '()))
(define (instruction-text instruction)
  (car instruction))
(define (instruction-label instruction)
  (cadr instruction))
(define (instruction-execution-proc instruction)
  (caddr instruction))
(define (set-instruction-label! instruction label)
  "Sets the label that is tied to this instruction" 
  (set-cdr! instruction proc))
(define (set-instruction-execution-proc! instruction proc)
  (set-car! (cddr instruction) proc))
</pre>

	<p>As you can see, an instruction is now implemented by a triplet: the instruction text, the label tied to it and its execution procedure.</p>


	<p>Now, all that's left is to modify <code>extract-labels</code> to attach labels to relevant instructions:</p>


<pre>
(define (extract-labels text)
  (if (null? text)
    (cons '() '())
    (let ((result (extract-labels (cdr text))))
      (let ((instructions (car result))
            (labels (cdr result)))
        (let ((next-instruction (car text)))
          (if (symbol? next-instruction) ; a label ?
            (if (label-exists labels next-instruction)
              (error "Label name is duplicated: " next-instruction)
              (cons 
                (if (null? instructions)
                  '()
                  (cons
                    (make-instruction-with-label 
                      (instruction-text (car instructions))
                      next-instruction)
                    (cdr instructions)))
                (cons (make-label-entry next-instruction instructions) labels)))
            (cons (cons (make-instruction next-instruction) instructions)
                  labels)))))))
</pre>

	<p>Here's a sample run:</p>


<pre>
(define fib
  (make-machine
    '(n val n1)
    `((= ,=))
    '(
      (save n)
      (assign n (const 40))
      (save n)
    george
      (save val)
      (assign val (const 10))
    just-a-label
      (save val)
      )))

(set-register-contents! fib 'n 8)
(fib 'trace-on)
(start fib)

=&gt;

trace: (save n)
trace: (assign n (const 40))
trace: (save n)
at label: george
trace: (save val)
trace: (assign val (const 10))
at label: just-a-label
trace: (save val)
</pre>

	<h4>Exercise 5.18</h4>


	<p>Here is the modified <code>make-register</code>. I've added the required messages, and changed the <code>cond</code> to a friendlier<sup><a href="sicp-section-52#fn1">1</a></sup> <code>case</code>:</p>


<pre>
(define (make-register name)
  (let ((contents '*unassigned*)
        (trace-on #f))
    (define (dispatch message)
      (case message
        ((get) contents)
        ((set)
          (lambda (value) 
            (when trace-on
              (printf "reg trace: ~a &lt;- ~a (was ~a)~%" 
                name value contents))
            (set! contents value)))
        ((trace-on) (set! trace-on #t))
        ((trace-off) (set! trace-off #f))
        (else ((error "Unknown request -- REGISTER" message)))))
    dispatch))
</pre>

	<p>The following procedure and messages were added to <code>make-new-machine</code>:</p>


<pre>
  ...
  (define (set-register-trace! name trace-msg)
    (let ((reg (assoc name register-table)))
      (if reg
        ((cadr reg) trace-msg)
        (error "Unknown register: " name))))
  ...
  ((eq? message 'reg-trace-on)
    (lambda (reg-name)
      (set-register-trace! reg-name 'trace-on)))
  ((eq? message 'reg-trace-off)
    (lambda (reg-name)
      (set-register-trace! reg-name 'trace-off)))
</pre>

	<p>Here's a sample, with both instruction and register tracing on:</p>


<pre>
(define fib
  (make-machine
    '(n val n1)
    `((= ,=))
    '(
      (assign n (const 40))
      (save n)
    george
      (save val)
      (assign val (const 10))
      (assign n (const 125))
      )))

=&gt;

trace: (assign n (const 40))
reg trace: n &lt;- 40 (was 8)
trace: (save n)
at label: george
trace: (save val)
trace: (assign val (const 10))
trace: (assign n (const 125))
reg trace: n &lt;- 125 (was 40)
</pre>

	<h4>Exercise 5.19</h4>


	<p>I'll pass.</p>


<img class="align-center" src="../../../images/hline.jpg" style="width: 320px; height: 5px;" />

	<p id="fn1"><sup>1</sup> I deem <code>case</code> to be friendlier here because all the <code>cond</code> clauses are comparing the same variable (<code>message</code>) to different values. Using <code>case</code> here saves quite a few keystrokes.</p>

    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-section-52';
            var disqus_url = 'http://eli.thegreenplace.net/2008/02/23/sicp-section-52';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-section-52#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>