<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP section 4.4.1 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-section-441"
                       rel="bookmark"
                       title="Permalink to SICP section 4.4.1">
                        SICP section 4.4.1
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> February 08, 2008 at 16:06</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <h4>Exercise 4.55</h4>


	<p><strong>a.</strong></p>


<pre>
(supervisor ?x (Bitdiddle Ben))
=&gt;
(SUPERVISOR (TWEAKIT LEM E) (BITDIDDLE BEN))
(SUPERVISOR (FECT CY D) (BITDIDDLE BEN))
(SUPERVISOR (HACKER ALYSSA P) (BITDIDDLE BEN))
</pre>

	<p><strong>b.</strong></p>


<pre>
(job ?name (accounting . ?a))
=&gt;
(JOB (CRATCHET ROBERT) (ACCOUNTING SCRIVENER))
(JOB (SCROOGE EBEN) (ACCOUNTING CHIEF ACCOUNTANT))
</pre>

	<p><strong>c.</strong></p>


<pre>
(address ?name (Slumerville . ?a))
=&gt;
(ADDRESS (AULL DEWITT) (SLUMERVILLE (ONION SQUARE) 5))
(ADDRESS (REASONER LOUIS) (SLUMERVILLE (PINE TREE ROAD) 80))
(ADDRESS (BITDIDDLE BEN) (SLUMERVILLE (RIDGE ROAD) 10))
</pre>
<!--more-->
	<h4>Exercise 4.56</h4>


	<p><strong>a.</strong></p>


<pre>
(and 
  (supervisor ?name (Bitdiddle Ben))
  (address ?name ?addr))
=&gt;
(AND (SUPERVISOR (TWEAKIT LEM E) (BITDIDDLE BEN)) (ADDRESS (TWEAKIT LEM E) (BOSTON (BAY STATE ROAD) 22)))
(AND (SUPERVISOR (FECT CY D) (BITDIDDLE BEN)) (ADDRESS (FECT CY D) (CAMBRIDGE (AMES STREET) 3)))
(AND (SUPERVISOR (HACKER ALYSSA P) (BITDIDDLE BEN)) (ADDRESS (HACKER ALYSSA P) (CAMBRIDGE (MASS AVE) 78)))
</pre>

	<p><strong>b.</strong></p>


<pre>
(and (salary (Bitdiddle Ben) ?bens)
     (salary ?who ?whos)
     (lisp-value #'&gt; ?bens ?whos))
=&gt;
(AND (SALARY (BITDIDDLE BEN) 60000) (SALARY (AULL DEWITT) 25000) (LISP-VALUE #'&gt; 60000 25000))
(AND (SALARY (BITDIDDLE BEN) 60000) (SALARY (CRATCHET ROBERT) 18000) (LISP-VALUE #'&gt; 60000 18000))
(AND (SALARY (BITDIDDLE BEN) 60000) (SALARY (REASONER LOUIS) 30000) (LISP-VALUE #'&gt; 60000 30000))
(AND (SALARY (BITDIDDLE BEN) 60000) (SALARY (TWEAKIT LEM E) 25000) (LISP-VALUE #'&gt; 60000 25000))
(AND (SALARY (BITDIDDLE BEN) 60000) (SALARY (FECT CY D) 35000) (LISP-VALUE #'&gt; 60000 35000))
(AND (SALARY (BITDIDDLE BEN) 60000) (SALARY (HACKER ALYSSA P) 40000) (LISP-VALUE #'&gt; 60000 40000))
</pre>

	<p><strong>c.</strong></p>


<pre>
(and (supervisor ?serf ?boss)
     (not (job ?boss (computer . ?c)))
     (job ?boss ?bossjob))
=&gt;
(AND (SUPERVISOR (AULL DEWITT) (WARBUCKS OLIVER)) (NOT (JOB (WARBUCKS OLIVER) (COMPUTER . ?C)))
 (JOB (WARBUCKS OLIVER) (ADMINISTRATION BIG WHEEL)))
(AND (SUPERVISOR (CRATCHET ROBERT) (SCROOGE EBEN)) (NOT (JOB (SCROOGE EBEN) (COMPUTER . ?C)))
 (JOB (SCROOGE EBEN) (ACCOUNTING CHIEF ACCOUNTANT)))
(AND (SUPERVISOR (SCROOGE EBEN) (WARBUCKS OLIVER)) (NOT (JOB (WARBUCKS OLIVER) (COMPUTER . ?C)))
 (JOB (WARBUCKS OLIVER) (ADMINISTRATION BIG WHEEL)))
(AND (SUPERVISOR (BITDIDDLE BEN) (WARBUCKS OLIVER)) (NOT (JOB (WARBUCKS OLIVER) (COMPUTER . ?C)))
 (JOB (WARBUCKS OLIVER) (ADMINISTRATION BIG WHEEL)))
</pre>

	<h4>Exercise 4.57</h4>


	<p>Here's the rule:</p>


<pre>
(assert!
  (rule (can-replace ?1 ?2)
        (and (or (and (job ?1 ?job) (job ?2 ?job))
                 (and (job ?1 ?j1) 
                      (job ?2 ?j2)
                      (can-do-job ?j1 ?j2)))
             (not (same ?1 ?2)))))
</pre>

	<p>I had a curious incident while writing it. I placed the <code>(not (same ?1 ?2))</code> query first in the <code>and</code> and wondered why nothing works. See "Problems with <code>not</code>" in section 4.4.3 for an answer.</p>


	<p><strong>a.</strong></p>


<pre>
(can-replace ?t (Fect Cy D))
=&gt;
(CAN-REPLACE (BITDIDDLE BEN) (FECT CY D))
(CAN-REPLACE (HACKER ALYSSA P) (FECT CY D))
</pre>

	<p><strong>b.</strong></p>


<pre>
(and 
  (can-replace ?1 ?2)
  (salary ?1 ?s1)
  (salary ?2 ?s2)
  (lisp-value #'&gt; ?s2 ?s1))
=&gt;
(AND (CAN-REPLACE (AULL DEWITT) (WARBUCKS OLIVER)) (SALARY (AULL DEWITT) 25000)
 (SALARY (WARBUCKS OLIVER) 150000) (LISP-VALUE #'&gt; 150000 25000))
(AND (CAN-REPLACE (FECT CY D) (HACKER ALYSSA P)) (SALARY (FECT CY D) 35000) (SALARY (HACKER ALYSSA P) 40000)
 (LISP-VALUE #'&gt; 40000 35000))
</pre>

	<h4>Exercise 4.58</h4>


<pre>
(assert!
  (rule (bigshot ?person ?division)
        (and
          (job ?person (?division . ?r))
          (or 
            (not (supervisor ?person ?boss))
            (and
              (supervisor ?person ?boss)
              (not (job ?boss (?division . ?q))))))))
</pre>

	<p>Lets try it:</p>


<pre>
(bigshot ?who ?where)
=&gt;
(BIGSHOT (WARBUCKS OLIVER) ADMINISTRATION)
(BIGSHOT (SCROOGE EBEN) ACCOUNTING)
(BIGSHOT (BITDIDDLE BEN) COMPUTER)
</pre>

	<h4>Exercise 4.59</h4>


	<p><strong>a.</strong></p>


<pre>
(meeting ?dept (Friday . ?time))
=&gt;
(MEETING ADMINISTRATION (FRIDAY 1PM))
</pre>

	<p><strong>b.</strong></p>


<pre>
(assert!
  (rule (meeting-time ?person ?day-and-time)
        (or (meeting whole-company ?day-and-time)
            (and 
              (job ?person (?div . ?r))
              (meeting ?div ?day-and-time)))))

(meeting-time (Hacker Alyssa P) ?time)
=&gt;
(MEETING-TIME (HACKER ALYSSA P) (WEDNESDAY 4PM))
(MEETING-TIME (HACKER ALYSSA P) (WEDNESDAY 3PM))
</pre>

	<p><strong>c.</strong></p>


<pre>
(and
  (meeting-time (Hacker Alyssa P) (Wednesday . ?time))
  (meeting ?div (Wednesday . ?time)))
=&gt;
(AND (MEETING-TIME (HACKER ALYSSA P) (WEDNESDAY 4PM)) (MEETING WHOLE-COMPANY (WEDNESDAY 4PM)))
(AND (MEETING-TIME (HACKER ALYSSA P) (WEDNESDAY 3PM)) (MEETING COMPUTER (WEDNESDAY 3PM)))
</pre>

	<h4>Exercise 4.60</h4>


	<p>To understand why this happens, we must recall how rules are matched. From "Applying rules" in section 4.4.2:</p>


	<p>In general, the query evaluator uses the following method to apply a rule when trying to establish a query pattern in a frame that specifies bindings for some of the pattern variables:</p>


	<ul>
	<li>Unify the query with the conclusion of the rule to form, if successful, an extension of the original frame.</li>
		<li>Relative to the extended frame, evaluate the query formed by the body of the rule.</li>
	</ul>


	<p>When we execute the first step, we unify the query:</p>


<pre>
(lives-near ?person-1 ?person-2)
</pre>

	<p>With the conclusion of the rule:</p>


<pre>
(lives-near ?p1 ?p2)
</pre>

	<p>To form an extended frame, in which <code>?person-1</code> is mapped to <code>?p1</code> and <code>?person-2</code> is mapped to <code>?p2</code>. We next evaluate the query formed by the body of the rule relative to this extended frame. But since the extended frame doesn't really impose any restrictions on the <code>?p1</code> and <code>?p2</code> variables, it is equivalent to just evaluating the body of the rule as a query:</p>


<pre>
(and 
  (address ?p1 (?town . ?rest1))
  (address ?p2 (?town . ?rest2))
  (not (same ?p1 ?p2)))
</pre>

	<p>And when we do this, we indeed get all the pairs of people living near each other, twice.</p>


	<p>We can ask for a list in which pairs appear only once by modifying the <code>lives-near</code> rule. We'll do this by imposing some order on the names instead of using <code>not</code>. The order must be an <a href="http://en.wikipedia.org/wiki/Asymmetric_relation">asymmetric relation</a> &#8211; for example "greater than". But we didn't build such relations into our logic evaluator, so I'll write it as an ordinary Lisp function and invoke it using <code>lisp-value</code>:</p>


<pre>
(defun greater-as-string (obj1 obj2)
  (string&gt; 
    (write-to-string obj1) 
    (write-to-string obj2)))

(qinterpret
  '(assert!
    (rule (lives-near ?p1 ?p2)
          (and 
            (address ?p1 (?town . ?rest1))
            (address ?p2 (?town . ?rest2))
            (lisp-value #'greater-as-string ?p1 ?p2)))))

(qinterpret
  '(lives-near ?person ?p2))
=&gt;
(LIVES-NEAR (REASONER LOUIS) (AULL DEWITT))
(LIVES-NEAR (REASONER LOUIS) (BITDIDDLE BEN))
(LIVES-NEAR (HACKER ALYSSA P) (FECT CY D))
(LIVES-NEAR (BITDIDDLE BEN) (AULL DEWITT))
</pre>

	<p>Note that the invocation of <code>lisp-value</code> has replaced <code>(not (same ...</code>, because the relation "greater than" subsumes the relation "not equal".</p>


	<h4>Exercise 4.61</h4>


	<p>I had a strange problem here, with the rules written the way they are. My Lisp (both <span class="caps">CLISP</span> and <span class="caps">SBCL</span>) kept reporting stack overflows. What solved the problem was rewriting the rules with "next-to" coming before the variables, like this:</p>


<pre>
(qinterpret
  '(assert!
    (rule (next-to ?x ?y in (?x ?y . ?u)))))

(qinterpret
  '(assert!
    (rule (next-to ?x ?y in (?v . ?z))
          (next-to ?x ?y in ?z))))
</pre>

	<p>I suspect this happens because of the rule indexing system that assumes that the first symbol in a rule conclusion is its name.</p>


	<p>So, to answer the exercise:</p>


<pre>
(next-to ?x ?y in (1 (2 3) 4))
=&gt;
(NEXT-TO (2 3) 4 IN (1 (2 3) 4))
(NEXT-TO 1 (2 3) IN (1 (2 3) 4))

(next-to ?x ?y in (2 1 3 1))
=&gt;
(NEXT-TO 3 1 IN (2 1 3 1))
(NEXT-TO 2 1 IN (2 1 3 1))
(NEXT-TO 1 3 IN (2 1 3 1))
</pre>

	<h4>Exercise 4.62</h4>


	<p>Since we're allowed to assume that the list is not empty, the rules can be written as follows:</p>


<pre>
(qinterpret
  '(assert!
    (rule (last-pair (?elem) (?elem)))))

(qinterpret
  '(assert!
    (rule (last-pair (?v . ?u) (?l))
          (last-pair ?u (?l)))))
</pre>

	<p>Tests:</p>


<pre>
(qinterpret
  '(last-pair (3) ?x))
=&gt;
(LAST-PAIR (3) (3))

(qinterpret
  '(last-pair (1 2 3) ?x))
=&gt;
(LAST-PAIR (1 2 3) (3))

(qinterpret
  '(last-pair (2 ?x) (3)))
=&gt;
(LAST-PAIR (2 3) (3))
</pre>

	<p>Given the query <code>(last-pair ?x (3))</code> my rule throws the interpreter into a stack overflow. I suppose the reason for this is the infinite amount of answers to such a rule.</p>


	<h4>Exercise 4.63</h4>


<pre>
(qinterpret
  '(assert!
    (rule (grandson ?g ?s)
          (and
            (son ?g ?f)
            (son ?f ?s)))))

(qinterpret
  '(assert!
    (rule (son ?m ?s)
          (and
            (wife ?m ?w)
            (son ?w ?s)))))
</pre>

	<p>And now we can ask:</p>


<pre>
(qinterpret
  '(grandson Cain ?s))
=&gt;
(GRANDSON CAIN IRAD)

(qinterpret
  '(son Lamech ?s))
=&gt;
(SON LAMECH JUBAL)
(SON LAMECH JABAL)

(qinterpret
  '(grandson Methushael ?s))
=&gt;
(GRANDSON METHUSHAEL JUBAL)
(GRANDSON METHUSHAEL JABAL)
</pre>

    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-section-441';
            var disqus_url = 'http://eli.thegreenplace.net/2008/02/08/sicp-section-441';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-section-441#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>