<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP section 4.4 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-section-44"
                       rel="bookmark"
                       title="Permalink to SICP section 4.4">
                        SICP section 4.4
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> February 07, 2008 at 22:14</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <p>Logic programming is a major topic and this chapter isn't easy to understand at first reading, especially if you're not already familiar with some of the material. As usual, I'm first reading the whole section and re-implementing the relevant code in Common Lisp. You can download the implementation here</a>, and the test suite for it here


	<p>In this post I want to share a few insights on the implementation, and in particular highlight the points in which my code differs from the authors' code, mainly due to the translation to Common Lisp. I will leave the solutions of exercises for later posts &#8211; it should be much more convenient once we have a full working implementation we understand well.</p>
<!--more-->

	<h4>Understanding the query evaluator</h4>


	<p>My re-implementation of the full query evaluator is close to 600 lines of code (including lots of comments). For Lisp &#8211; this is a lot of code<sup><a href="sicp-section-44#fn1">1</a></sup>. However, not all of this code is equally important for understanding the <em>core</em>, and I want to emphasis a few salient points that might make this easier.</p>


	<p>First of all, read section 4.4.2. Now, read it again, and once again please. This is the most important section &#8211; because it explains how the the query evaluator works, without getting into the nitty gritty details.</p>


	<p>Make sure you understand the basic pattern matcher. To <em>really</em> understand it, play with its implementation &#8211; by providing patterns and data. Control question &#8211; why are frames needed at all ?</p>


	<p>Now, once you know your pattern matcher rock solid (to prove it, re-implement it in a blank file, without looking back), get to unification. Unification is probably as <em>core</em> as you can get in the logic evaluator. If you understand the pattern matcher, you'see that unification is really a very reasonable extension. Read the "Unification" paragraph in section 4.4.2 a couple of times, and then section 4.4.4.4, and play with the unifier function a bit to get a feeling for how it works.</p>


	<p>Next, comprehend how processing a query works. First, understand the simple case of a single frame that goes through the query and is matched versus each assertion in the database. The resulting non-failed frames are then viable instantiations<sup><a href="sicp-section-44#fn2">2</a></sup> of the query, and will be given as the answer. Second, understand the extension of the input to be a stream of frames. Conceptually, this is similar &#8211; just repeat the same process of matching for every frame in the input stream, but why is this needed ? Simple &#8211; to implement compound queries. See the examples in the paragraph titled "Compound queries" in section 4.4.2 for a good explanation.</p>


	<p>This should give you the direction to grasping the code of the query evaluator. If there are still specific points that aren't clear, feel free to post a comment with questions.</p>


	<h4>Some important points about my implementation</h4>


	<p>My implementation of the query evaluator is in Common Lisp, and hence has some minute differences from the authors' code, which is in Scheme.</p>


	<p>First of all, string handling in Common Lisp is done a bit differently than in Scheme. Here is my <code>expand-question-mark</code>:</p>


<pre>
(defun expand-question-mark (symb)
  (let ((chars (string symb)))
    (if (equal (char chars 0) #\?)
      (list '? (intern (remove #\? chars :count 1)))
      symb)))
</pre>

	<p>In Common Lisp, characters are objects with their own type, and can be manipulated as such. <code>string</code> turns a symbol into a string<sup><a href="sicp-section-44#fn3">3</a></sup>, which can then be examined using the <code>char</code> function. Note how I get to the <em>rest of the string, after the ?</em> &#8211; by using <code>remove</code> on <code>?</code> with <code>:count 1</code>. This works since I know at that point that the string begins with <code>?</code>. <code>intern</code> then turns the new string into a symbol.</p>


	<p>Similarly, note the differences in <code>contract-question-mark</code>:</p>


<pre>
(defun contract-question-mark (var)
  (intern
    (concatenate 'string
      "?" 
      (if (numberp (cadr var))
        (concatenate 'string
          (string (caddr var))
          "-" 
          (write-to-string (cadr var)))
        (string (cadr var))))))
</pre>

	<p><code>write-to-string</code> is used to convert numbers to strings, and <code>concatenate</code> to stitch several strings together.</p>


	<p>Another interesting point I want to explain is the usage of <code>assoc</code> in <code>binding-in-frame</code>:</p>


<pre>
(defun binding-in-frame (var frame) 
    (assoc var frame :test #'equal))
</pre>

	<p>Note the peculiar <code>:test #'equal</code> &#8211; why is it here ? This is an interesting story in bug-hunting, actually. Recall that <code>expand-question-mark</code> turns <code>?x</code> into the list <code>(? x)</code> to as to make pattern matching and unification more efficient. Therefore, bindings in frames are stored with lists as the keys. For example, <code>(? x)</code> bound to <code>joe</code>, and so on. Therefore, <code>assoc</code> must be able to compare list keys. It turns out that the default comparison function for <code>assoc</code> in Scheme is <code>equal?</code>, which works for lists. On the other hand, in Common Lisp the default for <code>assoc</code> is <code>eql</code>, which doesn't work for lists ! Therefore, it is essential to provide <code>equal</code> as the test function explicitly when calling <code>assoc</code>.</p>


	<p>Another gotcha that stems from the Scheme-Common Lisp disparity is the usage of <code>lisp-value</code>. Since the evaluation of <code>lisp-value</code> calls the underlying Lisp's <code>apply</code> on the predicate:</p>


<pre>
(defun execute-exp (exp)
  (apply (eval (predicate exp)) (args exp)))
</pre>

	<p>The predicate must be <code>apply</code>-able. Therefore, when using Common Lisp I must pass a function object. I.e. instead of:</p>


<pre>
(and (salary ?person ?amount)
     (lisp-value &gt; ?amount 30000))
</pre>

	<p>For the Scheme implementation the authors use, in my version this should be:</p>


<pre>
(and (salary ?person ?amount)
     (lisp-value #'&gt; ?amount 30000))
</pre>

	<p>Because in Common Lisp <code>#'></code> is a function object and <code>></code> isn't.</p>


	<p>Finally, as with the Scheme evaluator written eariler in chapter 4, I prefer to have means to interpret expressions in a non-interactive way. So, I wrote <code>qinterpret</code>, which is similar to the authors' <code>query-driver-loop</code> from section 4.4.4.1, except for all the interactivity code:</p>


<pre>
(defun qinterpret (&#38;rest exps)
  (dolist (exp exps)
    (let ((q (query-syntax-process exp)))
      (cond ((assertion-to-be-added? q)
              (add-rule-or-assertion! (add-assertion-body q)))
            (t
              (display-stream
                (stream-map
                  (lambda (frame)
                    (instantiate
                      q
                      frame
                      (lambda (v f)
                        (contract-question-mark v))))
                  (qeval q (singleton-stream '())))))))))
</pre>

	<p>While at it, I added some functionality by allowing <code>qinterpret</code> to receive several expressions at the same time, and interpreting them all. This is useful for providing a whole bunch of assertions for the database:</p>


<pre>
(qinterpret
  '(assert! (address bob (haifa malal 12)))
  '(assert! (address jane (tel-aviv rokah 3)))
  '(assert! (address joe (haifa hertzel 33/1))))
</pre>

	<p>That's it. Now, we're ready to tackle the horde of exercises of section 4.4 &#8211; <em>bon voyage!</em></p>


<img class="align-center" src="../../../images/hline.jpg" style="width: 320px; height: 5px;" />

	<p id="fn1"><sup>1</sup> You can implement a whole logic programming interpreter with that ! Oh, wait&#8230;</p>


	<p id="fn2"><sup>2</sup> An instantiation of the query is simply substituting the variables it contains to the values they're assigned in the frame. For example:</p>


<pre>
(job ?x ?y)
</pre>

	<p>Instantiated with the frame where <code>?x</code> is set to <code>joe</code> and <code>?y</code> is set to <code>(computer programmer)</code>, results in:</p>


<pre>
(job joe (computer programmer))
</pre>

	<p>It can get just a bit more complicated than this, though, since in reality <code>?x</code> may be set to <code>?z</code> and <code>?z</code> to <code>joe</code> in the same frame. So, the instantiator works recursively, eventually resolving all variables to values.</p>


	<p id="fn3"><sup>3</sup> I could also use <code>symbol-name</code> for this purpose here, but <code>string</code> is more generic.</p>

    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-section-44';
            var disqus_url = 'http://eli.thegreenplace.net/2008/02/07/sicp-section-44';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-section-44#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>