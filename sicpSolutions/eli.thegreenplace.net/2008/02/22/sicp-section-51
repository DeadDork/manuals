<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:og="http://ogp.me/ns#"
      xmlns:fb="https://www.facebook.com/2008/fbml">
<head>
    <title>SICP section 5.1 - Eli Bendersky's website</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link href="../../../favicon.ico" rel="icon">

    <!-- Bootstrap -->
        <link rel="stylesheet" href="../../../theme/css/bootstrap.min.css" type="text/css"/>
    <link href="../../../theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="../../../theme/css/pygments/vs.css" rel="stylesheet">
    <link rel="stylesheet" href="../../../theme/css/style.css" type="text/css"/>

        <link href="../../../feeds/all.atom.xml" type="application/atom+xml" rel="alternate"
              title="Eli Bendersky's website ATOM Feed"/>

</head>
<body>

<div class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="../../../index.html" class="navbar-brand">
                <img src="../../../images/logosmall.png" width="32"/> 
Eli Bendersky's website            </a>
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="../../../pages/about">
                        <i class="fa fa-question"></i>
                        <span class="icon-label">About</span>
                    </a>
                </li>
                <li>
                    <a href="../../../pages/code">
                        <i class="fa fa-github"></i>
                        <span class="icon-label">Code</span>
                    </a>
                </li>
                <li>
                    <a href="../../../archives/all">
                        <i class="fa fa-th-list"></i>
                        <span class="icon-label">Archives</span>
                    </a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
</div> <!-- /.navbar -->

<div class="container">
    <div class="row">
    <section id="content">
        <article>
            <header class="page-header">
                <h1>
                    <a href="sicp-section-51"
                       rel="bookmark"
                       title="Permalink to SICP section 5.1">
                        SICP section 5.1
                    </a>
                </h1>
            </header>
            <div class="entry-content">
                <div class="panel">
                    <div class="panel-body">
<footer class="post-info">
    <span class="published">
        <i class="fa fa-calendar"></i>
        <time> February 22, 2008 at 17:44</time>
    </span>
<span class="label label-default">Tags</span>
    <a href="../../../tag/sicp">SICP</a>
</footer><!-- /.post-info -->                    </div>
                </div>
                
        <p>The code for chapter 5 will be written in Scheme<sup><a href="sicp-section-51#fn1">1</a></sup> (using <span class="caps">PLT</span> Scheme).</p>


	<h4>Introduction</h4>


	<p>As usual, I've jumped forward and implemented the register machine simulator of section 5.2, in order to be able to test the solutions to the exercises of this section. The simulator is available for download here</a>, with a test suite (using the SchemeUnit package from the <a href="http://planet.plt-scheme.org/">PLaneT</a> repository) here.
<!--more-->

	<h4>Exercises 5.1 &#8211; 5.2</h4>


	<p>I'll skip the drawings, and will present the code code the iterative factorial process with the register-machine language:</p>


<pre>
(define iter-fact
  (make-machine
    '(n product counter)
    `((&gt; ,&gt;) (* ,*) (+ ,+))
    '(
      init
        (assign counter (const 1))
        (assign product (const 1))
      loop
        (test (op &gt;) (reg counter) (reg n))
        (branch (label end-fib))
        (assign product (op *) (reg counter) (reg product))
        (assign counter (op +) (reg counter) (const 1))
        (goto (label loop))
      end-fib
    )))

(set-register-contents! iter-fact 'n 6)
(start iter-fact)
(get-register-contents iter-fact 'product)
=&gt;
720
</pre>

	<p>Note a convenience I'll be using throughout the chapter: instead of specifying the operations as a <code>list</code> of <code>list</code> explicitly, I'm using the backquote operator with commas. If this syntax is unfamiliar, consult <a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-7.html#%_sec_4.2.6">this section</a> of the Scheme manual.</p>


	<h4>Exercise 5.3</h4>


	<p>Once again, I'll skip the data path drawings and will get right to the register-machine code that can be simulated and tested. First, let's see the version that assumes <code>good-enough?</code> and <code>improve</code> are available as primitives:</p>


<pre>
(define (good-enough? guess x)
  (&lt; (abs (- (square guess) x)) 0.001))

(define (improve guess x)
  (average guess (/ x guess)))

(define newton-with-ops
  (make-machine
    '(x guess)
    `((good-enough? ,good-enough?) (improve ,improve))
    '(
      init
        (assign guess (const 1.0))
      sqrt-iter
        (test (op good-enough?) (reg guess) (reg x))
        (branch (label end-sqrt))
        (assign guess (op improve) (reg guess) (reg x))
        (goto (label sqrt-iter))
      end-sqrt
    )))
</pre>

	<p>To actually make them work as primitives, I define them as Scheme functions and later pass them to the machine in the <em>operations list</em>. Note that I made both functions accept <code>x</code> explicitly as an argument in order to separate them from the main function.</p>


	<p>Let's see how this works:</p>


<pre>
(set-register-contents! newton-with-ops 'x 2)
(start newton-with-ops)
(printf "~a~%" (get-register-contents newton-with-ops 'guess))
=&gt;
1.4142156862745097
</pre>

	<p>Good. Now, let's implement these operations in the register-machine language and incorporate them into the machine:</p>


<pre>
(define newton-full
  (make-machine
    '(x guess r1)
    `((&lt; ,&lt;) (abs ,abs) (- ,-) (/ ,/)
      (square ,square) (average ,average))
    '(
      init
        (assign guess (const 1.0))
      sqrt-iter
        ; good-enough?
        (assign r1 (op square) (reg guess))
        (assign r1 (op -) (reg r1) (reg x))
        (assign r1 (op abs) (reg r1))
        (test (op &lt;) (reg r1) (const 0.001))
        (branch (label end-sqrt))
        ; not good-enough? then improve
        (assign r1 (op /) (reg x) (reg guess))
        (assign guess (op average) (reg guess) (reg r1))
        (goto (label sqrt-iter))
      end-sqrt
    )))

(set-register-contents! newton-full 'x 2)
(start newton-full)
(printf "~a~%" (get-register-contents newton-full 'guess))
=&gt;
1.4142156862745097
</pre>

	<p>I'm using <code>r1</code> as a temporary register<sup><a href="sicp-section-51#fn2">2</a></sup>, and the bulding blocks of <code>improve</code> and <code>good-enough?</code> as primitives &#8211; the operations <code>square</code>, <code>average</code> and <code>abs</code>, which could be further broken down to register-machine language, of course.</p>


	<h4>Recursive procedures</h4>


	<p>Maybe it's just me, but I found the recursive implementation of the factorial procedure<sup><a href="sicp-section-51#fn3">3</a></sup> by the authors in section 5.1.4 hard to understand. The reason is that it's an <em>optimized</em> hand-coded implementation, and I'm used to thinking in terms of compilers translating higher-order languages (like C) into assembly. So, I've decided to see how I would first think to implement this recursive factorial.</p>


	<p>So, if you share my confusion, and aren't afraid of a little asembly code, you'll find this detour interesting.</p>


	<p>So, how is recursion traditionally implemented in assembly ? Not much differently from the way normal procedures are implemented, it appears. Calling a procedure is just jumping to the procedure's label in some sense. Many assembly languages have the operations <code>call</code> and <code>ret</code>.</p>


	<p><code>call</code> does the following:</p>


	<ol>
	<li>Saves the address of the next instruction on the stack </li>
		<li>Jumps to the procedure</li>
	</ol>


	<p><code>ret</code> does the following:</p>


	<ol>
	<li>Pops the return address from the stack</li>
		<li>Jumps to the return address</li>
	</ol>


	<p>However, calling procedures isn't enough. To make them really useful, procedures have to be passed arguments and return values. For this, several conventions exist:</p>


	<ul>
	<li>Registers can be used for arguments and return values. While this is the most efficient method, it is not generally applicable, because sometimes the call-sequences of procedures are long (proc1 calls proc2, which calls proc3 etc.) and there's not enough registers. Moreover, recursive procedures make this approach completely infeasible.</li>
	</ul>


	<ul>
	<li>The stack can be used for arguments and return values. This is the less efficient, but a much more general approach that works in all cases. The stack's <span class="caps">LIFO</span> nature guarantees the consistency of data, and arbitrary call-trees can be implemented, including recursive ones.</li>
	</ul>


	<ul>
	<li>Mixed approach: for example, arguments on stack, return value in a register. This is actually used by C compilers (recall that C can return only a single value&#8230;), unless a large object like a <code>struct</code> is returned.</li>
	</ul>


	<p>Another important thing to keep in mind is that a well-behaving procedure must not ruin the data of its caller, and hence must leave all the registers intact. Usually, upon entry a procedure saves all the registers it's going to use on the stack, and before returning restores their value, thus preserving transparency.</p>


	<p>So, let's use this approach to implement the recursive factorial procedure in our register-machine language:</p>


	<ul>
	<li>Since we have no <code>call</code> instruction, we'll explicitly push on the stack the label where we want to go after the procedure returns, and then jump to the procedure.</li>
	</ul>


	<ul>
	<li>Since we have no <code>ret</code> instruction, we'll expicitly gather the return address from the stack and jump to it</li>
	</ul>


	<ul>
	<li>We'll pass arguments (only <code>n</code> in our case) on the stack, and the return value in a register called <code>retval</code>.</li>
	</ul>


	<ul>
	<li>The factorial procedure will save all the registers it uses on the stack when it starts and restore them when it ends.</li>
	</ul>


	<ul>
	<li>There's a minor difficuly in our language, presented by the fact that the access to the stack is only to and from its top. In x86 assembly, there's a comfortable addressing mode that allows us to read values from the stack without popping it<sup><a href="sicp-section-51#fn4">4</a></sup>, so much less pushing and popping is required.</li>
	</ul>


	<p>Here's the code:</p>


<pre>
(define factorial-rec
  (make-machine
    '(n temp retval retaddr)
    `((= ,=) (+ ,+) (- ,-) (* ,*) (printf ,printf))
    '(
        (goto (label machine-start))

        ;;; procedure fact
      fact
        (restore retaddr)       ; return address
        (restore temp)          ; argument
        (save n)                ; save caller's n and retaddr
        (save retaddr)
        (assign n (reg temp))   ; working on n
        (test (op =) (reg n) (const 1))
        (branch (label fact-base))
        (assign temp (op -) (reg n) (const 1))
        ; prepare for the recursive call:
        ;  push the argument and return value on stack
        (save temp)
        (assign retaddr (label fact-after-rec-return))
        (save retaddr)
        (goto (label fact))     ; the recursive call
      fact-after-rec-return
        (assign retval (op *) (reg retval) (reg n))
        (goto (label fact-end))

      fact-base
        (assign retval (const 1))

      fact-end
        ; restore the caller's registers we've saved
        ;
        (restore retaddr)
        (restore n)
        (goto (reg retaddr))    ; return to caller
        ;;; end procedure fact

      machine-start
        ; to call fact, push n and a return address on stack
        ; and jump to fact
        (save n)
        (assign retaddr (label machine-end))
        (save retaddr)
        (goto (label fact))

      machine-end
    )))
</pre>

	<p>Although it's considerably longer than the authors' version, I find it easier to understand, because it has a very standard structure.</p>


	<p>In the beginning, we jump to the <code>machine-start</code> label which calls the factorial procedure. Note the call: first <code>n</code> is pushed, then the return address. This is going to be the calling convention throughout the code. The procedure <code>fact</code> itself is marked with a pair of comments.</p>


	<p><code>fact</code> does some intensive stack work in the beginning. First, it fetches the return address into <code>retaddr</code> and the argument into <code>temp</code>. Then, it saves the return address back again, together with <code>n</code> because it's going to use these registers in its work. If these steps seem unnecessary, think again. The procedure must have its argument and return value, and they're on the stack. The only way to get them is pop them from the stack. But then, as I said, in order to be transparent a procedure must save all the registers it's going to use and restore them before it returns.</p>


	<p>Next it tests for <code>n = 0</code>, and jumps to <code>fact-base</code> if it is. If it isn't, it computes <code>n - 1</code> and calls itself recursively (note that it's done in exactly the same way as the original call from <code>machine-start</code>). <code>fact-end</code> is a common return point that restores the registers the procedure corrupted and jumps to the return address.</p>


	<p>Now if you look at the authors' version, you'll see all the same building blocks, but some of the things were optimized away because the procedure is written not in a general way, but fine-tuned to the factorial problem. While for real machine language programs this is the better way to go, I think that for educational purposes my approach would be better.</p>


	<h4>Exercise 5.4</h4>


	<p>This is so similar to the factorial procedure that I don't think implementing it would teach us anything new. The only real difference is an additional argument <code>b</code>. But note that it's not changed throughout the procedure, so it can just be left in a register of its own, making the rest of the code even more similar to factorial.</p>


	<h4>Exercise 5.5</h4>


	<p>I'll simulate my implementation of <code>factorial</code> with the input <code>n = 2</code>. The stack is shown with its top on the right hand side. I.e. pushing 1, then 5, then 7 into an empty stack results in:</p>


<pre>
1 5 7
</pre>

	<p>OK, so we're in <code>machine-start</code> calling <code>fact</code> with <code>n = 2</code>:</p>


<pre>
stack: 2 (label machine-end)
goto (label fact)
.
restoring retaddr and n
stack:
saving n and retaddr:
stack: 2 (label machine-end)
n != 1, hence a recursive call:
pushing new argument and return address on stack
stack: 2 (label machine-end) 1 (label fact-after-rec-return)
goto (label fact)
.
restoring retaddr and n
stack: 2 (label machine-end)
saving n and retaddr:
stack: 2 (label machine-end) 1 (label fact-after-rec-return)
n = 1, hence goto (label fact-base)
.
retval &lt;- 1
restoring retaddr and n
stack: 2 (label machine-end)
goto retaddr, which is (label fact-after-rec-return)
.
retval &lt;- 1 * 2
goto (label fact-end)
.
restoring retaddr and n
stack: 
goto retaddr, which is (label machine-end)
.
at (label machine-end)
retval = 2
</pre>

	<h4>Exercise 5.6</h4>


	<p>In <code>afterfib-n-1</code>, <code>(restore continue)</code> and <code>(save continue)</code> can be safely removed, leaving us with:</p>


<pre>
(controller
   (assign continue (label fib-done))
 fib-loop
   (test (op &lt;) (reg n) (const 2))
   (branch (label immediate-answer))
   ;; set up to compute Fib(n - 1)
   (save continue)
   (assign continue (label afterfib-n-1))
   (save n)                           ; save old value of n
   (assign n (op -) (reg n) (const 1)); clobber n to n - 1
   (goto (label fib-loop))            ; perform recursive call
 afterfib-n-1                         ; upon return, val contains Fib(n - 1)
   (restore n)
   ;; &gt;&gt; was: (restore continue)
   ;; set up to compute Fib(n - 2)
   (assign n (op -) (reg n) (const 2))
   ;; &gt;&gt; was: (save continue)
   (assign continue (label afterfib-n-2))
   (save val)                         ; save Fib(n - 1)
   (goto (label fib-loop))
 afterfib-n-2                         ; upon return, val contains Fib(n - 2)
   (assign n (reg val))               ; n now contains Fib(n - 2)
   (restore val)                      ; val now contains Fib(n - 1)
   (restore continue)
   (assign val                        ;  Fib(n - 1) +  Fib(n - 2)
           (op +) (reg val) (reg n)) 
   (goto (reg continue))              ; return to caller, answer is in val
 immediate-answer
   (assign val (reg n))               ; base case:  Fib(n) = n
   (goto (reg continue))
</pre>

	<p>Why is this safe ?</p>


	<p>What it does is take out <code>continue</code> from the stack and place it back again, so the stack isn't changed by these two instructions. But perhaps the value popped into the <code>continue</code> register is used ?</p>


	<p>It is not, because on the next line, the <code>continue</code> register is assigned another value.</p>


<img class="align-center" src="../../../images/hline.jpg" style="width: 320px; height: 5px;" />

	<p id="fn1"><sup>1</sup> I've decided to switch to Scheme because the register machine simulator is written in the <em>dispatch style</em>, which is much less cumbersome in Scheme than in Common Lisp.</p>


	<p id="fn2"><sup>2</sup> And following the convention of real machines where the <em>general purpose registers</em> which are used for temporary computations are usually called r1, r2, r3, etc.</p>


	<p id="fn3"><sup>3</sup> <code>factorial</code> is a notorious example because implementing it recursively is very inefficient compared to the simple interative implementation. However, it serves as a good example of implementing recursion, because it contains, in a very simplified way, everything one needs to know about recursive functions.</p>


	<p id="fn4"><sup>4</sup> In x86 there's a <em>base pointer</em> register <code>bp</code> which allows to access arguments, for example <code>add ax, 4[bp]</code> adds to the register <code>ax</code> the argument that was pushed last on the stack (before the return address).</p>

    
            </div>
            <!-- /.entry-content -->
    <hr />
    <section class="comments" id="comments">
        <h2>Comments</h2>
        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'elibenderskyswebsite'; // required: replace example with your forum shortname
            var disqus_identifier = 'sicp-section-51';
            var disqus_url = 'http://eli.thegreenplace.net/2008/02/22/sicp-section-51';
            var disqus_config = function () {
                this.language = "en";
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
        </article>
    </section>

    </div>
</div>
<footer>
   <div class="container">
      <hr>
      <div class="row">
         <div class="col-xs-10">
            &copy; 2003-2014 Eli Bendersky
         </div>
         <div class="col-xs-2"><p class="pull-right"><i class="fa fa-arrow-up"></i> <a href="sicp-section-51#">Back to top</a></p></div>
      </div>
   </div>
</footer>
<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../../theme/js/bootstrap.min.js"></script>

<!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
<script src="../../../theme/js/respond.min.js"></script>

<script type="text/javascript">

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-54426790-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>